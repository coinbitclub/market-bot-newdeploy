#!/usr/bin/env node

/**
 * üîç VERIFICADOR DE IP FIXO ATUAL
 * ==============================
 * 
 * Descobre qual √© o IP fixo ativo do sistema
 */

const axios = require('axios');
const { execSync } = require('child_process');
require('dotenv').config();

class IPFixoChecker {
    async verificarIPAtual() {
        console.log('üîç VERIFICA√á√ÉO DE IP FIXO ATIVO');
        console.log('=' .repeat(50));

        // 1. Verificar se Ngrok est√° rodando localmente
        await this.checkNgrokLocal();

        // 2. Verificar Railway deploy
        await this.checkRailwayDeploy();

        // 3. Verificar configura√ß√µes de ambiente
        await this.checkEnvConfig();

        // 4. Testar IPs externos
        await this.checkExternalIPs();
    }

    async checkNgrokLocal() {
        console.log('\n1Ô∏è‚É£ Verificando Ngrok Local...');
        
        try {
            const response = await axios.get('http://127.0.0.1:4040/api/tunnels', { timeout: 5000 });
            
            if (response.data && response.data.tunnels && response.data.tunnels.length > 0) {
                const tunnel = response.data.tunnels[0];
                const publicUrl = tunnel.public_url;
                const ip = publicUrl.replace('https://', '').replace('http://', '').split('.')[0];
                
                console.log('‚úÖ Ngrok ATIVO localmente!');
                console.log(`üåê URL P√∫blica: ${publicUrl}`);
                console.log(`üìç IP/Subdom√≠nio: ${ip}`);
                console.log(`üöÄ Protocolo: ${tunnel.proto}`);
                
                return publicUrl;
            } else {
                console.log('‚ö†Ô∏è Ngrok rodando mas sem t√∫neis ativos');
            }
        } catch (error) {
            console.log('‚ùå Ngrok n√£o est√° rodando localmente');
        }
        return null;
    }

    async checkRailwayDeploy() {
        console.log('\n2Ô∏è‚É£ Verificando Railway Deploy...');
        
        // URLs poss√≠veis do Railway
        const possibleUrls = [
            'https://coinbitclub-market-bot-production.up.railway.app',
            'https://web-production-XXXX.up.railway.app',
            'https://backend-production-XXXX.up.railway.app'
        ];

        for (const url of possibleUrls) {
            try {
                const response = await axios.get(`${url}/health`, { timeout: 10000 });
                console.log(`‚úÖ Railway ATIVO: ${url}`);
                console.log(`üìä Status: ${response.status}`);
                
                // Verificar se h√° informa√ß√£o de Ngrok no response
                if (response.data && response.data.ngrok_url) {
                    console.log(`üåê Ngrok URL: ${response.data.ngrok_url}`);
                }
                
                return url;
            } catch (error) {
                console.log(`‚ùå ${url} - n√£o acess√≠vel`);
            }
        }
        
        console.log('‚ö†Ô∏è Nenhum deploy Railway encontrado ativo');
        return null;
    }

    async checkEnvConfig() {
        console.log('\n3Ô∏è‚É£ Verificando Configura√ß√µes...');
        
        const ngrokToken = process.env.NGROK_AUTH_TOKEN;
        const ngrokRegion = process.env.NGROK_REGION || 'us';
        const ngrokSubdomain = process.env.NGROK_SUBDOMAIN;
        
        if (ngrokToken) {
            console.log('‚úÖ NGROK_AUTH_TOKEN configurado');
            console.log(`üåç Regi√£o: ${ngrokRegion}`);
            
            if (ngrokSubdomain) {
                console.log(`üè∑Ô∏è Subdom√≠nio: ${ngrokSubdomain}`);
                console.log(`üåê URL esperada: https://${ngrokSubdomain}.ngrok.io`);
            } else {
                console.log('‚ö†Ô∏è Subdom√≠nio n√£o configurado (URL ser√° aleat√≥ria)');
            }
        } else {
            console.log('‚ùå NGROK_AUTH_TOKEN n√£o configurado');
        }
    }

    async checkExternalIPs() {
        console.log('\n4Ô∏è‚É£ Verificando IPs Externos...');
        
        try {
            // Verificar IP p√∫blico atual
            const ipResponse = await axios.get('https://api.ipify.org', { timeout: 5000 });
            console.log(`üåê IP P√∫blico Atual: ${ipResponse.data}`);
            
            // Verificar geolocaliza√ß√£o
            const geoResponse = await axios.get(`http://ip-api.com/json/${ipResponse.data}`, { timeout: 5000 });
            if (geoResponse.data.status === 'success') {
                console.log(`üìç Localiza√ß√£o: ${geoResponse.data.city}, ${geoResponse.data.country}`);
                console.log(`üè¢ Provedor: ${geoResponse.data.isp}`);
            }
            
        } catch (error) {
            console.log('‚ùå Erro ao verificar IP externo');
        }
    }

    async descobrirIPFixo() {
        console.log('\nüéØ RESUMO DO IP FIXO:');
        console.log('=' .repeat(50));
        
        // Verificar se h√° arquivo de informa√ß√µes do Ngrok
        try {
            if (require('fs').existsSync('./ngrok-info.json')) {
                const ngrokInfo = JSON.parse(require('fs').readFileSync('./ngrok-info.json', 'utf8'));
                console.log(`‚úÖ SEU IP FIXO: ${ngrokInfo.url}`);
                console.log(`üè∑Ô∏è Subdom√≠nio: ${ngrokInfo.subdomain || 'n√£o definido'}`);
                console.log(`üìÖ Estabelecido: ${new Date(ngrokInfo.timestamp).toLocaleString()}`);
                console.log('üîí Este √© o URL que deve ser usado nas exchanges');
                console.log('üìã Configure este IP no whitelist da Bybit/Binance');
                console.log('');
                console.log('üîó URLs para whitelist:');
                console.log(`   ‚Ä¢ Webhook: ${ngrokInfo.url}/webhook`);
                console.log(`   ‚Ä¢ API: ${ngrokInfo.url}/api/*`);
                console.log(`   ‚Ä¢ Health: ${ngrokInfo.url}/health`);
                return ngrokInfo.url;
            }
        } catch (error) {
            console.log('‚ö†Ô∏è Erro ao ler informa√ß√µes do Ngrok:', error.message);
        }
        
        // Se Ngrok est√° configurado
        const ngrokSubdomain = process.env.NGROK_SUBDOMAIN;
        const ngrokEnabled = process.env.NGROK_ENABLED === 'true';
        
        if (ngrokEnabled && ngrokSubdomain) {
            const ngrokUrl = `https://${ngrokSubdomain}.ngrok.io`;
            console.log(`‚úÖ SEU IP FIXO CONFIGURADO: ${ngrokUrl}`);
            console.log('üîí Este √© o URL que deve ser usado nas exchanges');
            console.log('üìã Configure este IP no whitelist da Bybit/Binance');
            console.log('');
            console.log('‚ö†Ô∏è ATEN√á√ÉO: Ngrok pode n√£o estar ativo ainda');
            console.log('   Aguarde alguns minutos ap√≥s o deploy');
            console.log('   Ou reinicie o servi√ßo no Railway');
            return ngrokUrl;
        }
        
        console.log('‚ö†Ô∏è IP fixo n√£o est√° configurado ainda');
        console.log('üí° Para configurar:');
        console.log('   1. Configure NGROK_AUTH_TOKEN no Railway');
        console.log('   2. Configure NGROK_SUBDOMAIN=coinbitclub-bot');
        console.log('   3. Configure NGROK_ENABLED=true');
        console.log('   4. Redeploy o sistema');
        console.log('');
        console.log('üìñ Consulte o arquivo DEPLOY-GUIDE.md para instru√ß√µes completas');
        
        return null;
    }
}

// Executar verifica√ß√£o
async function main() {
    const checker = new IPFixoChecker();
    await checker.verificarIPAtual();
    await checker.descobrirIPFixo();
}

main().catch(console.error);
