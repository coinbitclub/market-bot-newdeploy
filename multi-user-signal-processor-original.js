const { Pool } = require('pg');
const axios = require('axios');
const OpenAI = require('openai');
const SignalHistoryAnalyzer = require('./signal-history-analyzer');
const OrderManager = require('./order-manager');
const MarketDirectionMonitor = require('./market-direction-monitor');
const SignalMetricsMonitor = require('./signal-metrics-monitor');
const ExchangeKeyValidator = require('./exchange-key-validator');
const BTCDominanceAnalyzer = require('./btc-dominance-analyzer');
const RSIOverheatedMonitor = require('./rsi-overheated-monitor');
const DetailedSignalTracker = require('./detailed-signal-tracker');

class MultiUserSignalProcessor {
    constructor() {
        this.pool = new Pool({
            connectionString: 'postgresql://postgres:ELjbkkgUASRCtdTAXVFgIssOXiLsRCPq@trolley.proxy.rlwy.net:44790/railway',
            ssl: false
        });

        // Inicializar componentes de monitoramento
        this.signalHistory = new SignalHistoryAnalyzer();
        this.orderManager = new OrderManager();
        this.marketMonitor = new MarketDirectionMonitor();
        this.signalMetrics = new SignalMetricsMonitor();
        this.keyValidator = new ExchangeKeyValidator();
        this.btcDominance = new BTCDominanceAnalyzer();
        this.rsiMonitor = new RSIOverheatedMonitor();
        this.detailedTracker = new DetailedSignalTracker();

        // Configurar OpenAI para an√°lise de IA
        if (process.env.OPENAI_API_KEY && process.env.OPENAI_API_KEY.startsWith("YOUR_OPENAI_API_KEY")) {
            this.openai = new OpenAI({
                apiKey: process.env.OPENAI_API_KEY,
            });
            console.log('ü§ñ OpenAI: Configurado para an√°lise IA');
        } else {
            this.openai = null;
            console.log('‚ö†Ô∏è OpenAI: N√£o configurado (usando fallback)');
        }

        console.log('üöÄ Multi-User Signal Processor iniciado');
        console.log('ü§ñ IA OpenAI: Modo supervis√£o ativo');
        console.log('üìä An√°lise de mercado: Fear & Greed + TOP 100');
        console.log('üß† Hist√≥rico de sinais: ATIVO');
        console.log('üìã TP/SL obrigat√≥rios: ATIVO');
        console.log('üìä Monitoramento de dire√ß√£o: ATIVO');
        console.log('üìà M√©tricas de sinais: ATIVO');
        console.log('üîê Valida√ß√£o de chaves: ATIVO');
        console.log('üìä Domin√¢ncia BTC: ATIVO');
        console.log('üìä Monitor RSI: ATIVO');
        console.log('‚≠ê PRIORIDADE SINAIS FORTE: ATIVA');
    }

    /**
     * üß† COORDENA√á√ÉO E SUPERVIS√ÉO POR IA
     * A IA analisa, coordena e supervisiona TODO o processo
     * Papel: COORDENA√á√ÉO E SUPERVIS√ÉO (n√£o autonomia para abrir/fechar)
     * ‚≠ê PRIORIDADE ESPECIAL PARA SINAIS FORTE
     */
    async processSignal(signalData) {
        const isStrongSignal = signalData.signal && signalData.signal.includes('FORTE');
        
        console.log('üîÑ INICIANDO PROCESSO COORDENADO PELA IA');
        console.log('üì° Sinal recebido:', signalData);
        if (isStrongSignal) {
            console.log('‚≠ê SINAL FORTE DETECTADO - PRIORIDADE ALTA');
        }

        try {
            // ETAPA 1: Obter dire√ß√£o atual do mercado (usando monitor integrado)
            const marketDirection = await this.marketMonitor.getCurrentDirection();
            
            console.log(`üìä Fear & Greed: ${marketDirection.fearGreed.value}/100`);
            console.log(`üß≠ Dire√ß√£o permitida: ${marketDirection.allowed}`);
            console.log(`üí∞ TOP 100: ${marketDirection.top100.percentageUp}% (${marketDirection.top100.trend})`);

            // ETAPA 2: An√°lises avan√ßadas de mercado
            const [btcAnalysis, rsiAnalysis] = await Promise.all([
                this.btcDominance.analyzeBTCDominanceCorrelation(),
                this.rsiMonitor.analyzeMarketRSI()
            ]);

            console.log(`üìä BTC Domin√¢ncia: ${btcAnalysis.btcDominance?.btcDominance || 'N/A'}%`);
            console.log(`üìà RSI Mercado: ${rsiAnalysis.marketOverview?.averageRSI || 'N/A'}`);

            // ETAPA 3: Valida√ß√£o de Sinal (janela de 30 segundos + dire√ß√£o + prefer√™ncia FORTE)
            const signalValidation = this.validateSignal(signalData, marketDirection.allowed, isStrongSignal);
            if (!signalValidation.valid) {
                console.log('‚ùå Sinal rejeitado:', signalValidation.reason);
                
                // Registrar sinal rejeitado
                await this.signalMetrics.registerSignal(signalData, marketDirection, {
                    shouldExecute: false,
                    reason: signalValidation.reason,
                    btcAnalysis,
                    rsiAnalysis
                });
                
                return { success: false, reason: signalValidation.reason };
            }

            // ETAPA 4: An√°lise de hist√≥rico de sinais (contrarian movement detection)
            const signalHistoryAnalysis = await this.signalHistory.analyzeSignal(
                signalData.ticker, 
                signalData.signal
            );
            
            console.log('üß† An√°lise hist√≥rica:', signalHistoryAnalysis.recommendation);

            // ETAPA 5: IA COORDENA E SUPERVISIONA O PROCESSO
            const aiDecision = await this.aiCoordinateAndSupervise(
                signalData, 
                marketDirection, 
                signalHistoryAnalysis,
                { btcAnalysis, rsiAnalysis, isStrongSignal }
            );

            // ETAPA 5.5: TRACKING DETALHADO DAS 4 CONDI√á√ïES
            const trackingResult = await this.detailedTracker.trackSignalConditions(
                signalData,
                marketDirection, 
                signalHistoryAnalysis,
                aiDecision,
                isStrongSignal
            );

            // ETAPA 6: Registrar m√©tricas do sinal
            const signalMetricsResult = await this.signalMetrics.registerSignal(
                signalData, 
                marketDirection, 
                { ...aiDecision, btcAnalysis, rsiAnalysis, tracking: trackingResult }
            );

            if (!aiDecision.shouldExecute) {
                console.log('ü§ñ IA decidiu N√ÉO executar:', aiDecision.reason);
                return { success: false, reason: aiDecision.reason };
            }

            console.log('ü§ñ IA APROVOU execu√ß√£o:', aiDecision.analysis);
            if (isStrongSignal) {
                console.log('‚≠ê PROCESSANDO SINAL FORTE COM PRIORIDADE');
            }

            // ETAPA 7: Executar para usu√°rios (coordenado pela IA)
            const userExecutions = await this.executeForAllUsers(signalData, aiDecision);

            return {
                success: true,
                signalId: signalData.id,
                isStrongSignal: isStrongSignal,
                aiDecision: aiDecision,
                marketDirection: marketDirection,
                signalHistory: signalHistoryAnalysis,
                signalMetrics: signalMetricsResult,
                btcAnalysis: btcAnalysis,
                rsiAnalysis: rsiAnalysis,
                executions: userExecutions
            };

        } catch (error) {
            console.error('‚ùå Erro no processo coordenado pela IA:', error.message);
            return { success: false, error: error.message };
        }
    }

    /**
     * ü§ñ ETAPA 5: IA COORDENA E SUPERVISIONA TODO O PROCESSO
     * Papel: COORDENA√á√ÉO E SUPERVIS√ÉO (n√£o abrir/fechar opera√ß√µes)
     * ‚≠ê PREFER√äNCIA ESPECIAL PARA SINAIS FORTE
     */
    async aiCoordinateAndSupervise(signalData, marketDirection, signalHistoryAnalysis, additionalData = {}) {
        try {
            const { btcAnalysis, rsiAnalysis, isStrongSignal } = additionalData;

            if (!this.openai) {
                console.warn('‚ö†Ô∏è OpenAI n√£o configurado, usando l√≥gica de fallback');
                return this.fallbackDecision(signalData, marketDirection, signalHistoryAnalysis, isStrongSignal, { btcAnalysis, rsiAnalysis });
            }

            const prompt = `
Como IA coordenadora e supervisora do sistema de trading, analise os dados e decida se o sinal deve ser executado:

DADOS DO MERCADO:
- Fear & Greed Index: ${marketDirection.fearGreed.value}/100 (${marketDirection.fearGreed.classification})
- Dire√ß√£o permitida: ${marketDirection.allowed}
- TOP 100 moedas: ${marketDirection.top100.percentageUp}% subindo (${marketDirection.top100.trend})
- Confian√ßa da dire√ß√£o: ${(marketDirection.confidence * 100).toFixed(1)}%
- Market Cap 24h: ${btcAnalysis?.btcDominance?.market_cap_change_24h ? (btcAnalysis.btcDominance.market_cap_change_24h > 0 ? '+' : '') + btcAnalysis.btcDominance.market_cap_change_24h.toFixed(2) + '%' : 'N/A'}

DADOS DO SINAL:
- Sinal: ${signalData.signal}
- Ticker: ${signalData.ticker}
- Fonte: ${signalData.source}
- √â SINAL FORTE: ${isStrongSignal ? 'SIM - PRIORIDADE ALTA' : 'N√ÉO'}

AN√ÅLISE HIST√ìRICA:
- Recomenda√ß√£o: ${signalHistoryAnalysis.recommendation}
- Padr√£o detectado: ${signalHistoryAnalysis.pattern || 'Nenhum'}
- Hist√≥rico de sinais: ${signalHistoryAnalysis.signalCount} sinais recentes

AN√ÅLISES AVAN√áADAS:
- BTC Domin√¢ncia: ${btcAnalysis?.btcDominance?.btcDominance || 'N/A'}% (${btcAnalysis?.btcDominance?.classification || 'N/A'})
- RSI M√©dio do Mercado: ${rsiAnalysis?.marketOverview?.averageRSI || 'N/A'}
- Alertas BTC: ${btcAnalysis?.alerts?.length || 0} alertas
- Alertas RSI: ${rsiAnalysis?.alerts?.length || 0} alertas

REGRAS DE NEG√ìCIO:
1. IA N√ÉO tem autonomia para decidir diferente das regras mapeadas
2. IA apenas COORDENA e SUPERVISIONA o processo
3. IA N√ÉO pode tomar decis√µes pr√≥prias fora das regras
4. PRIORIDADE ESPECIAL para SINAIS FORTE (menor rigidez nos crit√©rios)
5. Considerar volatilidade do mercado para poss√≠vel fechamento antecipado
6. Alertas de sobrecompra/sobrevenda devem influenciar a decis√£o
7. VARIA√á√ÉO MARKET CAP: Valores positivos favorecem LONG, negativos favorecem SHORT

CRIT√âRIOS PARA APROVA√á√ÉO (ATUALIZADOS):
- Sinal deve estar alinhado com dire√ß√£o permitida ‚úÖ
- RSI_15 deve estar favor√°vel: <80 para LONG e >30 para SHORT ‚úÖ
- Comparativo de sinais anteriores da mesma moeda (an√°lise de padr√£o LONG/SHORT) ‚úÖ
- Para SINAIS FORTE: crit√©rios mais flex√≠veis ‚úÖ
- M√©tricas de mercado devem estar em condi√ß√£o neutra ou favor√°vel
- Fear & Greed: >70 favorece LONG, <30 favorece SHORT
- Market Cap 24h: >1% favorece LONG, <-1% favorece SHORT

CRIT√âRIOS REMOVIDOS/FLEXIBILIZADOS:
- Hist√≥rico de sinais (muito restritivo)
- Confian√ßa da dire√ß√£o r√≠gida (flexibilizado)
- Conflitos nas m√©tricas (flexibilizado para permitir mais sinais)

Responda apenas: SIM ou N√ÉO seguido de uma breve justificativa (m√°ximo 50 palavras).`;

            const response = await this.openai.chat.completions.create({
                model: 'gpt-3.5-turbo',
                messages: [{ role: 'user', content: prompt }],
                max_tokens: 100,
                temperature: 0.1
            });

            const aiResponse = response.choices[0].message.content.trim();
            const shouldExecute = aiResponse.toLowerCase().startsWith('sim');

            return {
                shouldExecute: shouldExecute,
                analysis: aiResponse,
                confidence: marketDirection.confidence,
                isStrongSignal: isStrongSignal,
                factors: {
                    marketDirection: marketDirection.allowed,
                    fearGreed: marketDirection.fearGreed.value,
                    top100Trend: marketDirection.top100.trend,
                    signalHistory: signalHistoryAnalysis.recommendation,
                    btcDominance: btcAnalysis?.btcDominance?.btcDominance,
                    marketRSI: rsiAnalysis?.marketOverview?.averageRSI,
                    marketCapChange24h: btcAnalysis?.btcDominance?.market_cap_change_24h
                }
            };

        } catch (error) {
            console.warn('‚ö†Ô∏è Erro na an√°lise da IA, usando fallback:', error.message);
            return this.fallbackDecision(signalData, marketDirection, signalHistoryAnalysis, isStrongSignal, { btcAnalysis, rsiAnalysis });
        }
    }

    /**
     * üîÑ L√ìGICA DE FALLBACK INTELIGENTE COM NOVOS CRIT√âRIOS AJUSTADOS
     */
    async fallbackDecision(signalData, marketDirection, signalHistoryAnalysis, isStrongSignal = false, additionalData = {}) {
        const signalDirection = this.getSignalDirection(signalData.signal);
        const { rsiAnalysis } = additionalData;
        
        // NOVOS CRIT√âRIOS - An√°lise de condi√ß√µes favor√°veis
        let favorableConditions = 0;
        let totalConditions = 4;
        let detailedAnalysis = [];

        // 1. ‚úÖ Dire√ß√£o do mercado favor√°vel (MANTIDO)
        let condition1 = false;
        if (
            (marketDirection.allowed === 'LONG_E_SHORT') ||
            (marketDirection.allowed === 'SOMENTE_LONG' && signalDirection === 'LONG') ||
            (marketDirection.allowed === 'SOMENTE_SHORT' && signalDirection === 'SHORT') ||
            (marketDirection.allowed === 'PREFERENCIA_LONG' && signalDirection === 'LONG') ||
            (marketDirection.allowed === 'PREFERENCIA_SHORT' && signalDirection === 'SHORT')
        ) {
            favorableConditions++;
            condition1 = true;
            detailedAnalysis.push(`‚úÖ Dire√ß√£o do mercado: ${marketDirection.allowed} ‚Üí ${signalDirection}`);
        } else {
            detailedAnalysis.push(`‚ùå Dire√ß√£o do mercado: ${marketDirection.allowed} ‚â† ${signalDirection}`);
        }

        // 2. ‚úÖ NOVO: RSI_15 favor√°vel (<80 para LONG, >30 para SHORT)
        let condition2 = false;
        const rsi15 = await this.getRSI15ForTicker(signalData.ticker);
        if (rsi15) {
            if (
                (signalDirection === 'LONG' && rsi15 < 80) ||
                (signalDirection === 'SHORT' && rsi15 > 30)
            ) {
                favorableConditions++;
                condition2 = true;
                detailedAnalysis.push(`‚úÖ RSI_15: ${rsi15.toFixed(1)} (favor√°vel para ${signalDirection})`);
            } else {
                detailedAnalysis.push(`‚ùå RSI_15: ${rsi15.toFixed(1)} (desfavor√°vel para ${signalDirection})`);
            }
        } else {
            // Se n√£o conseguir obter RSI_15, considera neutro
            favorableConditions++;
            condition2 = true;
            detailedAnalysis.push(`‚ö†Ô∏è RSI_15: N√£o dispon√≠vel (considerado neutro)`);
        }

        // 3. ‚úÖ NOVO: Comparativo de sinais anteriores da mesma moeda
        let condition3 = false;
        const coinComparative = await this.analyzeCoinSignalHistory(signalData.ticker, signalDirection);
        if (coinComparative.favorable) {
            favorableConditions++;
            condition3 = true;
            detailedAnalysis.push(`‚úÖ Hist√≥rico da moeda: ${coinComparative.reason}`);
        } else {
            detailedAnalysis.push(`‚ùå Hist√≥rico da moeda: ${coinComparative.reason}`);
        }

        // 4. ‚úÖ TOP 100 alinhado (FLEXIBILIZADO - mais permissivo)
        let condition4 = false;
        if (
            (marketDirection.top100.trend === 'BULLISH' && signalDirection === 'LONG') ||
            (marketDirection.top100.trend === 'BEARISH' && signalDirection === 'SHORT') ||
            (marketDirection.top100.trend === 'SIDEWAYS') ||
            // FLEXIBILIZADO: Se TOP 100 est√° entre 45-55%, considerar neutro
            (marketDirection.top100.percentageUp >= 45 && marketDirection.top100.percentageUp <= 55)
        ) {
            favorableConditions++;
            condition4 = true;
            detailedAnalysis.push(`‚úÖ TOP 100: ${marketDirection.top100.percentageUp}% (${marketDirection.top100.trend})`);
        } else {
            detailedAnalysis.push(`‚ùå TOP 100: ${marketDirection.top100.percentageUp}% (${marketDirection.top100.trend})`);
        }

        // DECIS√ÉO FINAL - Crit√©rios flexibilizados
        let shouldExecute;
        let requiredConditions;
        
        if (isStrongSignal) {
            // Para sinais FORTE: apenas 2 condi√ß√µes necess√°rias
            requiredConditions = 2;
            shouldExecute = favorableConditions >= 2;
        } else {
            // Para sinais normais: 3 condi√ß√µes necess√°rias (antes era 3, mantido)
            requiredConditions = 3;
            shouldExecute = favorableConditions >= 3;
        }

        let reason = '';
        if (shouldExecute) {
            reason = `APROVADO: ${favorableConditions}/${totalConditions} crit√©rios atendidos (m√≠n: ${requiredConditions})`;
            if (isStrongSignal) reason += ' - SINAL FORTE';
        } else {
            reason = `REJEITADO: Apenas ${favorableConditions}/${totalConditions} crit√©rios (m√≠n: ${requiredConditions})`;
            if (isStrongSignal) reason += ' - mesmo sendo SINAL FORTE';
        }

        console.log('üîç AN√ÅLISE DETALHADA DOS NOVOS CRIT√âRIOS:');
        detailedAnalysis.forEach(analysis => console.log(`   ${analysis}`));
        console.log(`üìä RESULTADO: ${reason}`);

        return {
            shouldExecute: shouldExecute,
            analysis: reason,
            confidence: marketDirection.confidence,
            isStrongSignal: isStrongSignal,
            reason: reason,
            newCriteria: {
                condition1_market_direction: condition1,
                condition2_rsi15: condition2,
                condition3_coin_history: condition3,
                condition4_top100_flexible: condition4,
                favorableConditions: favorableConditions,
                totalConditions: totalConditions,
                requiredConditions: requiredConditions,
                detailedAnalysis: detailedAnalysis
            }
        };
    }

    /**
     * üìä NOVO: Obter RSI_15 para um ticker espec√≠fico
     */
    async getRSI15ForTicker(ticker) {
        try {
            // Usar o RSI monitor existente para obter dados espec√≠ficos do ticker
            const rsiData = await this.rsiMonitor.getRSIForTicker(ticker, 15);
            return rsiData?.rsi || null;
        } catch (error) {
            console.warn(`‚ö†Ô∏è Erro ao obter RSI_15 para ${ticker}:`, error.message);
            return null;
        }
    }

    /**
     * üìà NOVO: Analisar hist√≥rico de sinais da moeda espec√≠fica
     */
    async analyzeCoinSignalHistory(ticker, signalDirection) {
        try {
            // Buscar √∫ltimos 10 sinais desta moeda espec√≠fica
            const result = await this.pool.query(`
                SELECT signal_type, ai_decision, received_at
                FROM signal_conditions_tracking 
                WHERE ticker = $1 
                ORDER BY received_at DESC 
                LIMIT 10
            `, [ticker]);

            if (result.rows.length === 0) {
                return {
                    favorable: true,
                    reason: 'Primeira an√°lise da moeda (sem hist√≥rico)'
                };
            }

            const signals = result.rows;
            const totalSignals = signals.length;
            
            // Analisar sinais da mesma dire√ß√£o
            const sameDirectionSignals = signals.filter(s => 
                this.getSignalDirection(s.signal_type) === signalDirection
            );
            
            const approvedSameDirection = sameDirectionSignals.filter(s => s.ai_decision).length;
            const rejectedSameDirection = sameDirectionSignals.length - approvedSameDirection;
            
            // Analisar sinais da dire√ß√£o oposta
            const oppositeDirection = signalDirection === 'LONG' ? 'SHORT' : 'LONG';
            const oppositeSignals = signals.filter(s => 
                this.getSignalDirection(s.signal_type) === oppositeDirection
            );
            
            const recentOppositeApproved = oppositeSignals
                .filter(s => s.ai_decision)
                .filter(s => {
                    const signalTime = new Date(s.received_at);
                    const now = new Date();
                    const hoursDiff = (now - signalTime) / (1000 * 60 * 60);
                    return hoursDiff <= 4; // √öltimas 4 horas
                }).length;

            // L√ìGICA DE DECIS√ÉO
            if (recentOppositeApproved >= 2) {
                return {
                    favorable: false,
                    reason: `${recentOppositeApproved} sinais ${oppositeDirection} aprovados nas √∫ltimas 4h`
                };
            }

            if (sameDirectionSignals.length >= 3 && rejectedSameDirection >= 2) {
                return {
                    favorable: false,
                    reason: `${rejectedSameDirection}/${sameDirectionSignals.length} sinais ${signalDirection} rejeitados recentemente`
                };
            }

            return {
                favorable: true,
                reason: `Hist√≥rico favor√°vel: ${approvedSameDirection}/${sameDirectionSignals.length} ${signalDirection} aprovados`
            };

        } catch (error) {
            console.warn(`‚ö†Ô∏è Erro ao analisar hist√≥rico de ${ticker}:`, error.message);
            return {
                favorable: true,
                reason: 'Erro na an√°lise (considerado neutro)'
            };
        }
    }

    /**
     * ‚úÖ ETAPA 3: Valida√ß√£o de Sinal (janela de 30 segundos + prioridade FORTE)
     */
    validateSignal(signalData, allowedDirection, isStrongSignal = false) {
        // Verificar janela de validade (flex√≠vel para sinais FORTE)
        const signalTime = new Date(signalData.timestamp || Date.now());
        const now = new Date();
        const timeDifference = (now - signalTime) / 1000; // segundos

        // Sinais FORTE t√™m janela estendida de 60 segundos
        const maxAge = isStrongSignal ? 60 : 30;
        
        if (timeDifference > maxAge) {
            return {
                valid: false,
                reason: `Sinal expirado (${timeDifference.toFixed(1)}s > ${maxAge}s)${isStrongSignal ? ' - FORTE' : ''}`
            };
        }

        // Filtrar por dire√ß√£o permitida (Fear & Greed) - mais flex√≠vel para FORTE
        const signalDirection = this.getSignalDirection(signalData.signal);
        
        // Para sinais FORTE, permitir mesmo com prefer√™ncia contr√°ria
        if (!isStrongSignal) {
            if (allowedDirection === 'SOMENTE_LONG' && signalDirection === 'SHORT') {
                return {
                    valid: false,
                    reason: 'Sinal SHORT bloqueado (mercado apenas LONG)'
                };
            }
            
            if (allowedDirection === 'SOMENTE_SHORT' && signalDirection === 'LONG') {
                return {
                    valid: false,
                    reason: 'Sinal LONG bloqueado (mercado apenas SHORT)'
                };
            }
        } else {
            // Para sinais FORTE, apenas bloquear se totalmente contr√°rio
            if (allowedDirection === 'SOMENTE_LONG' && signalDirection === 'SHORT') {
                console.log('‚≠ê SINAL FORTE: Verificando se deve override dire√ß√£o...');
                // Ainda bloquear, mas com aviso especial
                return {
                    valid: false,
                    reason: 'Sinal SHORT FORTE bloqueado (mercado apenas LONG)'
                };
            }
            
            if (allowedDirection === 'SOMENTE_SHORT' && signalDirection === 'LONG') {
                console.log('‚≠ê SINAL FORTE: Verificando se deve override dire√ß√£o...');
                return {
                    valid: false,
                    reason: 'Sinal LONG FORTE bloqueado (mercado apenas SHORT)'
                };
            }
        }

        return {
            valid: true,
            reason: `Sinal v√°lido e dentro da dire√ß√£o permitida${isStrongSignal ? ' - PRIORIDADE FORTE' : ''}`
        };
    }

    getSignalDirection(signal) {
        const longSignals = ['SINAL_LONG', 'SINAL_LONG_FORTE'];
        const shortSignals = ['SINAL_SHORT', 'SINAL_SHORT_FORTE'];
        
        if (longSignals.includes(signal)) return 'LONG';
        if (shortSignals.includes(signal)) return 'SHORT';
        return 'UNKNOWN';
    }

    /**
     * ‚ö° ETAPA 6: Executar para usu√°rios (coordenado pela IA)
     */
    async executeForAllUsers(signalData, aiDecision) {
        try {
            // Buscar usu√°rios ativos
            const activeUsers = await this.getActiveUsers();
            console.log(`üë• ${activeUsers.length} usu√°rios para execu√ß√£o coordenada pela IA`);

            if (activeUsers.length === 0) {
                return { executions: [], message: 'Nenhum usu√°rio ativo encontrado' };
            }

            const executions = [];

            for (const user of activeUsers) {
                try {
                    const userExecution = await this.executeForUser(user, signalData, aiDecision);
                    executions.push(userExecution);
                } catch (error) {
                    console.error(`‚ùå Erro ao executar para usu√°rio ${user.id}:`, error.message);
                    executions.push({
                        userId: user.id,
                        success: false,
                        error: error.message
                    });
                }
            }

            const successCount = executions.filter(e => e.success).length;
            console.log(`‚úÖ ${successCount}/${executions.length} execu√ß√µes bem-sucedidas`);

            return {
                executions,
                summary: {
                    total: executions.length,
                    successful: successCount,
                    failed: executions.length - successCount
                }
            };

        } catch (error) {
            console.error('‚ùå Erro na execu√ß√£o coordenada:', error.message);
            return { error: error.message, executions: [] };
        }
    }

    /**
     * üë• BUSCAR USU√ÅRIOS ATIVOS COM VALIDA√á√ÉO COMPLETA
     */
    async getActiveUsers() {
        try {
            const result = await this.pool.query(`
                SELECT id, email, plan_type, balance_brl, balance_usd, prepaid_balance_usd,
                       admin_credits_brl, admin_credits_usd, custom_config, exchange_config, 
                       is_active, binance_api_key_encrypted, binance_api_secret_encrypted,
                       bybit_api_key_encrypted, bybit_api_secret_encrypted
                FROM users 
                WHERE is_active = true 
                AND (
                    (binance_api_key_encrypted IS NOT NULL AND binance_api_secret_encrypted IS NOT NULL) OR
                    (bybit_api_key_encrypted IS NOT NULL AND bybit_api_secret_encrypted IS NOT NULL)
                )
                AND (balance_brl > 0 OR balance_usd > 0 OR prepaid_balance_usd > 0 OR 
                     admin_credits_brl > 0 OR admin_credits_usd > 0)
                ORDER BY 
                    CASE 
                        WHEN plan_type = 'VIP' THEN 1
                        WHEN plan_type = 'PREMIUM' THEN 2
                        WHEN plan_type = 'BASIC' THEN 3
                        ELSE 4
                    END,
                    id ASC
            `);

            console.log(`üîç ${result.rows.length} usu√°rios encontrados com chaves e saldos`);
            return result.rows || [];

        } catch (error) {
            console.error('‚ùå Erro ao buscar usu√°rios:', error.message);
            return [];
        }
    }

    /**
     * üë§ EXECUTAR PARA USU√ÅRIO ESPEC√çFICO COM VALIDA√á√ÉO COMPLETA
     */
    async executeForUser(user, signalData, aiDecision) {
        try {
            console.log(`üîç Validando usu√°rio ${user.id} (${user.email})...`);

            // VALIDA√á√ÉO COMPLETA DO USU√ÅRIO (chaves, saldos, limites)
            const userValidation = await this.keyValidator.validateUserForTrading(user.id, signalData);
            if (!userValidation.success) {
                console.log(`‚ùå Usu√°rio ${user.id} rejeitado: ${userValidation.reason}`);
                return {
                    userId: user.id,
                    success: false,
                    reason: userValidation.reason,
                    error: userValidation.error
                };
            }

            console.log(`‚úÖ Usu√°rio ${user.id} validado - Exchange: ${userValidation.exchange}`);
            console.log(`üí∞ Saldo dispon√≠vel: ${userValidation.balances.currency} ${userValidation.balances.availableAmount.toFixed(2)}`);

            // Usar OrderManager para criar ordem com TP/SL obrigat√≥rios
            const orderResult = await this.orderManager.createOrder({
                userId: user.id,
                ticker: signalData.ticker,
                signal: signalData.signal,
                userConfig: userValidation.tradingConfig,
                exchangeConfig: {
                    exchange: userValidation.exchange,
                    balances: userValidation.balances
                },
                isStrongSignal: aiDecision.isStrongSignal
            });

            if (!orderResult.success) {
                return {
                    userId: user.id,
                    success: false,
                    reason: orderResult.reason
                };
            }

            // Registrar execu√ß√£o no hist√≥rico
            await this.signalHistory.recordSignalExecution(
                signalData.ticker,
                signalData.signal,
                user.id,
                orderResult.orderId
            );

            // Bloquear ticker temporariamente para evitar over-trading
            await this.blockTickerForUser(user.id, signalData.ticker);

            return {
                userId: user.id,
                email: user.email,
                planType: user.plan_type,
                success: true,
                orderId: orderResult.orderId,
                exchange: userValidation.exchange,
                details: orderResult.details,
                balanceUsed: userValidation.balances.currency,
                amountUsed: orderResult.details?.amount || 0
            };

        } catch (error) {
            console.error(`‚ùå Erro na execu√ß√£o para usu√°rio ${user.id}:`, error.message);
            return {
                userId: user.id,
                success: false,
                error: error.message
            };
        }
    }

    /**
     * ‚úÖ VALIDAR USU√ÅRIO PARA EXECU√á√ÉO
     */
    async validateUserForExecution(user, signalData) {
        try {
            // Verificar saldo m√≠nimo
            const minBalanceBRL = parseFloat(process.env.MIN_BALANCE_BRAZIL_BRL) || 100;
            const minBalanceUSD = parseFloat(process.env.MIN_BALANCE_FOREIGN_USD) || 20;
            
            if (user.balance_brl < minBalanceBRL && user.balance_usd < minBalanceUSD) {
                return {
                    valid: false,
                    reason: 'Saldo insuficiente para trading'
                };
            }

            // Verificar m√°ximo de posi√ß√µes ativas
            const maxPositions = parseInt(process.env.MAX_POSITIONS_PER_USER) || 2;
            const activePositions = await this.pool.query(`
                SELECT COUNT(*) as count 
                FROM active_positions 
                WHERE user_id = $1 AND status = 'ACTIVE'
            `, [user.id]);

            if (parseInt(activePositions.rows[0].count) >= maxPositions) {
                return {
                    valid: false,
                    reason: `M√°ximo de ${maxPositions} posi√ß√µes ativas atingido`
                };
            }

            // Verificar bloqueio de ticker
            const tickerBlockHours = parseInt(process.env.TICKER_BLOCK_HOURS) || 2;
            const blockedTicker = await this.pool.query(`
                SELECT id FROM ticker_blocks 
                WHERE user_id = $1 AND ticker = $2 
                AND expires_at > NOW()
            `, [user.id, signalData.ticker]);

            if (blockedTicker.rows.length > 0) {
                return {
                    valid: false,
                    reason: `Ticker ${signalData.ticker} bloqueado temporariamente`
                };
            }

            return { valid: true };

        } catch (error) {
            console.error('‚ùå Erro na valida√ß√£o do usu√°rio:', error.message);
            return {
                valid: false,
                reason: 'Erro na valida√ß√£o'
            };
        }
    }

    /**
     * ‚úÖ BLOQUEAR TICKER TEMPORARIAMENTE
     */
    async blockTickerForUser(userId, ticker) {
        try {
            const tickerBlockHours = parseInt(process.env.TICKER_BLOCK_HOURS) || 2;
            await this.pool.query(`
                INSERT INTO ticker_blocks (user_id, ticker, expires_at) 
                VALUES ($1, $2, NOW() + INTERVAL '${tickerBlockHours} hours')
                ON CONFLICT (user_id, ticker) 
                DO UPDATE SET expires_at = NOW() + INTERVAL '${tickerBlockHours} hours'
            `, [userId, ticker]);
            
            console.log(`üîí Ticker ${ticker} bloqueado para usu√°rio ${userId} por ${tickerBlockHours}h`);
        } catch (error) {
            console.error('‚ùå Erro ao bloquear ticker:', error.message);
        }
    }
}

module.exports = MultiUserSignalProcessor;
