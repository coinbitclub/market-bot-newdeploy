#!/usr/bin/env node
/**
 * üåê ATIVA√á√ÉO MODO PRODU√á√ÉO REAL - MAINNET
 * ========================================
 * 
 * Remove testnet e ativa modo de produ√ß√£o real
 * Trading real com chaves mainnet
 */

console.log('üåê ATIVANDO MODO PRODU√á√ÉO REAL - MAINNET');
console.log('=======================================');

const fs = require('fs');
const path = require('path');

class ProductionRealModeActivator {
    constructor() {
        this.appPath = path.join(__dirname, 'app.js');
        this.changes = [];
    }

    // Remover configura√ß√µes de testnet e ativar produ√ß√£o real
    activateRealProductionMode() {
        console.log('\nüîß ATIVANDO MODO PRODU√á√ÉO REAL...');
        
        try {
            let appContent = fs.readFileSync(this.appPath, 'utf8');
            
            // Remover qualquer refer√™ncia a testnet for√ßado
            const testnetPatterns = [
                /process\.env\.FORCE_TESTNET_MODE\s*=\s*['"`]true['"`];?/g,
                /process\.env\.USE_TESTNET_ONLY\s*=\s*['"`]true['"`];?/g,
                /process\.env\.BYBIT_FORCE_TESTNET\s*=\s*['"`]true['"`];?/g,
                /process\.env\.BINANCE_FORCE_TESTNET\s*=\s*['"`]true['"`];?/g,
                /process\.env\.DISABLE_MAINNET_ACCESS\s*=\s*['"`]true['"`];?/g
            ];

            testnetPatterns.forEach(pattern => {
                if (pattern.test(appContent)) {
                    appContent = appContent.replace(pattern, '');
                    console.log('‚úÖ Configura√ß√£o testnet removida');
                }
            });

            // Substituir configura√ß√£o h√≠brida por produ√ß√£o real
            const hybridConfig = /\/\/ üéØ CONFIGURA√á√ÉO H√çBRIDA INTELIGENTE[\s\S]*?console\.log\('‚úÖ Auto-detec√ß√£o de ambiente'\);/;
            
            const realProductionConfig = `
// üåê CONFIGURA√á√ÉO PRODU√á√ÉO REAL - MAINNET ATIVADO
// ===============================================
process.env.PRODUCTION_MODE = 'true';
process.env.ENABLE_REAL_TRADING = 'true';
process.env.USE_MAINNET = 'true';
process.env.USE_DATABASE_KEYS = 'true';
process.env.FORCE_MAINNET_MODE = 'true';

console.log('üåê MODO PRODU√á√ÉO REAL ATIVADO');
console.log('=============================');
console.log('‚úÖ Trading real habilitado');
console.log('‚úÖ Mainnet ativo');
console.log('‚úÖ Chaves reais do banco');
console.log('üöÄ SISTEMA EM PRODU√á√ÉO REAL');`;

            if (hybridConfig.test(appContent)) {
                appContent = appContent.replace(hybridConfig, realProductionConfig);
                console.log('‚úÖ Configura√ß√£o alterada para PRODU√á√ÉO REAL');
                this.changes.push('Modo h√≠brido ‚Üí Produ√ß√£o real');
            }

            // Alterar mensagens de inicializa√ß√£o
            appContent = appContent.replace(
                /console\.log\('üöÄ INICIANDO COINBITCLUB MARKET BOT - MODO H√çBRIDO TESTNET'\);/g,
                "console.log('üöÄ INICIANDO COINBITCLUB MARKET BOT - MODO PRODU√á√ÉO REAL');"
            );

            appContent = appContent.replace(
                /console\.log\('‚úÖ Modo h√≠brido testnet configurado'\);/g,
                "console.log('‚úÖ Modo produ√ß√£o real configurado');"
            );

            appContent = appContent.replace(
                /üß™ Modo: TESTNET/g,
                'üåê Modo: PRODU√á√ÉO REAL (MAINNET)'
            );

            // Salvar altera√ß√µes
            fs.writeFileSync(this.appPath, appContent);
            console.log('‚úÖ app.js atualizado para PRODU√á√ÉO REAL');
            this.changes.push('Mensagens alteradas para produ√ß√£o real');

        } catch (error) {
            console.error('‚ùå Erro ao ativar modo real:', error.message);
        }
    }

    // Verificar se as mudan√ßas foram aplicadas
    verifyChanges() {
        console.log('\nüîç VERIFICANDO CONFIGURA√á√ÉO...');
        
        try {
            const appContent = fs.readFileSync(this.appPath, 'utf8');
            
            const checks = [
                { name: 'PRODUCTION_MODE', pattern: /PRODUCTION_MODE.*=.*'true'/, found: false },
                { name: 'ENABLE_REAL_TRADING', pattern: /ENABLE_REAL_TRADING.*=.*'true'/, found: false },
                { name: 'USE_MAINNET', pattern: /USE_MAINNET.*=.*'true'/, found: false },
                { name: 'FORCE_MAINNET_MODE', pattern: /FORCE_MAINNET_MODE.*=.*'true'/, found: false }
            ];

            checks.forEach(check => {
                check.found = check.pattern.test(appContent);
                const status = check.found ? '‚úÖ' : '‚ùå';
                console.log(`${status} ${check.name}: ${check.found ? 'ATIVADO' : 'N√ÉO ENCONTRADO'}`);
            });

            const allActive = checks.every(check => check.found);
            
            if (allActive) {
                console.log('\nüéâ MODO PRODU√á√ÉO REAL 100% ATIVADO!');
            } else {
                console.log('\n‚ö†Ô∏è Algumas configura√ß√µes podem n√£o ter sido aplicadas');
            }

        } catch (error) {
            console.error('‚ùå Erro na verifica√ß√£o:', error.message);
        }
    }

    // Criar endpoint para verificar modo
    createModeCheckEndpoint() {
        console.log('\nüîß ADICIONANDO ENDPOINT DE VERIFICA√á√ÉO...');
        
        try {
            let appContent = fs.readFileSync(this.appPath, 'utf8');
            
            const modeCheckEndpoint = `
        // Endpoint para verificar modo de produ√ß√£o
        this.app.get('/api/production-mode', (req, res) => {
            res.status(200).json({
                mode: 'PRODUCTION_REAL',
                mainnet_active: true,
                real_trading: true,
                testnet_forced: false,
                environment: 'mainnet',
                timestamp: new Date().toISOString(),
                message: 'Sistema em modo de produ√ß√£o real - Trading com chaves mainnet'
            });
        });`;

            // Procurar onde adicionar o endpoint
            const apiRoutesPattern = /this\.app\.get\('\/api\/system\/status'/;
            
            if (apiRoutesPattern.test(appContent)) {
                appContent = appContent.replace(
                    apiRoutesPattern,
                    modeCheckEndpoint + '\n\n        this.app.get(\'/api/system/status\''
                );
                fs.writeFileSync(this.appPath, appContent);
                console.log('‚úÖ Endpoint /api/production-mode adicionado');
                this.changes.push('Endpoint de verifica√ß√£o adicionado');
            }

        } catch (error) {
            console.error('‚ùå Erro ao adicionar endpoint:', error.message);
        }
    }

    // Executar ativa√ß√£o completa
    async runProductionActivation() {
        console.log('üåê INICIANDO ATIVA√á√ÉO PRODU√á√ÉO REAL...\n');
        
        this.activateRealProductionMode();
        this.createModeCheckEndpoint();
        this.verifyChanges();
        
        console.log('\nüìä MUDAN√áAS APLICADAS:');
        this.changes.forEach((change, i) => {
            console.log(`${i + 1}. ‚úÖ ${change}`);
        });
        
        console.log('\nüéØ PR√ìXIMOS PASSOS:');
        console.log('==================');
        console.log('1. Fazer push das mudan√ßas');
        console.log('2. Aguardar deploy do Railway');
        console.log('3. Verificar em /api/production-mode');
        console.log('4. Sistema rodar√° em PRODU√á√ÉO REAL');
        
        console.log('\nüåê TRADING REAL ATIVADO!');
        console.log('========================');
        console.log('‚úÖ Mainnet habilitado');
        console.log('‚úÖ Chaves reais ativas');
        console.log('‚úÖ Trading de produ√ß√£o');
        console.log('‚ùå Testnet desabilitado');
    }
}

// Executar ativa√ß√£o
if (require.main === module) {
    const activator = new ProductionRealModeActivator();
    activator.runProductionActivation().then(() => {
        console.log('\nüéâ MODO PRODU√á√ÉO REAL ATIVADO COM SUCESSO!');
        process.exit(0);
    }).catch(error => {
        console.error('‚ùå Erro na ativa√ß√£o:', error.message);
        process.exit(1);
    });
}

module.exports = ProductionRealModeActivator;
