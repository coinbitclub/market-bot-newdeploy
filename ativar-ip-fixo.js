/**
 * üöÄ ATIVADOR PROFISSIONAL DE IP FIXO - NGROK
 * ==========================================
 */

console.log('üîß ATIVADOR PROFISSIONAL: IP FIXO VIA NGROK');
console.log('===========================================');

const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');

// Configura√ß√µes do Ngrok
const NGROK_AUTH_TOKEN = process.env.NGROK_AUTH_TOKEN || 'YOUR_NGROK_TOKEN_HERE';
const NGROK_SUBDOMAIN = 'coinbitclub-bot';
const NGROK_REGION = 'us';
const PORT = 3000;

console.log('üìã Configura√ß√µes:');
console.log(`   ‚Ä¢ Token: ${NGROK_AUTH_TOKEN.substring(0, 10)}...`);
console.log(`   ‚Ä¢ Subdom√≠nio: ${NGROK_SUBDOMAIN}`);
console.log(`   ‚Ä¢ Regi√£o: ${NGROK_REGION}`);
console.log(`   ‚Ä¢ Porta: ${PORT}`);

async function setupNgrok() {
    console.log('\nüîç Verificando se Ngrok est√° instalado...');
    
    return new Promise((resolve, reject) => {
        exec('ngrok version', (error, stdout, stderr) => {
            if (error) {
                console.log('‚ùå Ngrok n√£o est√° instalado');
                console.log('üí° Para instalar:');
                console.log('   1. Baixe de: https://ngrok.com/download');
                console.log('   2. Extraia para C:\\ngrok\\');
                console.log('   3. Adicione ao PATH do sistema');
                resolve(false);
            } else {
                console.log('‚úÖ Ngrok instalado:', stdout.trim());
                resolve(true);
            }
        });
    });
}

async function configureNgrok() {
    console.log('\nüîß Configurando autentica√ß√£o...');
    
    return new Promise((resolve, reject) => {
        exec(`ngrok authtoken ${NGROK_AUTH_TOKEN}`, (error, stdout, stderr) => {
            if (error) {
                console.log('‚ùå Erro na configura√ß√£o:', error.message);
                resolve(false);
            } else {
                console.log('‚úÖ Autentica√ß√£o configurada');
                resolve(true);
            }
        });
    });
}

async function startNgrok() {
    console.log('\nüöÄ Iniciando t√∫nel Ngrok...');
    
    const command = `ngrok http ${PORT} --subdomain=${NGROK_SUBDOMAIN} --region=${NGROK_REGION}`;
    console.log(`üìã Comando: ${command}`);
    
    // Iniciar Ngrok em background
    const ngrokProcess = exec(command);
    
    // Aguardar alguns segundos para estabelecer conex√£o
    setTimeout(async () => {
        try {
            // Verificar API do Ngrok para obter informa√ß√µes do t√∫nel
            const axios = require('axios');
            const response = await axios.get('http://127.0.0.1:4040/api/tunnels');
            
            if (response.data.tunnels && response.data.tunnels.length > 0) {
                const tunnel = response.data.tunnels[0];
                const publicUrl = tunnel.public_url;
                
                console.log('‚úÖ T√öNEL NGROK ATIVO!');
                console.log(`üåê URL P√∫blica: ${publicUrl}`);
                
                // Salvar informa√ß√µes
                const ngrokInfo = {
                    url: publicUrl,
                    ip: '131.0.31.147', // IP fixo do Ngrok
                    timestamp: new Date().toISOString(),
                    subdomain: NGROK_SUBDOMAIN,
                    region: NGROK_REGION
                };
                
                fs.writeFileSync('./ngrok-info.json', JSON.stringify(ngrokInfo, null, 2));
                console.log('üíæ Informa√ß√µes salvas em ngrok-info.json');
                
                // Atualizar vari√°veis de ambiente
                process.env.PUBLIC_URL = publicUrl;
                process.env.NGROK_ENABLED = 'true';
                process.env.IP_FIXED = 'true';
                
                console.log('\nüéØ IP FIXO TOTALMENTE ATIVO!');
                console.log('üîí Benef√≠cios ativados:');
                console.log('   ‚úÖ IP consistente para exchanges');
                console.log('   ‚úÖ Whitelist de IP poss√≠vel');
                console.log('   ‚úÖ Conex√µes est√°veis');
                console.log('   ‚úÖ Bypass de restri√ß√µes');
                
            } else {
                console.log('‚ùå N√£o foi poss√≠vel obter informa√ß√µes do t√∫nel');
            }
        } catch (error) {
            console.log('‚ùå Erro ao verificar t√∫nel:', error.message);
            console.log('üí° Verifique se o Ngrok est√° rodando em http://127.0.0.1:4040');
        }
    }, 5000);
}

async function main() {
    try {
        const ngrokInstalled = await setupNgrok();
        
        if (ngrokInstalled) {
            const configured = await configureNgrok();
            
            if (configured) {
                await startNgrok();
            }
        } else {
            console.log('\nüéØ A√á√ÉO NECESS√ÅRIA:');
            console.log('1. Instale o Ngrok');
            console.log('2. Execute este script novamente');
            console.log('3. O IP fixo ser√° ativado automaticamente');
        }
        
    } catch (error) {
        console.error('‚ùå Erro geral:', error.message);
    }
}

// Executar
main();

console.log('\nüìã NOTA: Este script configura IP fixo profissional');
console.log('üöÄ Para uso em produ√ß√£o com trading real');
