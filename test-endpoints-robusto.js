#!/usr/bin/env node

/**
 * üîç TESTADOR DE ENDPOINTS - COINBITCLUB ENTERPRISE
 * =================================================
 * 
 * Testa todos os 87+ endpoints e garante que retornem 200
 */

const axios = require('axios').default;
const fs = require('fs');
const path = require('path');

console.log('üîç TESTADOR DE ENDPOINTS - COINBITCLUB ENTERPRISE');
console.log('=================================================');
console.log('');

// Configura√ß√£o
const BASE_URL = process.env.BASE_URL || 'http://localhost:3000';
const TIMEOUT = 10000; // 10 segundos

// Contador de resultados
let stats = {
    total: 0,
    success: 0,
    errors: 0,
    skipped: 0
};

// Fun√ß√£o para fazer requisi√ß√£o segura
async function safeRequest(method, endpoint, data = null) {
    try {
        const config = {
            method: method.toLowerCase(),
            url: `${BASE_URL}${endpoint}`,
            timeout: TIMEOUT,
            validateStatus: () => true // Aceita qualquer status
        };
        
        if (data && (method.toLowerCase() === 'post' || method.toLowerCase() === 'put')) {
            config.data = data;
            config.headers = { 'Content-Type': 'application/json' };
        }
        
        const response = await axios(config);
        return {
            success: true,
            status: response.status,
            data: response.data,
            endpoint: endpoint,
            method: method
        };
    } catch (error) {
        return {
            success: false,
            error: error.message,
            endpoint: endpoint,
            method: method,
            status: error.response ? error.response.status : 'TIMEOUT'
        };
    }
}

// Lista completa dos 87+ endpoints
const ENDPOINTS = [
    // Endpoints b√°sicos
    { method: 'GET', path: '/', description: 'Home' },
    { method: 'GET', path: '/health', description: 'Health Check' },
    { method: 'GET', path: '/status', description: 'Status' },
    
    // Dashboard
    { method: 'GET', path: '/dashboard', description: 'Dashboard Principal' },
    { method: 'GET', path: '/dashboard/stats', description: 'Estat√≠sticas Dashboard' },
    { method: 'GET', path: '/dashboard/recent-signals', description: 'Sinais Recentes' },
    { method: 'GET', path: '/dashboard/performance', description: 'Performance Dashboard' },
    { method: 'GET', path: '/dashboard/alerts', description: 'Alertas Dashboard' },
    
    // APIs de Sinais
    { method: 'POST', path: '/api/signal', description: 'Receber Sinal', data: { symbol: 'BTCUSDT', action: 'BUY' } },
    { method: 'GET', path: '/api/signals', description: 'Listar Sinais' },
    { method: 'GET', path: '/api/signals/recent', description: 'Sinais Recentes' },
    { method: 'GET', path: '/api/signals/history', description: 'Hist√≥rico de Sinais' },
    { method: 'GET', path: '/api/signals/statistics', description: 'Estat√≠sticas de Sinais' },
    
    // APIs de Trading
    { method: 'GET', path: '/api/trading/status', description: 'Status Trading' },
    { method: 'GET', path: '/api/trading/positions', description: 'Posi√ß√µes Ativas' },
    { method: 'GET', path: '/api/trading/orders', description: 'Ordens' },
    { method: 'GET', path: '/api/trading/balance', description: 'Saldo' },
    { method: 'GET', path: '/api/trading/performance', description: 'Performance Trading' },
    { method: 'POST', path: '/api/trading/start', description: 'Iniciar Trading' },
    { method: 'POST', path: '/api/trading/stop', description: 'Parar Trading' },
    { method: 'POST', path: '/api/trading/emergency-stop', description: 'Parada de Emerg√™ncia' },
    
    // APIs de Configura√ß√£o
    { method: 'GET', path: '/api/config', description: 'Configura√ß√µes' },
    { method: 'POST', path: '/api/config', description: 'Salvar Configura√ß√µes', data: { symbol: 'BTCUSDT' } },
    { method: 'GET', path: '/api/config/trading', description: 'Config Trading' },
    { method: 'GET', path: '/api/config/exchanges', description: 'Config Exchanges' },
    { method: 'GET', path: '/api/config/users', description: 'Config Usu√°rios' },
    
    // APIs de Usu√°rios
    { method: 'GET', path: '/api/users', description: 'Listar Usu√°rios' },
    { method: 'POST', path: '/api/users', description: 'Criar Usu√°rio', data: { name: 'Test User' } },
    { method: 'GET', path: '/api/users/active', description: 'Usu√°rios Ativos' },
    { method: 'GET', path: '/api/users/statistics', description: 'Estat√≠sticas Usu√°rios' },
    
    // APIs de Monitoramento
    { method: 'GET', path: '/api/monitoring/system', description: 'Monitor Sistema' },
    { method: 'GET', path: '/api/monitoring/connections', description: 'Monitor Conex√µes' },
    { method: 'GET', path: '/api/monitoring/alerts', description: 'Monitor Alertas' },
    { method: 'GET', path: '/api/monitoring/logs', description: 'Monitor Logs' },
    { method: 'GET', path: '/api/monitoring/metrics', description: 'M√©tricas Sistema' },
    
    // APIs de Exchanges
    { method: 'GET', path: '/api/exchanges/binance/status', description: 'Status Binance' },
    { method: 'GET', path: '/api/exchanges/bybit/status', description: 'Status Bybit' },
    { method: 'GET', path: '/api/exchanges/binance/balance', description: 'Saldo Binance' },
    { method: 'GET', path: '/api/exchanges/bybit/balance', description: 'Saldo Bybit' },
    { method: 'GET', path: '/api/exchanges/binance/positions', description: 'Posi√ß√µes Binance' },
    { method: 'GET', path: '/api/exchanges/bybit/positions', description: 'Posi√ß√µes Bybit' },
    
    // APIs de Relat√≥rios
    { method: 'GET', path: '/api/reports/daily', description: 'Relat√≥rio Di√°rio' },
    { method: 'GET', path: '/api/reports/weekly', description: 'Relat√≥rio Semanal' },
    { method: 'GET', path: '/api/reports/monthly', description: 'Relat√≥rio Mensal' },
    { method: 'GET', path: '/api/reports/performance', description: 'Relat√≥rio Performance' },
    { method: 'GET', path: '/api/reports/profit-loss', description: 'Relat√≥rio P&L' },
    
    // APIs de Backup
    { method: 'GET', path: '/api/backup/create', description: 'Criar Backup' },
    { method: 'GET', path: '/api/backup/list', description: 'Listar Backups' },
    { method: 'POST', path: '/api/backup/restore', description: 'Restaurar Backup' },
    
    // APIs de Seguran√ßa
    { method: 'GET', path: '/api/security/audit', description: 'Auditoria Seguran√ßa' },
    { method: 'GET', path: '/api/security/logs', description: 'Logs Seguran√ßa' },
    { method: 'POST', path: '/api/security/lock', description: 'Bloquear Sistema' },
    { method: 'POST', path: '/api/security/unlock', description: 'Desbloquear Sistema' },
    
    // Webhooks
    { method: 'POST', path: '/webhook/tradingview', description: 'Webhook TradingView', data: { symbol: 'BTCUSDT', action: 'BUY' } },
    { method: 'POST', path: '/webhook/binance', description: 'Webhook Binance' },
    { method: 'POST', path: '/webhook/bybit', description: 'Webhook Bybit' },
    
    // APIs Avan√ßadas
    { method: 'GET', path: '/api/advanced/arbitrage', description: 'Arbitragem' },
    { method: 'GET', path: '/api/advanced/grid-trading', description: 'Grid Trading' },
    { method: 'GET', path: '/api/advanced/dca', description: 'DCA (Dollar Cost Average)' },
    { method: 'GET', path: '/api/advanced/scalping', description: 'Scalping' },
    
    // APIs de An√°lise
    { method: 'GET', path: '/api/analysis/technical', description: 'An√°lise T√©cnica' },
    { method: 'GET', path: '/api/analysis/fundamental', description: 'An√°lise Fundamental' },
    { method: 'GET', path: '/api/analysis/sentiment', description: 'An√°lise Sentimento' },
    { method: 'GET', path: '/api/analysis/market', description: 'An√°lise Mercado' },
    
    // APIs de Portfolio
    { method: 'GET', path: '/api/portfolio/overview', description: 'Vis√£o Geral Portfolio' },
    { method: 'GET', path: '/api/portfolio/allocation', description: 'Aloca√ß√£o Portfolio' },
    { method: 'GET', path: '/api/portfolio/rebalance', description: 'Rebalanceamento' },
    { method: 'GET', path: '/api/portfolio/risk', description: 'An√°lise Risco' },
    
    // APIs de Notifica√ß√µes
    { method: 'GET', path: '/api/notifications', description: 'Listar Notifica√ß√µes' },
    { method: 'POST', path: '/api/notifications/send', description: 'Enviar Notifica√ß√£o', data: { message: 'Test' } },
    { method: 'GET', path: '/api/notifications/settings', description: 'Config Notifica√ß√µes' },
    
    // APIs de Logs
    { method: 'GET', path: '/api/logs/trading', description: 'Logs Trading' },
    { method: 'GET', path: '/api/logs/system', description: 'Logs Sistema' },
    { method: 'GET', path: '/api/logs/errors', description: 'Logs Erros' },
    { method: 'GET', path: '/api/logs/access', description: 'Logs Acesso' },
    
    // APIs de Manuten√ß√£o
    { method: 'POST', path: '/api/maintenance/start', description: 'Iniciar Manuten√ß√£o' },
    { method: 'POST', path: '/api/maintenance/stop', description: 'Parar Manuten√ß√£o' },
    { method: 'GET', path: '/api/maintenance/status', description: 'Status Manuten√ß√£o' },
    
    // APIs de Cache
    { method: 'POST', path: '/api/cache/clear', description: 'Limpar Cache' },
    { method: 'GET', path: '/api/cache/stats', description: 'Estat√≠sticas Cache' },
    
    // APIs de Database
    { method: 'GET', path: '/api/database/health', description: 'Sa√∫de Database' },
    { method: 'GET', path: '/api/database/stats', description: 'Estat√≠sticas Database' },
    
    // APIs de Desenvolvimento
    { method: 'GET', path: '/api/dev/test', description: 'Endpoint Teste' },
    { method: 'GET', path: '/api/dev/debug', description: 'Debug Info' },
    { method: 'GET', path: '/api/dev/version', description: 'Vers√£o Sistema' },
    
    // APIs Especiais
    { method: 'GET', path: '/api/special/emergency', description: 'Modo Emerg√™ncia' },
    { method: 'GET', path: '/api/special/diagnostic', description: 'Diagn√≥stico Sistema' },
    { method: 'POST', path: '/api/special/reset', description: 'Reset Sistema' }
];

// Fun√ß√£o principal de teste
async function testAllEndpoints() {
    console.log(`üéØ Testando ${ENDPOINTS.length} endpoints...`);
    console.log(`üåê Base URL: ${BASE_URL}`);
    console.log(`‚è±Ô∏è Timeout: ${TIMEOUT}ms`);
    console.log('');
    
    const results = [];
    
    // Primeiro, testar se o servidor est√° rodando
    console.log('üîç Verificando se o servidor est√° rodando...');
    const healthCheck = await safeRequest('GET', '/health');
    
    if (!healthCheck.success) {
        console.log('‚ùå SERVIDOR N√ÉO EST√Å RODANDO!');
        console.log(`üí° Erro: ${healthCheck.error}`);
        console.log('');
        console.log('üöÄ Para iniciar o servidor:');
        console.log('   1. Em um terminal: node main.js');
        console.log('   2. Ou: node startup-robusto.js');
        console.log('   3. Aguarde alguns segundos e execute este teste novamente');
        return;
    }
    
    console.log('‚úÖ Servidor est√° rodando!');
    console.log(`üìä Status: ${healthCheck.status}`);
    console.log('');
    
    // Testar todos os endpoints
    console.log('üß™ Iniciando testes dos endpoints...');
    console.log('');
    
    for (let i = 0; i < ENDPOINTS.length; i++) {
        const endpoint = ENDPOINTS[i];
        stats.total++;
        
        console.log(`[${i + 1}/${ENDPOINTS.length}] ${endpoint.method} ${endpoint.path}`);
        
        const result = await safeRequest(endpoint.method, endpoint.path, endpoint.data);
        
        if (result.success) {
            const statusIcon = result.status === 200 ? '‚úÖ' : result.status < 400 ? '‚ö†Ô∏è' : '‚ùå';
            console.log(`   ${statusIcon} Status: ${result.status} - ${endpoint.description}`);
            
            if (result.status === 200) {
                stats.success++;
            } else {
                stats.errors++;
            }
        } else {
            console.log(`   ‚ùå ERRO: ${result.error} - ${endpoint.description}`);
            stats.errors++;
        }
        
        results.push(result);
        
        // Pequena pausa para n√£o sobrecarregar
        await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    // Relat√≥rio final
    console.log('');
    console.log('üìä RELAT√ìRIO FINAL DOS TESTES');
    console.log('=============================');
    console.log(`üìà Total de endpoints testados: ${stats.total}`);
    console.log(`‚úÖ Sucessos (200): ${stats.success}`);
    console.log(`‚ùå Erros: ${stats.errors}`);
    console.log(`üìä Taxa de sucesso: ${((stats.success / stats.total) * 100).toFixed(1)}%`);
    console.log('');
    
    // Endpoints com problema
    const problemEndpoints = results.filter(r => !r.success || r.status !== 200);
    if (problemEndpoints.length > 0) {
        console.log('üö® ENDPOINTS COM PROBLEMAS:');
        console.log('===========================');
        problemEndpoints.forEach(ep => {
            console.log(`‚ùå ${ep.method} ${ep.endpoint} - ${ep.error || `Status: ${ep.status}`}`);
        });
        console.log('');
    }
    
    // Salvar relat√≥rio
    const report = {
        timestamp: new Date().toISOString(),
        baseUrl: BASE_URL,
        statistics: stats,
        results: results
    };
    
    fs.writeFileSync('./test-results.json', JSON.stringify(report, null, 2));
    console.log('üíæ Relat√≥rio salvo em: test-results.json');
    
    // Status final
    if (stats.success === stats.total) {
        console.log('');
        console.log('üéâ TODOS OS ENDPOINTS RETORNARAM 200! ');
        console.log('‚úÖ SISTEMA 100% OPERACIONAL!');
    } else {
        console.log('');
        console.log('‚ö†Ô∏è ALGUNS ENDPOINTS PRECISAM DE CORRE√á√ÉO');
        console.log('üí° Verifique os problemas listados acima');
    }
}

// Verificar se axios est√° dispon√≠vel
try {
    require.resolve('axios');
    console.log('‚úÖ Axios dispon√≠vel');
} catch (error) {
    console.log('‚ùå Axios n√£o encontrado');
    console.log('üí° Execute: npm install axios');
    process.exit(1);
}

// Executar testes
testAllEndpoints().catch(error => {
    console.error('‚ùå Erro fatal no teste:', error);
    process.exit(1);
});
