/**
 * üîß VERIFICADOR DE PRODU√á√ÉO - DASHBOARD
 * =====================================
 * 
 * Script para verificar se o dashboard est√° funcionando
 */

const https = require('https');

const urls = [
    'https://coinbitclub-market-bot.up.railway.app/status',
    'https://coinbitclub-market-bot.up.railway.app/health',
    'https://coinbitclub-market-bot.up.railway.app/',
    'https://coinbitclub-market-bot.up.railway.app/dashboard-production'
];

async function checkURL(url) {
    return new Promise((resolve) => {
        console.log(`üîç Testando: ${url}`);
        
        const req = https.get(url, (res) => {
            let data = '';
            res.on('data', (chunk) => data += chunk);
            res.on('end', () => {
                console.log(`‚úÖ Status: ${res.statusCode} - ${url}`);
                if (res.statusCode === 404) {
                    console.log(`‚ùå Rota n√£o encontrada: ${url}`);
                } else if (res.statusCode === 200) {
                    console.log(`‚úÖ OK: ${url}`);
                    if (data.includes('Dashboard') || data.includes('dashboard')) {
                        console.log(`üìä Dashboard detectado!`);
                    }
                }
                resolve({ url, status: res.statusCode, data: data.substring(0, 100) });
            });
        });
        
        req.on('error', (error) => {
            console.log(`‚ùå Erro: ${url} - ${error.message}`);
            resolve({ url, error: error.message });
        });
        
        req.setTimeout(10000, () => {
            console.log(`‚è∞ Timeout: ${url}`);
            req.destroy();
            resolve({ url, error: 'timeout' });
        });
    });
}

async function main() {
    console.log('üöÄ VERIFICANDO PRODU√á√ÉO - COINBITCLUB DASHBOARD');
    console.log('=================================================');
    console.log('');
    
    const results = [];
    
    for (const url of urls) {
        const result = await checkURL(url);
        results.push(result);
        console.log('');
        await new Promise(resolve => setTimeout(resolve, 1000)); // 1 segundo entre requests
    }
    
    console.log('üìã RESUMO:');
    console.log('==========');
    results.forEach(result => {
        if (result.error) {
            console.log(`‚ùå ${result.url} - ERRO: ${result.error}`);
        } else {
            console.log(`${result.status === 200 ? '‚úÖ' : '‚ùå'} ${result.url} - Status: ${result.status}`);
        }
    });
    
    const dashboardResult = results.find(r => r.url.includes('dashboard-production'));
    if (dashboardResult && dashboardResult.status === 200) {
        console.log('');
        console.log('üéâ DASHBOARD DE PRODU√á√ÉO EST√Å FUNCIONANDO!');
    } else if (dashboardResult && dashboardResult.status === 404) {
        console.log('');
        console.log('‚ö†Ô∏è DASHBOARD DE PRODU√á√ÉO N√ÉO ENCONTRADO');
        console.log('üîß √â necess√°rio fazer deploy das novas rotas');
    } else {
        console.log('');
        console.log('‚ùå PROBLEMA COM SERVIDOR DE PRODU√á√ÉO');
    }
}

main().catch(console.error);
