/**
 * üåê TESTE PROFISSIONAL - VERIFICA√á√ÉO DE IP FIXO
 * ==============================================
 */

console.log('üîç TESTE PROFISSIONAL: IP FIXO');
console.log('==============================');

// Carregar vari√°veis de ambiente
require('dotenv').config();

console.log('üìã Vari√°veis de ambiente relevantes:');
console.log(`   ‚Ä¢ NGROK_ENABLED: ${process.env.NGROK_ENABLED}`);
console.log(`   ‚Ä¢ IP_FIXED: ${process.env.IP_FIXED}`);
console.log(`   ‚Ä¢ NGROK_AUTH_TOKEN: ${process.env.NGROK_AUTH_TOKEN ? 'DEFINIDO' : 'N√ÉO DEFINIDO'}`);
console.log(`   ‚Ä¢ NGROK_REGION: ${process.env.NGROK_REGION}`);
console.log(`   ‚Ä¢ NGROK_SUBDOMAIN: ${process.env.NGROK_SUBDOMAIN}`);
console.log(`   ‚Ä¢ NGROK_IP_FIXO: ${process.env.NGROK_IP_FIXO}`);

console.log('\nüîß Verificando status do IP fixo...');

const isNgrokEnabled = process.env.NGROK_ENABLED === 'true';
const isIPFixed = process.env.IP_FIXED === 'true';

if (isNgrokEnabled || isIPFixed) {
    console.log('‚úÖ CONFIGURA√á√ÉO: IP FIXO ATIVADO');
    console.log('üìã Detalhes:');
    console.log(`   ‚Ä¢ Ngrok habilitado: ${isNgrokEnabled}`);
    console.log(`   ‚Ä¢ IP fixo configurado: ${isIPFixed}`);
    
    // Verificar arquivo de info do Ngrok
    const fs = require('fs');
    const path = require('path');
    const ngrokInfoPath = path.join(__dirname, 'ngrok-info.json');
    
    console.log(`\nüîç Verificando arquivo: ${ngrokInfoPath}`);
    
    if (fs.existsSync(ngrokInfoPath)) {
        try {
            const ngrokInfo = JSON.parse(fs.readFileSync(ngrokInfoPath, 'utf8'));
            console.log('‚úÖ ARQUIVO NGROK ENCONTRADO:');
            console.log(`   ‚Ä¢ URL P√∫blica: ${ngrokInfo.url}`);
            console.log(`   ‚Ä¢ IP: ${ngrokInfo.ip}`);
            console.log(`   ‚Ä¢ Timestamp: ${new Date(ngrokInfo.timestamp).toLocaleString()}`);
        } catch (error) {
            console.log('‚ùå Erro ao ler arquivo Ngrok:', error.message);
        }
    } else {
        console.log('‚ö†Ô∏è Arquivo ngrok-info.json n√£o encontrado');
        console.log('üí° Isso √© normal se o Ngrok ainda n√£o foi iniciado');
    }
    
    // Verificar se Ngrok est√° rodando
    console.log('\nüîç Verificando se Ngrok est√° ativo...');
    
    const { spawn } = require('child_process');
    const ngrokCheck = spawn('tasklist', ['/FI', 'IMAGENAME eq ngrok.exe']);
    
    let ngrokOutput = '';
    ngrokCheck.stdout.on('data', (data) => {
        ngrokOutput += data.toString();
    });
    
    ngrokCheck.on('close', (code) => {
        if (ngrokOutput.includes('ngrok.exe')) {
            console.log('‚úÖ NGROK EST√Å RODANDO!');
        } else {
            console.log('‚ùå Ngrok n√£o est√° rodando');
            console.log('üí° Para ativar: Execute ngrok http 3000 --authtoken=<token>');
        }
        
        console.log('\nüéØ RESULTADO FINAL:');
        if (isNgrokEnabled && ngrokOutput.includes('ngrok.exe')) {
            console.log('üü¢ IP FIXO: TOTALMENTE ATIVO E FUNCIONAL');
        } else if (isNgrokEnabled) {
            console.log('üü° IP FIXO: CONFIGURADO MAS NGROK N√ÉO EST√Å RODANDO');
        } else {
            console.log('üî¥ IP FIXO: N√ÉO CONFIGURADO');
        }
    });
    
} else {
    console.log('‚ùå CONFIGURA√á√ÉO: IP FIXO DESATIVADO');
    console.log('üí° Para ativar, defina:');
    console.log('   ‚Ä¢ NGROK_ENABLED=true');
    console.log('   ‚Ä¢ IP_FIXED=true');
    console.log('   ‚Ä¢ Configure o NGROK_AUTH_TOKEN');
}

console.log('\nüìã Status das exchanges com IP fixo:');
console.log('   ‚Ä¢ Binance: Requer whitelist de IP para algumas opera√ß√µes');
console.log('   ‚Ä¢ Bybit: Funciona melhor com IP consistente');
console.log('   ‚Ä¢ Benef√≠cio: Evita bloqueios por mudan√ßa de IP');

console.log('\n‚úÖ TESTE CONCLU√çDO');
