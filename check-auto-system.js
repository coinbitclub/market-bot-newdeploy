#!/usr/bin/env node

require('dotenv').config({ path: '.env.production' });
const { Pool } = require('pg');
const UserExchangeManager = require('./user-exchange-manager');

async function checkAutoSystem() {
    console.log('üîç VERIFICANDO SISTEMA AUTOM√ÅTICO...\n');
    
    const pool = new Pool({
        connectionString: process.env.DATABASE_URL,
        ssl: { rejectUnauthorized: false }
    });
    
    const userManager = new UserExchangeManager();
    
    try {
        // 1. Verificar usu√°rios com auto trading
        console.log('1Ô∏è‚É£ USU√ÅRIOS COM AUTO TRADING:');
        const autoUsers = await pool.query(`
            SELECT 
                id, 
                username, 
                exchange_auto_trading,
                exchange_testnet_mode,
                binance_api_key_encrypted IS NOT NULL as has_binance,
                bybit_api_key_encrypted IS NOT NULL as has_bybit,
                api_validation_status,
                last_api_validation
            FROM users 
            WHERE exchange_auto_trading = true
            ORDER BY id
        `);
        
        if (autoUsers.rows.length === 0) {
            console.log('‚ùå NENHUM usu√°rio com auto trading ativo');
        } else {
            autoUsers.rows.forEach(user => {
                console.log(`üîπ ${user.username} (ID: ${user.id})`);
                console.log(`   Auto Trading: ${user.exchange_auto_trading ? '‚úÖ' : '‚ùå'}`);
                console.log(`   Testnet: ${user.exchange_testnet_mode ? '‚úÖ' : '‚ùå'}`);
                console.log(`   Binance: ${user.has_binance ? '‚úÖ' : '‚ùå'} | Bybit: ${user.has_bybit ? '‚úÖ' : '‚ùå'}`);
                console.log(`   Status API: ${user.api_validation_status || 'N/A'}`);
                console.log('');
            });
        }
        
        // 2. Verificar se o UserExchangeManager est√° funcionando
        console.log('2Ô∏è‚É£ TESTANDO USER EXCHANGE MANAGER:');
        const activeUsers = await userManager.getAllUsersWithApiKeys();
        console.log(`üìä Usu√°rios encontrados pelo sistema: ${activeUsers.length}`);
        
        activeUsers.forEach(user => {
            console.log(`üîπ ${user.username} (ID: ${user.id})`);
            console.log(`   Binance: ${user.has_binance ? '‚úÖ' : '‚ùå'} | Bybit: ${user.has_bybit ? '‚úÖ' : '‚ùå'}`);
        });
        
        // 3. Verificar sinais recentes
        console.log('\n3Ô∏è‚É£ SINAIS RECENTES:');
        const recentSignals = await pool.query(`
            SELECT 
                id, 
                symbol, 
                action, 
                status, 
                processed_at,
                (SELECT COUNT(*) FROM user_trading_executions WHERE signal_id = signals.id) as executions_count
            FROM signals 
            WHERE status = 'MULTI_USER_PROCESSED'
            ORDER BY processed_at DESC 
            LIMIT 5
        `);
        
        recentSignals.rows.forEach(signal => {
            console.log(`üîπ Sinal ID: ${signal.id} | ${signal.symbol} ${signal.action}`);
            console.log(`   Status: ${signal.status} | Execu√ß√µes: ${signal.executions_count}`);
            console.log(`   Processado: ${signal.processed_at}`);
        });
        
        // 4. Verificar se h√° webhook sendo recebido
        console.log('\n4Ô∏è‚É£ WEBHOOK STATUS:');
        const webhookSignals = await pool.query(`
            SELECT COUNT(*) as total_today
            FROM signals 
            WHERE processed_at >= CURRENT_DATE
        `);
        
        console.log(`üì° Sinais recebidos hoje: ${webhookSignals.rows[0]?.total_today || 0}`);
        
        // 5. Status do sistema
        console.log('\n5Ô∏è‚É£ STATUS DO SISTEMA:');
        console.log(`üîó ENABLE_REAL_TRADING: ${process.env.ENABLE_REAL_TRADING}`);
        console.log(`üß™ TESTNET_MODE: ${process.env.TESTNET_MODE}`);
        
        console.log('\nüìã RESUMO:');
        if (activeUsers.length > 0) {
            console.log('‚úÖ Sistema EST√Å buscando usu√°rios automaticamente');
            console.log(`‚úÖ ${activeUsers.length} usu√°rios configurados para auto trading`);
            console.log('‚úÖ Pronto para processar sinais do TradingView');
        } else {
            console.log('‚ùå Sistema N√ÉO est√° encontrando usu√°rios automaticamente');
            console.log('‚ö†Ô∏è Verificar configura√ß√µes de auto trading dos usu√°rios');
        }
        
    } catch (error) {
        console.error('‚ùå Erro:', error.message);
    }
    
    process.exit(0);
}

checkAutoSystem();
