#!/usr/bin/env node
/**
 * üéØ CONFIGURA√á√ÉO CORRETA - PRODU√á√ÉO TESTNET + MANAGEMENT H√çBRIDO
 * ===============================================================
 * 
 * Produ√ß√£o: Testnet (seguro)
 * Management: H√≠brido (chaves reais quando dispon√≠veis)
 */

console.log('üéØ CONFIGURA√á√ÉO CORRETA - PRODU√á√ÉO TESTNET + MANAGEMENT H√çBRIDO');
console.log('================================================================');

const fs = require('fs');
const path = require('path');

class CorrectConfigurationManager {
    constructor() {
        this.appPath = path.join(__dirname, 'app.js');
        this.changes = [];
    }

    // Configurar produ√ß√£o para testnet e management para h√≠brido
    applyCorrectConfiguration() {
        console.log('\nüîß APLICANDO CONFIGURA√á√ÉO CORRETA...');
        
        try {
            let appContent = fs.readFileSync(this.appPath, 'utf8');
            
            // Substituir configura√ß√£o de produ√ß√£o real por testnet + h√≠brido
            const currentConfig = /\/\/ üåê CONFIGURA√á√ÉO PRODU√á√ÉO REAL - MAINNET ATIVADO[\s\S]*?console\.log\('üöÄ SISTEMA EM PRODU√á√ÉO REAL'\);/;
            
            const correctConfig = `
// üéØ CONFIGURA√á√ÉO CORRETA - PRODU√á√ÉO TESTNET + MANAGEMENT H√çBRIDO
// ===============================================================

// Detectar ambiente
const isManagementMode = process.env.RAILWAY_ENVIRONMENT_NAME === 'management' || 
                        process.env.NODE_ENV === 'management' ||
                        process.env.APP_MODE === 'management';

if (isManagementMode) {
    // MANAGEMENT: Modo H√≠brido (chaves reais quando dispon√≠veis)
    console.log('üîß MODO MANAGEMENT DETECTADO - CONFIGURA√á√ÉO H√çBRIDA');
    process.env.SMART_HYBRID_MODE = 'true';
    process.env.ENABLE_REAL_TRADING = 'true';
    process.env.USE_DATABASE_KEYS = 'true';
    process.env.AUTO_DETECT_ENVIRONMENT = 'true';
    process.env.FORCE_TESTNET_PRODUCTION = 'false';
    
    console.log('üîß MANAGEMENT: Modo H√≠brido Ativo');
    console.log('‚úÖ Chaves reais quando dispon√≠veis');
    console.log('‚úÖ Auto-detec√ß√£o de ambiente');
    console.log('‚úÖ Trading inteligente');
} else {
    // PRODU√á√ÉO: Modo Testnet (sempre seguro)
    console.log('üß™ MODO PRODU√á√ÉO DETECTADO - CONFIGURA√á√ÉO TESTNET');
    process.env.PRODUCTION_MODE = 'true';
    process.env.ENABLE_REAL_TRADING = 'false';
    process.env.USE_TESTNET = 'true';
    process.env.FORCE_TESTNET_PRODUCTION = 'true';
    process.env.USE_DATABASE_KEYS = 'false';
    
    console.log('üß™ PRODU√á√ÉO: Modo Testnet Seguro');
    console.log('‚úÖ Trading em testnet apenas');
    console.log('‚úÖ Sem risco financeiro');
    console.log('‚úÖ Ambiente de teste seguro');
}

console.log('üéØ CONFIGURA√á√ÉO CORRETA APLICADA');`;

            if (currentConfig.test(appContent)) {
                appContent = appContent.replace(currentConfig, correctConfig);
                console.log('‚úÖ Configura√ß√£o corrigida: Produ√ß√£o Testnet + Management H√≠brido');
                this.changes.push('Configura√ß√£o correta aplicada');
            }

            // Atualizar mensagens de inicializa√ß√£o
            appContent = appContent.replace(
                /console\.log\('üöÄ INICIANDO COINBITCLUB MARKET BOT - MODO PRODU√á√ÉO REAL'\);/g,
                "console.log('üöÄ INICIANDO COINBITCLUB MARKET BOT - CONFIGURA√á√ÉO CORRETA');"
            );

            // Salvar altera√ß√µes
            fs.writeFileSync(this.appPath, appContent);
            console.log('‚úÖ app.js atualizado com configura√ß√£o correta');

        } catch (error) {
            console.error('‚ùå Erro ao aplicar configura√ß√£o:', error.message);
        }
    }

    // Criar endpoint para verificar modo atual
    addModeDetectionEndpoint() {
        console.log('\nüîß ADICIONANDO ENDPOINT DE DETEC√á√ÉO...');
        
        try {
            let appContent = fs.readFileSync(this.appPath, 'utf8');
            
            const modeEndpoint = `
        // Endpoint para verificar modo atual (produ√ß√£o vs management)
        this.app.get('/api/current-mode', (req, res) => {
            const isManagement = process.env.RAILWAY_ENVIRONMENT_NAME === 'management' || 
                                process.env.NODE_ENV === 'management' ||
                                process.env.APP_MODE === 'management';
            
            res.status(200).json({
                environment: isManagement ? 'management' : 'production',
                mode: isManagement ? 'HYBRID' : 'TESTNET',
                trading_type: isManagement ? 'real_when_available' : 'testnet_only',
                real_trading: isManagement ? 'conditional' : 'disabled',
                testnet_forced: !isManagement,
                message: isManagement ? 
                    'Management: Modo h√≠brido - chaves reais quando dispon√≠veis' :
                    'Produ√ß√£o: Modo testnet - trading seguro apenas',
                timestamp: new Date().toISOString()
            });
        });`;

            // Procurar onde adicionar o endpoint
            const apiRoutesPattern = /this\.app\.get\('\/api\/system\/status'/;
            
            if (apiRoutesPattern.test(appContent)) {
                appContent = appContent.replace(
                    apiRoutesPattern,
                    modeEndpoint + '\n\n        this.app.get(\'/api/system/status\''
                );
                fs.writeFileSync(this.appPath, appContent);
                console.log('‚úÖ Endpoint /api/current-mode adicionado');
                this.changes.push('Endpoint de detec√ß√£o adicionado');
            }

        } catch (error) {
            console.error('‚ùå Erro ao adicionar endpoint:', error.message);
        }
    }

    // Verificar se as mudan√ßas foram aplicadas
    verifyConfiguration() {
        console.log('\nüîç VERIFICANDO CONFIGURA√á√ÉO...');
        
        try {
            const appContent = fs.readFileSync(this.appPath, 'utf8');
            
            const hasManagementDetection = /isManagementMode.*=/.test(appContent);
            const hasTestnetProduction = /FORCE_TESTNET_PRODUCTION.*=.*'true'/.test(appContent);
            const hasHybridManagement = /SMART_HYBRID_MODE.*=.*'true'/.test(appContent);
            
            console.log('‚úÖ Detec√ß√£o de management:', hasManagementDetection ? 'ENCONTRADA' : 'N√ÉO ENCONTRADA');
            console.log('‚úÖ Produ√ß√£o testnet:', hasTestnetProduction ? 'CONFIGURADA' : 'N√ÉO CONFIGURADA');
            console.log('‚úÖ Management h√≠brido:', hasHybridManagement ? 'CONFIGURADO' : 'N√ÉO CONFIGURADO');
            
            if (hasManagementDetection && hasTestnetProduction && hasHybridManagement) {
                console.log('\nüéâ CONFIGURA√á√ÉO CORRETA 100% APLICADA!');
                return true;
            } else {
                console.log('\n‚ö†Ô∏è Algumas configura√ß√µes podem estar incorretas');
                return false;
            }

        } catch (error) {
            console.error('‚ùå Erro na verifica√ß√£o:', error.message);
            return false;
        }
    }

    // Executar configura√ß√£o completa
    async runCorrectConfiguration() {
        console.log('üéØ INICIANDO CONFIGURA√á√ÉO CORRETA...\n');
        
        this.applyCorrectConfiguration();
        this.addModeDetectionEndpoint();
        const success = this.verifyConfiguration();
        
        console.log('\nüìä MUDAN√áAS APLICADAS:');
        this.changes.forEach((change, i) => {
            console.log(`${i + 1}. ‚úÖ ${change}`);
        });
        
        console.log('\nüéØ CONFIGURA√á√ÉO FINAL:');
        console.log('=====================');
        console.log('üß™ PRODU√á√ÉO: Testnet (trading seguro)');
        console.log('üîß MANAGEMENT: H√≠brido (chaves reais quando dispon√≠veis)');
        console.log('‚úÖ Auto-detec√ß√£o de ambiente');
        console.log('‚úÖ Sem risco em produ√ß√£o');
        
        console.log('\nüöÄ PR√ìXIMOS PASSOS:');
        console.log('==================');
        console.log('1. Fazer push das mudan√ßas');
        console.log('2. Deploy autom√°tico no Railway');
        console.log('3. Verificar em /api/current-mode');
        console.log('4. Produ√ß√£o rodar√° em testnet');
        console.log('5. Management em modo h√≠brido');
        
        return success;
    }
}

// Executar configura√ß√£o
if (require.main === module) {
    const manager = new CorrectConfigurationManager();
    manager.runCorrectConfiguration().then((success) => {
        if (success) {
            console.log('\nüéâ CONFIGURA√á√ÉO CORRETA APLICADA COM SUCESSO!');
            process.exit(0);
        } else {
            console.log('\n‚ùå Erro na configura√ß√£o');
            process.exit(1);
        }
    }).catch(error => {
        console.error('‚ùå Erro:', error.message);
        process.exit(1);
    });
}

module.exports = CorrectConfigurationManager;
