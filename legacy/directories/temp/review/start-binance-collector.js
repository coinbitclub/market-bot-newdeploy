const { BinanceTop100Collector } = require('./binance-top100-collector');

async function startContinuousCollection() {
    console.log('üîÑ INICIANDO COLETA CONT√çNUA DAS TOP 100 CRIPTOMOEDAS');
    console.log('‚è∞ Intervalo: A cada 30 minutos');
    console.log('üìä Fonte: API Binance');
    console.log('üéØ Objetivo: M√©tricas para refer√™ncia da IA');
    console.log('=' .repeat(60));

    const collector = new BinanceTop100Collector();
    
    try {
        // Iniciar coleta cont√≠nua
        await collector.start();
        
        console.log('‚úÖ Collector iniciado com sucesso!');
        console.log('üìà Pr√≥xima coleta em 30 minutos');
        console.log('üîç Use Ctrl+C para parar');
        
        // Manter processo ativo e mostrar status periodicamente
        setInterval(async () => {
            const status = await collector.getStatus();
            if (status) {
                const now = new Date().toLocaleTimeString();
                console.log(`[${now}] üìä Status: ${status.total_records} cryptos | √öltima coleta: ${status.last_collection ? new Date(status.last_collection).toLocaleTimeString() : 'N/A'}`);
            }
        }, 10 * 60 * 1000); // Status a cada 10 minutos
        
        // Tratar interrup√ß√£o
        process.on('SIGINT', async () => {
            console.log('\nüõë Parando collector...');
            await collector.stop();
            process.exit(0);
        });
        
    } catch (error) {
        console.error('‚ùå Erro ao iniciar collector:', error.message);
        process.exit(1);
    }
}

// Executar
startContinuousCollection();
