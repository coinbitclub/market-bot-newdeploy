// üîç VERIFICADOR AUTOM√ÅTICO DO SISTEMA - COINBITCLUB MARKET BOT
// ============================================================
// Script para validar se o sistema est√° funcionando corretamente
// Deve ser executado ap√≥s cada inicializa√ß√£o

console.log('üîç VERIFICADOR AUTOM√ÅTICO DO SISTEMA');
console.log('===================================');

const axios = require('axios');
const { Pool } = require('pg');
require('dotenv').config();

// Configura√ß√£o do banco
const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: { rejectUnauthorized: false }
});

class SystemValidator {
    constructor() {
        this.checks = [];
        this.passed = 0;
        this.failed = 0;
    }

    // Verificar se o servidor est√° rodando
    async checkServerHealth() {
        console.log('\nüåê VERIFICANDO SERVIDOR...');
        try {
            const response = await axios.get('http://localhost:3000/health', { timeout: 5000 });
            if (response.status === 200) {
                console.log('‚úÖ Servidor respondendo corretamente');
                console.log(`üìä Status: ${JSON.stringify(response.data)}`);
                this.passed++;
                return true;
            }
        } catch (error) {
            console.log('‚ùå Servidor n√£o est√° respondendo');
            console.log(`üîç Erro: ${error.message}`);
            this.failed++;
            return false;
        }
    }

    // Verificar conex√£o com banco de dados
    async checkDatabase() {
        console.log('\nüóÑÔ∏è VERIFICANDO BANCO DE DADOS...');
        try {
            const result = await pool.query('SELECT NOW() as current_time');
            console.log('‚úÖ Conex√£o com banco OK');
            console.log(`üìä Timestamp: ${result.rows[0].current_time}`);
            this.passed++;
            return true;
        } catch (error) {
            console.log('‚ùå Erro na conex√£o com banco');
            console.log(`üîç Erro: ${error.message}`);
            this.failed++;
            return false;
        }
    }

    // Verificar chaves API no banco
    async checkAPIKeys() {
        console.log('\nüîë VERIFICANDO CHAVES API...');
        try {
            const result = await pool.query(`
                SELECT COUNT(*) as total_keys,
                       COUNT(CASE WHEN exchange = 'bybit' THEN 1 END) as bybit_keys,
                       COUNT(CASE WHEN exchange = 'binance' THEN 1 END) as binance_keys
                FROM user_api_keys 
                WHERE api_key IS NOT NULL AND api_secret IS NOT NULL
            `);
            
            const stats = result.rows[0];
            console.log('‚úÖ Chaves API encontradas no banco');
            console.log(`üìä Total: ${stats.total_keys} | Bybit: ${stats.bybit_keys} | Binance: ${stats.binance_keys}`);
            
            if (parseInt(stats.total_keys) > 0) {
                this.passed++;
                return true;
            } else {
                console.log('‚ö†Ô∏è Nenhuma chave API encontrada');
                this.failed++;
                return false;
            }
        } catch (error) {
            console.log('‚ùå Erro ao verificar chaves API');
            console.log(`üîç Erro: ${error.message}`);
            this.failed++;
            return false;
        }
    }

    // Verificar tabela de saldos
    async checkBalancesTable() {
        console.log('\nüí∞ VERIFICANDO TABELA DE SALDOS...');
        try {
            const result = await pool.query(`
                SELECT COUNT(*) as total_balances,
                       MAX(last_updated) as last_update
                FROM balances
            `);
            
            const stats = result.rows[0];
            console.log('‚úÖ Tabela de saldos acess√≠vel');
            console.log(`üìä Total registros: ${stats.total_balances}`);
            console.log(`üìä √öltima atualiza√ß√£o: ${stats.last_update || 'Nunca'}`);
            this.passed++;
            return true;
        } catch (error) {
            console.log('‚ùå Erro ao acessar tabela de saldos');
            console.log(`üîç Erro: ${error.message}`);
            this.failed++;
            return false;
        }
    }

    // Verificar se o coletor est√° funcionando
    async checkCollector() {
        console.log('\nüîÑ VERIFICANDO COLETOR DE SALDOS...');
        try {
            // Verificar se h√° registros recentes (√∫ltimos 10 minutos)
            const result = await pool.query(`
                SELECT COUNT(*) as recent_updates
                FROM balances 
                WHERE last_updated > NOW() - INTERVAL '10 minutes'
            `);
            
            const recentUpdates = parseInt(result.rows[0].recent_updates);
            if (recentUpdates > 0) {
                console.log('‚úÖ Coletor funcionando - h√° atualiza√ß√µes recentes');
                console.log(`üìä Atualiza√ß√µes nos √∫ltimos 10min: ${recentUpdates}`);
                this.passed++;
                return true;
            } else {
                console.log('‚ö†Ô∏è Coletor pode n√£o estar funcionando - sem atualiza√ß√µes recentes');
                this.failed++;
                return false;
            }
        } catch (error) {
            console.log('‚ùå Erro ao verificar coletor');
            console.log(`üîç Erro: ${error.message}`);
            this.failed++;
            return false;
        }
    }

    // Verificar conectividade externa
    async checkExternalConnectivity() {
        console.log('\nüåç VERIFICANDO CONECTIVIDADE EXTERNA...');
        try {
            // Testar Bybit
            const bybitResponse = await axios.get('https://api.bybit.com/v5/market/time', { timeout: 5000 });
            console.log('‚úÖ Bybit API acess√≠vel');
            
            // Testar Binance
            const binanceResponse = await axios.get('https://api.binance.com/api/v3/time', { timeout: 5000 });
            console.log('‚úÖ Binance API acess√≠vel');
            
            this.passed++;
            return true;
        } catch (error) {
            console.log('‚ùå Problema de conectividade externa');
            console.log(`üîç Erro: ${error.message}`);
            this.failed++;
            return false;
        }
    }

    // Executar todas as verifica√ß√µes
    async runAllChecks() {
        console.log(`üöÄ Iniciando verifica√ß√£o completa do sistema...`);
        console.log(`üìÖ Data: ${new Date().toLocaleString('pt-BR')}\n`);

        const checks = [
            { name: 'Servidor', method: this.checkServerHealth },
            { name: 'Banco de Dados', method: this.checkDatabase },
            { name: 'Chaves API', method: this.checkAPIKeys },
            { name: 'Tabela Saldos', method: this.checkBalancesTable },
            { name: 'Coletor', method: this.checkCollector },
            { name: 'Conectividade', method: this.checkExternalConnectivity }
        ];

        for (const check of checks) {
            await check.method.call(this);
        }

        // Relat√≥rio final
        console.log('\n' + '='.repeat(50));
        console.log('üìã RELAT√ìRIO FINAL DA VERIFICA√á√ÉO');
        console.log('='.repeat(50));
        
        const total = this.passed + this.failed;
        const successRate = ((this.passed / total) * 100).toFixed(1);
        
        console.log(`üìä Total de verifica√ß√µes: ${total}`);
        console.log(`‚úÖ Sucessos: ${this.passed}`);
        console.log(`‚ùå Falhas: ${this.failed}`);
        console.log(`üéØ Taxa de sucesso: ${successRate}%`);
        
        if (this.failed === 0) {
            console.log('\nüéâ SISTEMA COMPLETAMENTE FUNCIONAL!');
            console.log('‚úÖ Todos os componentes est√£o operacionais');
        } else if (this.passed > this.failed) {
            console.log('\n‚ö†Ô∏è SISTEMA FUNCIONANDO COM PROBLEMAS MENORES');
            console.log('üîß Alguns componentes precisam de aten√ß√£o');
        } else {
            console.log('\nüö® SISTEMA COM PROBLEMAS CR√çTICOS');
            console.log('üõ†Ô∏è Interven√ß√£o urgente necess√°ria');
        }
        
        console.log('\nüìñ Para mais detalhes, consulte: DOCUMENTACAO-TECNICA-PROFISSIONAL.md');
        console.log('='.repeat(50));
        
        return this.failed === 0;
    }
}

// Executar verifica√ß√£o se chamado diretamente
if (require.main === module) {
    const validator = new SystemValidator();
    validator.runAllChecks()
        .then(allPassed => {
            process.exit(allPassed ? 0 : 1);
        })
        .catch(error => {
            console.error('‚ùå Erro cr√≠tico na verifica√ß√£o:', error.message);
            process.exit(1);
        });
}

module.exports = SystemValidator;
