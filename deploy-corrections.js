/**
 * üöÄ SCRIPT DE DEPLOY DAS CORRE√á√ïES
 * 
 * Deploy automatizado das corre√ß√µes PostgreSQL para Railway
 */

const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ DEPLOY DAS CORRE√á√ïES POSTGRESQL');
console.log('=================================');

// Lista de arquivos modificados
const MODIFIED_FILES = [
    'enterprise-server-garantido.js',
    'fixed-database-config.js',
    'test-fixed-endpoints.js'
];

// Verificar se os arquivos existem
console.log('üìÅ Verificando arquivos modificados...');
let allFilesExist = true;

MODIFIED_FILES.forEach(file => {
    const filePath = path.join(__dirname, file);
    if (fs.existsSync(filePath)) {
        console.log(`‚úÖ ${file}`);
    } else {
        console.log(`‚ùå ${file} - ARQUIVO N√ÉO ENCONTRADO`);
        allFilesExist = false;
    }
});

if (!allFilesExist) {
    console.log('\nüö® Alguns arquivos n√£o foram encontrados!');
    process.exit(1);
}

// Fun√ß√£o para executar comando
function runCommand(command, description) {
    return new Promise((resolve, reject) => {
        console.log(`\nüîß ${description}...`);
        console.log(`üìù Comando: ${command}`);
        
        exec(command, (error, stdout, stderr) => {
            if (error) {
                console.log(`‚ùå Erro: ${error.message}`);
                reject(error);
            } else {
                if (stdout) console.log(`‚úÖ ${stdout.trim()}`);
                if (stderr) console.log(`‚ö†Ô∏è ${stderr.trim()}`);
                resolve(stdout);
            }
        });
    });
}

async function deployCorrections() {
    try {
        // 1. Verificar status do git
        console.log('\nüìã ETAPA 1: Verificando status do reposit√≥rio');
        await runCommand('git status', 'Verificando status do Git');

        // 2. Adicionar arquivos modificados
        console.log('\nüìã ETAPA 2: Adicionando arquivos modificados');
        for (const file of MODIFIED_FILES) {
            await runCommand(`git add ${file}`, `Adicionando ${file}`);
        }

        // 3. Commit das corre√ß√µes
        console.log('\nüìã ETAPA 3: Fazendo commit das corre√ß√µes');
        const commitMessage = `fix: PostgreSQL ECONNRESET corrections

- Added robust PostgreSQL pool configuration
- Fixed database timeout issues for Railway
- Implemented safeQuery with retry logic
- Enhanced error handling for DB connections
- Added basic table creation on startup
- Fixed all dashboard endpoints with fallbacks

Resolves ECONNRESET errors in production logs`;

        await runCommand(`git commit -m "${commitMessage}"`, 'Fazendo commit das corre√ß√µes');

        // 4. Push para o reposit√≥rio
        console.log('\nüìã ETAPA 4: Enviando para reposit√≥rio remoto');
        await runCommand('git push origin main', 'Fazendo push para origin/main');

        console.log('\nüéâ DEPLOY CONCLU√çDO COM SUCESSO!');
        console.log('================================');
        console.log('‚úÖ Arquivos modificados enviados para o reposit√≥rio');
        console.log('‚úÖ Railway ir√° automaticamente fazer redeploy');
        console.log('‚è≥ Aguarde 2-3 minutos para o deploy ser conclu√≠do');
        console.log('');
        console.log('üîç Para monitorar o deploy:');
        console.log('   üìä Railway Dashboard: https://railway.app');
        console.log('   üìã Logs: railway logs');
        console.log('   üåê URL: coinbitclub-market-bot.up.railway.app');

    } catch (error) {
        console.log('\n‚ùå ERRO DURANTE O DEPLOY');
        console.log('=======================');
        console.log(`Erro: ${error.message}`);
        console.log('');
        console.log('üîß Poss√≠veis solu√ß√µes:');
        console.log('   1. Verificar se est√° logado no Git');
        console.log('   2. Verificar permiss√µes do reposit√≥rio');
        console.log('   3. Fazer push manual dos arquivos');
        console.log('');
        console.log('üìù Arquivos que precisam ser enviados:');
        MODIFIED_FILES.forEach(file => {
            console.log(`   - ${file}`);
        });
    }
}

// Fun√ß√£o para testar ap√≥s deploy
async function testAfterDeploy() {
    console.log('\nüß™ TESTANDO AP√ìS DEPLOY');
    console.log('======================');
    
    // Aguardar um pouco para o deploy finalizar
    console.log('‚è≥ Aguardando 30 segundos para deploy finalizar...');
    await new Promise(resolve => setTimeout(resolve, 30000));
    
    // Rodar teste dos endpoints
    try {
        const { runTests } = require('./test-fixed-endpoints');
        await runTests();
    } catch (error) {
        console.log('‚ö†Ô∏è Teste autom√°tico falhou, teste manual necess√°rio');
        console.log('   URL: http://localhost:3000/health');
    }
}

// Executar deploy
if (require.main === module) {
    deployCorrections()
        .then(() => {
            console.log('\n‚ùì Deseja testar os endpoints ap√≥s o deploy? (aguarda 30s)');
            console.log('   Execute: node test-fixed-endpoints.js');
        })
        .catch(error => {
            console.error('‚ùå Deploy falhou:', error.message);
            process.exit(1);
        });
}

module.exports = { deployCorrections };
