/**
 * VERIFICA√á√ÉO EST√ÅTICA DAS ROTAS CORRIGIDAS
 * =========================================
 * Analisa o c√≥digo do hybrid-server.js para verificar se todas as rotas cr√≠ticas est√£o definidas
 */

const fs = require('fs');

console.log('üîç VERIFICA√á√ÉO EST√ÅTICA DAS ROTAS CORRIGIDAS');
console.log('=============================================');

try {
    // Ler o arquivo hybrid-server.js
    const serverCode = fs.readFileSync('hybrid-server.js', 'utf8');
    
    console.log('‚úÖ Arquivo hybrid-server.js carregado');
    console.log(`üìè Tamanho: ${serverCode.length} caracteres`);
    console.log('');
    
    // Rotas cr√≠ticas que devem estar presentes
    const criticalRoutes = [
        { pattern: /app\.get\(['"']\/health['"]/, name: 'GET /health', description: 'Health check' },
        { pattern: /app\.get\(['"']\/status['"]/, name: 'GET /status', description: 'Status principal' },
        { pattern: /app\.get\(['"']\/api\/system\/status['"]/, name: 'GET /api/system/status', description: 'API system status' },
        { pattern: /app\.get\(['"']\/api\/dashboard\/summary['"]/, name: 'GET /api/dashboard/summary', description: 'Dashboard summary' },
        { pattern: /app\.post\(['"']\/api\/webhooks\/signal['"]/, name: 'POST /api/webhooks/signal', description: 'Webhook signal POST' },
        { pattern: /app\.get\(['"']\/api\/webhooks\/signal['"]/, name: 'GET /api/webhooks/signal', description: 'Webhook signal GET' },
        { pattern: /app\.post\(['"']\/webhook['"]/, name: 'POST /webhook', description: 'Webhook geral POST' },
        { pattern: /app\.get\(['"']\/webhook['"]/, name: 'GET /webhook', description: 'Webhook geral GET' },
        { pattern: /app\.post\(['"']\/api\/webhooks\/trading['"]/, name: 'POST /api/webhooks/trading', description: 'Trading webhook POST' },
        { pattern: /app\.get\(['"']\/api\/webhooks\/trading['"]/, name: 'GET /api/webhooks/trading', description: 'Trading webhook GET' }
    ];
    
    // Middleware cr√≠tico
    const criticalMiddleware = [
        { pattern: /app\.use\(express\.json\(\)/, name: 'express.json()', description: 'JSON parsing middleware' },
        { pattern: /app\.use\(express\.urlencoded/, name: 'express.urlencoded()', description: 'URL encoding middleware' }
    ];
    
    let foundRoutes = 0;
    let foundMiddleware = 0;
    
    console.log('üîç Verificando rotas cr√≠ticas:');
    console.log('==============================');
    
    criticalRoutes.forEach(route => {
        const found = route.pattern.test(serverCode);
        const icon = found ? '‚úÖ' : '‚ùå';
        console.log(`${icon} ${route.name.padEnd(30)} - ${route.description}`);
        if (found) foundRoutes++;
    });
    
    console.log('');
    console.log('üîç Verificando middleware cr√≠tico:');
    console.log('==================================');
    
    criticalMiddleware.forEach(middleware => {
        const found = middleware.pattern.test(serverCode);
        const icon = found ? '‚úÖ' : '‚ùå';
        console.log(`${icon} ${middleware.name.padEnd(25)} - ${middleware.description}`);
        if (found) foundMiddleware++;
    });
    
    console.log('');
    console.log('üìä RELAT√ìRIO DE VERIFICA√á√ÉO:');
    console.log('============================');
    console.log(`‚úÖ Rotas encontradas: ${foundRoutes}/${criticalRoutes.length}`);
    console.log(`‚úÖ Middleware encontrado: ${foundMiddleware}/${criticalMiddleware.length}`);
    
    const routePercentage = Math.round((foundRoutes / criticalRoutes.length) * 100);
    const middlewarePercentage = Math.round((foundMiddleware / criticalMiddleware.length) * 100);
    
    console.log(`üìà Taxa de rotas: ${routePercentage}%`);
    console.log(`üìà Taxa de middleware: ${middlewarePercentage}%`);
    
    console.log('');
    
    // Verifica√ß√µes adicionais
    console.log('üîç Verifica√ß√µes adicionais:');
    console.log('===========================');
    
    const additionalChecks = [
        { check: /app\.listen\(port/, name: 'Servidor iniciando', found: false },
        { check: /console\.log.*SERVER.*START/, name: 'Logs de inicializa√ß√£o', found: false },
        { check: /systemState/, name: 'Estado do sistema', found: false },
        { check: /loadMainSystem/, name: 'Carregamento sistema principal', found: false },
        { check: /webhook.*recebido/, name: 'Logs de webhook', found: false }
    ];
    
    additionalChecks.forEach(check => {
        check.found = check.check.test(serverCode);
        const icon = check.found ? '‚úÖ' : '‚ùå';
        console.log(`${icon} ${check.name}`);
    });
    
    console.log('');
    
    // An√°lise final
    const allCriticalRoutesPresent = foundRoutes === criticalRoutes.length;
    const allMiddlewarePresent = foundMiddleware === criticalMiddleware.length;
    const additionalChecksOk = additionalChecks.filter(c => c.found).length >= 3;
    
    if (allCriticalRoutesPresent && allMiddlewarePresent && additionalChecksOk) {
        console.log('üéâ VERIFICA√á√ÉO COMPLETA: TUDO OK!');
        console.log('=================================');
        console.log('‚úÖ Todas as rotas cr√≠ticas est√£o definidas');
        console.log('‚úÖ Middleware essencial configurado');
        console.log('‚úÖ Estrutura do servidor adequada');
        console.log('‚úÖ Logs e monitoramento presentes');
        console.log('');
        console.log('üöÄ PRONTO PARA TESTES E DEPLOY!');
        console.log('');
        console.log('üí° Pr√≥ximos passos:');
        console.log('  1. Iniciar servidor: node hybrid-server.js');
        console.log('  2. Testar endpoints: node test-endpoints-final.js');
        console.log('  3. Fazer deploy: git push origin main');
    } else {
        console.log('‚ö†Ô∏è PROBLEMAS ENCONTRADOS:');
        console.log('=========================');
        
        if (!allCriticalRoutesPresent) {
            console.log(`‚ùå Faltam ${criticalRoutes.length - foundRoutes} rotas cr√≠ticas`);
        }
        
        if (!allMiddlewarePresent) {
            console.log(`‚ùå Faltam ${criticalMiddleware.length - foundMiddleware} middlewares`);
        }
        
        if (!additionalChecksOk) {
            console.log('‚ùå Estrutura do servidor pode estar incompleta');
        }
        
        console.log('');
        console.log('üîß Revise o c√≥digo e execute novamente');
    }
    
    // Salvar relat√≥rio
    const report = {
        timestamp: new Date().toISOString(),
        routesFound: foundRoutes,
        totalRoutes: criticalRoutes.length,
        middlewareFound: foundMiddleware,
        totalMiddleware: criticalMiddleware.length,
        routePercentage,
        middlewarePercentage,
        allCriticalRoutesPresent,
        allMiddlewarePresent,
        additionalChecksOk,
        readyForDeploy: allCriticalRoutesPresent && allMiddlewarePresent && additionalChecksOk
    };
    
    fs.writeFileSync('static-verification-report.json', JSON.stringify(report, null, 2));
    console.log('üìù Relat√≥rio salvo em: static-verification-report.json');
    
} catch (error) {
    console.error('‚ùå Erro na verifica√ß√£o:', error.message);
    console.log('');
    console.log('üí° Certifique-se de estar no diret√≥rio correto com o arquivo hybrid-server.js');
}

console.log('');
console.log('üéØ Verifica√ß√£o est√°tica conclu√≠da!');
