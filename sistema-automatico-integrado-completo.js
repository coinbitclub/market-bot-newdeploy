// üöÄ SISTEMA AUTOM√ÅTICO INTEGRADO - ETAPAS 3 & 5 COMPLETO
// ==========================================================
//
// CARACTER√çSTICAS:
// ‚úÖ 100% AUTOM√ÅTICO (sem confirma√ß√£o humana)
// ‚úÖ Coordena√ß√£o IA + Execu√ß√£o Real
// ‚úÖ M√©tricas Fear & Greed + TOP 100 moedas
// ‚úÖ Monitoramento por ticker espec√≠fico
// ‚úÖ Fechamento antecipado inteligente
// ‚úÖ Multi-usu√°rio automatizado
// ‚úÖ TP/SL obrigat√≥rios
// ‚úÖ Integra√ß√£o com sistema existente

const { Pool } = require('pg');
const axios = require('axios');
const ccxt = require('ccxt');
const MultiUserSignalProcessor = require('./multi-user-signal-processor');
const UserExchangeManager = require('./user-exchange-manager');

class SistemaAutomaticoIntegrado {
    constructor() {
        console.log('üöÄ INICIANDO SISTEMA AUTOM√ÅTICO INTEGRADO');
        console.log('==========================================');
        
        this.pool = new Pool({
            connectionString: 'postgresql://postgres:ELjbkkgUASRCtdTAXVFgIssOXiLsRCPq@trolley.proxy.rlwy.net:44790/railway',
            ssl: { rejectUnauthorized: false }
        });

        // Componentes integrados
        this.multiUserProcessor = new MultiUserSignalProcessor();
        this.userManager = new UserExchangeManager();

        // Estado do mercado
        this.marketData = {
            fearGreed: 50,
            top100Movement: 50,
            allowedDirection: 'LONG_E_SHORT',
            lastUpdate: null
        };

        // Posi√ß√µes ativas por ticker
        this.activePositions = new Map(); // ticker -> Map(userId -> positionData)
        this.blockedTickers = new Map(); // ticker -> blockUntil
        this.signalHistory = new Map(); // ticker -> lastSignalData

        this.config = {
            // Tempos corrigidos
            timeStagnation: 120, // 120 min conforme solicitado
            
            // Valida√ß√µes obrigat√≥rias
            maxPositionsPerUser: 2,
            blockTickerHours: 2,
            tpSlMandatory: true,
            
            // Prefer√™ncia sinais fortes
            strongSignalPriority: true,
            
            // Par√¢metros de risco
            defaultLeverage: 5,
            maxLeverage: 10,
            defaultPositionSize: 0.30,
            maxPositionSize: 0.50,
            
            // M√©tricas de mercado
            marketUpdateInterval: 300000, // 5min
            positionMonitorInterval: 30000, // 30s
            cleanupInterval: 10800000 // 3h
        };
    }

    // =======================================
    // üìä M√âTRICAS DE MERCADO INTEGRADAS
    // =======================================
    
    async atualizarMetricasMercado() {
        console.log('üìä Atualizando m√©tricas de mercado...');
        
        try {
            // Fear & Greed
            await this.coletarFearGreed();
            
            // TOP 100 moedas - √çndice de Movimento
            await this.calcularMovimentoTop100();
            
            // Determinar dire√ß√£o permitida
            this.determinarDirecaoPermitida();
            
            this.marketData.lastUpdate = new Date();
            
            console.log(`‚úÖ F&G: ${this.marketData.fearGreed} | Movimento: ${this.marketData.top100Movement} | Dire√ß√£o: ${this.marketData.allowedDirection}`);
            
        } catch (error) {
            console.error('‚ùå Erro m√©tricas:', error.message);
            // Fallback neutro
            this.marketData.fearGreed = 50;
            this.marketData.top100Movement = 50;
            this.marketData.allowedDirection = 'LONG_E_SHORT';
        }
    }

    async coletarFearGreed() {
        try {
            const response = await axios.get('https://api.alternative.me/fng/', { timeout: 5000 });
            this.marketData.fearGreed = parseInt(response.data.data[0].value);
        } catch (error) {
            console.warn('‚ö†Ô∏è Fear & Greed fallback: 50');
            this.marketData.fearGreed = 50;
        }
    }

    async calcularMovimentoTop100() {
        try {
            const response = await axios.get('https://api.coingecko.com/api/v3/coins/markets', {
                params: {
                    vs_currency: 'usd',
                    order: 'market_cap_desc',
                    per_page: 100,
                    page: 1,
                    price_change_percentage: '24h,7d'
                },
                timeout: 10000
            });

            const coins = response.data;
            const rising24h = coins.filter(c => c.price_change_percentage_24h > 0).length;
            const rising7d = coins.filter(c => c.price_change_percentage_7d > 0).length;
            const avgChange24h = coins.reduce((sum, c) => sum + (c.price_change_percentage_24h || 0), 0) / coins.length;

            // √çndice de Movimento do Mercado (IMM)
            const risingScore24h = (rising24h / 100) * 100;
            const risingScore7d = (rising7d / 100) * 100;
            const changeScore = Math.max(0, Math.min(100, (avgChange24h + 10) * 5));

            this.marketData.top100Movement = Math.round(
                (risingScore24h * 0.5 + risingScore7d * 0.3 + changeScore * 0.2)
            );

        } catch (error) {
            console.warn('‚ö†Ô∏è TOP 100 fallback: 50');
            this.marketData.top100Movement = 50;
        }
    }

    determinarDirecaoPermitida() {
        const fg = this.marketData.fearGreed;
        const movimento = this.marketData.top100Movement;
        
        if (fg < 30) {
            this.marketData.allowedDirection = 'SOMENTE_LONG';
        } else if (fg > 80) {
            this.marketData.allowedDirection = 'SOMENTE_SHORT';
        } else { // 30-80
            if (movimento < 30) {
                this.marketData.allowedDirection = 'SOMENTE_LONG';
            } else if (movimento > 70) {
                this.marketData.allowedDirection = 'SOMENTE_SHORT';
            } else {
                this.marketData.allowedDirection = 'LONG_E_SHORT';
            }
        }
    }

    // =======================================
    // üì° PROCESSAMENTO DE SINAIS POR TICKER
    // =======================================
    
    async processarSinalTradingView(signalData) {
        console.log(`üì° Processando sinal: ${signalData.signal} - ${signalData.ticker}`);
        
        try {
            // Estrutura do sinal
            const signal = {
                id: this.gerarIdSinal(),
                type: signalData.signal, // SINAL_LONG, SINAL_LONG_FORTE, etc.
                ticker: signalData.ticker,
                timestamp: Date.now(),
                source: signalData.source || 'TradingView',
                data: signalData
            };

            // Valida√ß√£o b√°sica
            if (!this.validarSinalBasico(signal)) {
                return { success: false, error: 'Sinal inv√°lido' };
            }

            // Processar por tipo
            if (signal.type.startsWith('FECHE_')) {
                return await this.processarSinalFechamento(signal);
            } else {
                return await this.processarSinalAbertura(signal);
            }

        } catch (error) {
            console.error('‚ùå Erro processamento sinal:', error);
            return { success: false, error: error.message };
        }
    }

    validarSinalBasico(signal) {
        const tiposValidos = [
            'SINAL_LONG', 'SINAL_LONG_FORTE',
            'SINAL_SHORT', 'SINAL_SHORT_FORTE',
            'FECHE_LONG', 'FECHE_SHORT'
        ];
        
        return tiposValidos.includes(signal.type) && signal.ticker && signal.ticker.length > 0;
    }

    async processarSinalAbertura(signal) {
        console.log(`üéØ Validando abertura: ${signal.type} - ${signal.ticker}`);
        
        // 1. Verificar dire√ß√£o permitida
        const direcaoSinal = signal.type.includes('LONG') ? 'LONG' : 'SHORT';
        if (!this.validarDirecaoPermitida(direcaoSinal)) {
            console.log(`‚ùå Dire√ß√£o ${direcaoSinal} bloqueada pelo mercado`);
            return { success: false, error: 'Dire√ß√£o n√£o permitida pelo mercado' };
        }

        // 2. Verificar bloqueio de ticker
        if (this.isTickerBloqueado(signal.ticker)) {
            console.log(`‚ùå Ticker ${signal.ticker} bloqueado por 2h`);
            return { success: false, error: 'Ticker bloqueado' };
        }

        // 3. Verificar se h√° posi√ß√µes ativas no ticker
        const activePositions = this.activePositions.get(signal.ticker) || new Map();
        if (activePositions.size > 0) {
            console.log(`‚ùå J√° existe posi√ß√£o ativa em ${signal.ticker}`);
            return { success: false, error: 'Ticker j√° tem posi√ß√£o ativa' };
        }

        // 4. Priorizar sinais fortes se configurado
        if (this.config.strongSignalPriority && !signal.type.includes('FORTE')) {
            console.log(`‚ö†Ô∏è Priorizando apenas sinais FORTE`);
            return { success: false, error: 'Apenas sinais FORTE s√£o priorizados' };
        }

        // 5. Executar para todos os usu√°rios automaticamente
        return await this.executarSinalMultiUsuario(signal);
    }

    async processarSinalFechamento(signal) {
        console.log(`üîÑ Processando fechamento: ${signal.type} - ${signal.ticker}`);
        
        const direcao = signal.type.includes('LONG') ? 'LONG' : 'SHORT';
        const activePositions = this.activePositions.get(signal.ticker);
        
        if (!activePositions || activePositions.size === 0) {
            console.log(`‚ö†Ô∏è Nenhuma posi√ß√£o ativa para fechar em ${signal.ticker}`);
            return { success: true, message: 'Nenhuma posi√ß√£o para fechar' };
        }

        // Fechar todas as posi√ß√µes da dire√ß√£o espec√≠fica
        const posicoesParaFechar = [];
        for (const [userId, positionData] of activePositions) {
            if (positionData.side === direcao) {
                posicoesParaFechar.push({ userId, positionData });
            }
        }

        if (posicoesParaFechar.length === 0) {
            console.log(`‚ö†Ô∏è Nenhuma posi√ß√£o ${direcao} para fechar em ${signal.ticker}`);
            return { success: true, message: `Nenhuma posi√ß√£o ${direcao} para fechar` };
        }

        // Executar fechamentos
        const resultados = [];
        for (const { userId, positionData } of posicoesParaFechar) {
            const resultado = await this.fecharPosicaoUsuario(userId, signal.ticker, positionData, 'SIGNAL_CLOSE');
            resultados.push(resultado);
        }

        return {
            success: true,
            message: `${posicoesParaFechar.length} posi√ß√µes fechadas`,
            results: resultados
        };
    }

    validarDirecaoPermitida(direcaoSinal) {
        const allowed = this.marketData.allowedDirection;
        
        if (allowed === 'LONG_E_SHORT') return true;
        if (allowed === 'SOMENTE_LONG' && direcaoSinal === 'LONG') return true;
        if (allowed === 'SOMENTE_SHORT' && direcaoSinal === 'SHORT') return true;
        
        return false;
    }

    // =======================================
    // üéØ EXECU√á√ÉO AUTOM√ÅTICA MULTI-USU√ÅRIO
    // =======================================
    
    async executarSinalMultiUsuario(signal) {
        console.log(`üéØ Executando sinal para m√∫ltiplos usu√°rios: ${signal.ticker}`);
        
        try {
            // Usar o sistema multi-usu√°rio existente
            const resultado = await this.multiUserProcessor.processSignal({
                signal: signal.type,
                ticker: signal.ticker,
                source: signal.source,
                timestamp: signal.timestamp,
                ...signal.data
            });

            // Registrar posi√ß√µes abertas
            if (resultado.success && resultado.executions) {
                await this.registrarPosicoesAbertas(signal, resultado.executions);
            }

            // Salvar hist√≥rico do sinal
            this.signalHistory.set(signal.ticker, {
                signal: signal,
                timestamp: Date.now(),
                result: resultado
            });

            console.log(`‚úÖ Sinal executado: ${resultado.executions?.length || 0} usu√°rios processados`);
            
            return resultado;

        } catch (error) {
            console.error('‚ùå Erro execu√ß√£o multi-usu√°rio:', error);
            return { success: false, error: error.message };
        }
    }

    async registrarPosicoesAbertas(signal, executions) {
        console.log(`üìä Registrando posi√ß√µes abertas para ${signal.ticker}`);
        
        const tickerPositions = new Map();
        const direcao = signal.type.includes('LONG') ? 'LONG' : 'SHORT';
        
        for (const execution of executions) {
            if (execution.status === 'SUCCESS') {
                const positionData = {
                    userId: execution.userId,
                    ticker: signal.ticker,
                    side: direcao,
                    openTime: Date.now(),
                    signalId: signal.id,
                    exchange: execution.exchange,
                    size: execution.size,
                    entryPrice: execution.entryPrice,
                    stopLoss: execution.stopLoss,
                    takeProfit: execution.takeProfit,
                    leverage: execution.leverage,
                    lastUpdate: Date.now()
                };
                
                tickerPositions.set(execution.userId, positionData);
            }
        }
        
        if (tickerPositions.size > 0) {
            this.activePositions.set(signal.ticker, tickerPositions);
            console.log(`‚úÖ ${tickerPositions.size} posi√ß√µes registradas para ${signal.ticker}`);
        }
    }

    // =======================================
    // üìä MONITORAMENTO AUTOM√ÅTICO INTELIGENTE
    // =======================================
    
    async monitorarPosicoesAutomaticamente() {
        if (this.activePositions.size === 0) return;
        
        console.log(`üìä Monitorando ${this.activePositions.size} tickers ativos...`);
        
        for (const [ticker, userPositions] of this.activePositions) {
            await this.analisarTickerCompleto(ticker, userPositions);
        }
    }

    async analisarTickerCompleto(ticker, userPositions) {
        console.log(`üîç Analisando ${ticker} - ${userPositions.size} posi√ß√µes`);
        
        try {
            // Obter pre√ßo atual do ticker
            const precoAtual = await this.obterPrecoAtual(ticker);
            if (!precoAtual) return;

            // Analisar cada posi√ß√£o do ticker
            const posicoesParaFechar = [];
            
            for (const [userId, positionData] of userPositions) {
                const analise = await this.analisarPosicaoEspecifica(ticker, userId, positionData, precoAtual);
                
                if (analise.shouldClose) {
                    posicoesParaFechar.push({
                        userId,
                        positionData,
                        reason: analise.closeReason,
                        analise
                    });
                }
            }

            // Executar fechamentos necess√°rios AUTOMATICAMENTE
            for (const { userId, positionData, reason, analise } of posicoesParaFechar) {
                console.log(`üîÑ Fechando posi√ß√£o autom√°tica: ${ticker} - User ${userId} - Motivo: ${reason}`);
                await this.fecharPosicaoUsuario(userId, ticker, positionData, reason);
            }

        } catch (error) {
            console.error(`‚ùå Erro an√°lise ${ticker}:`, error.message);
        }
    }

    async analisarPosicaoEspecifica(ticker, userId, positionData, precoAtual) {
        const tempoEmPosicao = Date.now() - positionData.openTime;
        const tempoMinutos = tempoEmPosicao / 60000;
        
        // Calcular P&L atual
        const pnlAtual = this.calcularPnL(positionData, precoAtual);
        
        // An√°lise de fechamento autom√°tico
        const analise = {
            ticker,
            userId,
            tempoMinutos,
            pnlAtual,
            pnlPercentual: (pnlAtual / positionData.entryPrice) * 100,
            shouldClose: false,
            closeReason: null
        };

        // 1. Tempo em posi√ß√£o sem progresso (120min)
        if (tempoMinutos > this.config.timeStagnation && Math.abs(analise.pnlPercentual) < 0.5) {
            analise.shouldClose = true;
            analise.closeReason = 'TIME_STAGNATION';
            console.log(`‚è∞ ${ticker} - User ${userId}: Estagna√ß√£o por ${Math.round(tempoMinutos)}min`);
            return analise;
        }

        // 2. Correla√ß√£o com mercado + dire√ß√£o oposta
        const correlacaoRisco = await this.verificarCorrelacaoMercado(positionData, this.marketData);
        if (correlacaoRisco.shouldClose) {
            analise.shouldClose = true;
            analise.closeReason = 'MARKET_CORRELATION';
            console.log(`üìâ ${ticker} - User ${userId}: Correla√ß√£o perigosa com mercado`);
            return analise;
        }

        // 3. Volatilidade extrema na dire√ß√£o oposta
        const volatilidade = await this.verificarVolatilidadeExtrema(ticker, positionData);
        if (volatilidade.shouldClose) {
            analise.shouldClose = true;
            analise.closeReason = 'VOLATILITY_OPPOSITE';
            console.log(`‚ö° ${ticker} - User ${userId}: Volatilidade extrema oposta`);
            return analise;
        }

        return analise;
    }

    async verificarCorrelacaoMercado(positionData, marketData) {
        // Verificar se mercado est√° caindo e posi√ß√£o √© LONG (ou vice-versa)
        const mercadoCaindo = marketData.top100Movement < 40;
        const mercadoSubindo = marketData.top100Movement > 60;
        
        // Regra corrigida: s√≥ fechar se dire√ß√£o oposta ao mercado
        if (mercadoCaindo && positionData.side === 'LONG') {
            return { shouldClose: true, reason: 'Mercado caindo + posi√ß√£o LONG' };
        }
        
        if (mercadoSubindo && positionData.side === 'SHORT') {
            return { shouldClose: true, reason: 'Mercado subindo + posi√ß√£o SHORT' };
        }
        
        return { shouldClose: false };
    }

    async verificarVolatilidadeExtrema(ticker, positionData) {
        try {
            // Simular verifica√ß√£o de volatilidade (implementar com dados reais)
            const volatilidade = Math.random() * 100; // Placeholder
            
            // Volatilidade extrema apenas na dire√ß√£o OPOSTA √† posi√ß√£o
            if (volatilidade > 80) {
                // Verificar dire√ß√£o da volatilidade vs posi√ß√£o
                const direcaoVolatilidade = Math.random() > 0.5 ? 'UP' : 'DOWN';
                
                if ((positionData.side === 'LONG' && direcaoVolatilidade === 'DOWN') ||
                    (positionData.side === 'SHORT' && direcaoVolatilidade === 'UP')) {
                    return { shouldClose: true, reason: `Volatilidade ${direcaoVolatilidade} vs ${positionData.side}` };
                }
            }
            
        } catch (error) {
            console.error('Erro verifica√ß√£o volatilidade:', error.message);
        }
        
        return { shouldClose: false };
    }

    calcularPnL(positionData, precoAtual) {
        const precoEntrada = positionData.entryPrice;
        
        if (positionData.side === 'LONG') {
            return precoAtual - precoEntrada;
        } else {
            return precoEntrada - precoAtual;
        }
    }

    async fecharPosicaoUsuario(userId, ticker, positionData, motivo) {
        console.log(`üîÑ Fechando posi√ß√£o: ${ticker} - User ${userId} - ${motivo}`);
        
        try {
            // Usar sistema existente para fechar posi√ß√£o real
            // (implementar integra√ß√£o com exchanges)
            
            // Remover da lista de posi√ß√µes ativas
            const tickerPositions = this.activePositions.get(ticker);
            if (tickerPositions) {
                tickerPositions.delete(userId);
                
                if (tickerPositions.size === 0) {
                    this.activePositions.delete(ticker);
                    // Aplicar bloqueio de 2h no ticker
                    this.bloquearTicker(ticker);
                }
            }

            // Processar comissionamento se lucrativa
            if (positionData.pnl > 0) {
                await this.processarComissionamento(userId, positionData);
            }

            console.log(`‚úÖ Posi√ß√£o fechada: ${ticker} - User ${userId}`);
            
            return { success: true, motivo };

        } catch (error) {
            console.error(`‚ùå Erro fechamento ${ticker}:`, error.message);
            return { success: false, error: error.message };
        }
    }

    // =======================================
    // üéõÔ∏è UTILIT√ÅRIOS E HELPERS
    // =======================================
    
    gerarIdSinal() {
        return `SIG_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }

    isTickerBloqueado(ticker) {
        const bloqueio = this.blockedTickers.get(ticker);
        if (!bloqueio) return false;
        
        if (Date.now() > bloqueio) {
            this.blockedTickers.delete(ticker);
            return false;
        }
        
        return true;
    }

    bloquearTicker(ticker) {
        const bloqueioAte = Date.now() + (this.config.blockTickerHours * 60 * 60 * 1000);
        this.blockedTickers.set(ticker, bloqueioAte);
        console.log(`üîí Ticker ${ticker} bloqueado por ${this.config.blockTickerHours}h`);
    }

    async obterPrecoAtual(ticker) {
        // Implementar obten√ß√£o de pre√ßo real das exchanges
        // Placeholder
        return 45000 + (Math.random() - 0.5) * 1000;
    }

    async processarComissionamento(userId, positionData) {
        // Integrar com sistema financeiro existente
        console.log(`üí∞ Processando comiss√£o para User ${userId}`);
    }

    // =======================================
    // üöÄ INICIALIZA√á√ÉO E LOOPS PRINCIPAIS
    // =======================================
    
    async iniciarSistemaCompleto() {
        console.log('üöÄ Iniciando Sistema Autom√°tico Integrado...');
        
        try {
            // 1. Ativar auto trading para usu√°rios com chaves
            await this.userManager.enableAutoTradingForUsersWithKeys();
            
            // 2. Coleta inicial de m√©tricas
            await this.atualizarMetricasMercado();
            
            // 3. Configurar intervalos autom√°ticos
            this.configurarIntervalosAutomaticos();
            
            // 4. Configurar webhook para sinais
            this.configurarWebhookSinais();
            
            console.log('‚úÖ Sistema Autom√°tico 100% Operacional!');
            console.log('üéØ Aguardando sinais TradingView...');
            
        } catch (error) {
            console.error('‚ùå Erro inicializa√ß√£o:', error);
            throw error;
        }
    }

    configurarIntervalosAutomaticos() {
        // Atualizar m√©tricas de mercado (5min)
        setInterval(() => {
            this.atualizarMetricasMercado();
        }, this.config.marketUpdateInterval);
        
        // Monitorar posi√ß√µes (30s)
        setInterval(() => {
            this.monitorarPosicoesAutomaticamente();
        }, this.config.positionMonitorInterval);
        
        // Limpeza geral (3h)
        setInterval(() => {
            this.limparDadosAntigos();
        }, this.config.cleanupInterval);
        
        console.log('‚è∞ Intervalos autom√°ticos configurados');
    }

    configurarWebhookSinais() {
        // Integrar com webhook existente do sistema
        console.log('üì° Webhook configurado para recep√ß√£o autom√°tica de sinais');
    }

    limparDadosAntigos() {
        console.log('üßπ Limpeza autom√°tica de dados antigos...');
        
        const agora = Date.now();
        const limite6h = 6 * 60 * 60 * 1000;
        
        // Limpar hist√≥rico de sinais antigos
        for (const [ticker, signalData] of this.signalHistory) {
            if (agora - signalData.timestamp > limite6h) {
                this.signalHistory.delete(ticker);
            }
        }
        
        // Limpar bloqueios expirados
        for (const [ticker, bloqueioAte] of this.blockedTickers) {
            if (agora > bloqueioAte) {
                this.blockedTickers.delete(ticker);
            }
        }
        
        console.log(`‚úÖ Limpeza conclu√≠da - ${this.signalHistory.size} sinais, ${this.blockedTickers.size} bloqueios`);
    }

    // =======================================
    // üìä API PARA INTEGRA√á√ÉO COM WEBHOOK
    // =======================================
    
    async processarWebhookTradingView(req, res) {
        try {
            const signalData = req.body;
            console.log('üì° Webhook recebido:', signalData);
            
            // Processar sinal automaticamente
            const resultado = await this.processarSinalTradingView(signalData);
            
            res.json({
                success: resultado.success,
                message: resultado.success ? 'Sinal processado automaticamente' : resultado.error,
                market_condition: {
                    fear_greed: this.marketData.fearGreed,
                    movement: this.marketData.top100Movement,
                    allowed_direction: this.marketData.allowedDirection
                },
                active_positions: this.activePositions.size,
                blocked_tickers: this.blockedTickers.size
            });
            
        } catch (error) {
            console.error('‚ùå Erro webhook:', error);
            res.status(500).json({ success: false, error: error.message });
        }
    }

    // Status do sistema para monitoramento
    getSystemStatus() {
        return {
            system_active: true,
            market_data: this.marketData,
            active_positions: Array.from(this.activePositions.entries()).map(([ticker, positions]) => ({
                ticker,
                position_count: positions.size,
                users: Array.from(positions.keys())
            })),
            blocked_tickers: Array.from(this.blockedTickers.entries()).map(([ticker, until]) => ({
                ticker,
                blocked_until: new Date(until).toISOString(),
                remaining_minutes: Math.round((until - Date.now()) / 60000)
            })),
            signal_history: this.signalHistory.size,
            config: this.config
        };
    }
}

// Inst√¢ncia global para uso em rotas
let sistemaGlobal = null;

// Fun√ß√£o para inicializar o sistema
async function inicializarSistema() {
    if (!sistemaGlobal) {
        sistemaGlobal = new SistemaAutomaticoIntegrado();
        await sistemaGlobal.iniciarSistemaCompleto();
    }
    return sistemaGlobal;
}

// Middleware para rotas Express
function configurarRotasExpress(app) {
    // Webhook TradingView
    app.post('/webhook/trading-signal', async (req, res) => {
        if (!sistemaGlobal) {
            return res.status(503).json({ error: 'Sistema n√£o inicializado' });
        }
        await sistemaGlobal.processarWebhookTradingView(req, res);
    });
    
    // Status do sistema
    app.get('/system/status', (req, res) => {
        if (!sistemaGlobal) {
            return res.status(503).json({ error: 'Sistema n√£o inicializado' });
        }
        res.json(sistemaGlobal.getSystemStatus());
    });
    
    // For√ßar atualiza√ß√£o de m√©tricas
    app.post('/system/update-metrics', async (req, res) => {
        if (!sistemaGlobal) {
            return res.status(503).json({ error: 'Sistema n√£o inicializado' });
        }
        await sistemaGlobal.atualizarMetricasMercado();
        res.json({ success: true, market_data: sistemaGlobal.marketData });
    });
    
    console.log('üåê Rotas do sistema autom√°tico configuradas');
}

// Executar se chamado diretamente
if (require.main === module) {
    inicializarSistema().catch(console.error);
}

module.exports = { 
    SistemaAutomaticoIntegrado, 
    inicializarSistema, 
    configurarRotasExpress 
};
