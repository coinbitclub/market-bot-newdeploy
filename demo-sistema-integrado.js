#!/usr/bin/env node

/**
 * DEMONSTRA√á√ÉO COMPLETA DO SISTEMA INTEGRADO
 * Mostra o sistema de monitoramento autom√°tico funcionando
 * atrav√©s das rotas da API integradas ao app.js
 */

const axios = require('axios');

// Configura√ß√£o
const BASE_URL = 'http://localhost:3000';
const API_KEYS_TEST = [
  {
    userId: 16,
    apiKey: 'ERICA_KEY_HERE',
    apiSecret: 'ERICA_SECRET_HERE',
    environment: 'production',
    name: 'Erica'
  },
  {
    userId: 17,
    apiKey: 'LUIZA_KEY_HERE', 
    apiSecret: 'LUIZA_SECRET_HERE',
    environment: 'production',
    name: 'Luiza'
  }
];

async function demonstrateIntegratedSystem() {
  console.log('üöÄ DEMONSTRA√á√ÉO DO SISTEMA INTEGRADO');
  console.log('=====================================');
  console.log('');

  try {
    // 1. Verificar se o servidor est√° rodando
    console.log('1Ô∏è‚É£ Verificando status do servidor...');
    try {
      const healthResponse = await axios.get(`${BASE_URL}/health`);
      console.log('‚úÖ Servidor online:', healthResponse.data.status);
    } catch (error) {
      console.log('‚ùå Servidor offline. Inicie o app.js primeiro!');
      console.log('üí° Execute: node app.js');
      return;
    }

    // 2. Verificar sistema de monitoramento
    console.log('');
    console.log('2Ô∏è‚É£ Verificando sistema de monitoramento...');
    try {
      const monitoringResponse = await axios.get(`${BASE_URL}/api/monitoring/stats`);
      console.log('‚úÖ Sistema de monitoramento ativo');
      console.log('üìä Estat√≠sticas:', monitoringResponse.data.data || 'Sem dados ainda');
    } catch (error) {
      console.log('‚ö†Ô∏è Sistema de monitoramento:', error.response?.status === 503 ? 'Inicializando...' : 'Erro');
    }

    // 3. Demonstrar adi√ß√£o de chave com diagn√≥stico autom√°tico
    console.log('');
    console.log('3Ô∏è‚É£ Demonstrando diagn√≥stico autom√°tico para novas chaves...');
    
    // Usar uma chave de teste conhecida (simula√ß√£o)
    const testApiKey = {
      userId: 999,
      apiKey: 'TEST_' + Date.now(),
      apiSecret: 'TEST_SECRET_' + Date.now(),
      environment: 'testnet'
    };

    try {
      console.log(`üîî Adicionando nova chave API para usu√°rio ${testApiKey.userId}...`);
      
      const addKeyResponse = await axios.post(
        `${BASE_URL}/api/users/${testApiKey.userId}/api-keys`,
        testApiKey
      );

      console.log('‚úÖ Resposta da API:');
      console.log('   Status:', addKeyResponse.data.success ? 'Sucesso' : 'Erro');
      console.log('   Diagn√≥stico ID:', addKeyResponse.data.diagnostic?.id);
      console.log('   Status Geral:', addKeyResponse.data.diagnostic?.status);
      console.log('   Taxa de Sucesso:', addKeyResponse.data.diagnostic?.successRate + '%');
      console.log('   Tempo de Execu√ß√£o:', addKeyResponse.data.diagnostic?.executionTime + 'ms');
      console.log('   Problemas Cr√≠ticos:', addKeyResponse.data.diagnostic?.criticalIssues?.length || 0);

    } catch (error) {
      console.log('‚ùå Erro ao adicionar chave:', error.response?.data?.error || error.message);
    }

    // 4. Consultar hist√≥rico de diagn√≥sticos
    console.log('');
    console.log('4Ô∏è‚É£ Consultando hist√≥rico de diagn√≥sticos...');
    try {
      const historyResponse = await axios.get(`${BASE_URL}/api/users/${testApiKey.userId}/diagnostics`);
      
      if (historyResponse.data.success && historyResponse.data.data.length > 0) {
        console.log('‚úÖ Hist√≥rico encontrado:');
        historyResponse.data.data.slice(0, 3).forEach((diagnostic, index) => {
          console.log(`   ${index + 1}. ID: ${diagnostic.diagnostic_id}`);
          console.log(`      Status: ${diagnostic.overall_status}`);
          console.log(`      Taxa: ${diagnostic.success_rate}%`);
          console.log(`      Data: ${new Date(diagnostic.created_at).toLocaleString('pt-BR')}`);
        });
      } else {
        console.log('üìã Nenhum hist√≥rico encontrado ainda');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao consultar hist√≥rico:', error.response?.data?.error || error.message);
    }

    // 5. Executar diagn√≥stico manual
    console.log('');
    console.log('5Ô∏è‚É£ Executando diagn√≥stico manual...');
    try {
      const manualDiagnostic = await axios.post(
        `${BASE_URL}/api/users/${testApiKey.userId}/diagnostics/run`,
        {
          apiKey: testApiKey.apiKey,
          apiSecret: testApiKey.apiSecret,
          environment: testApiKey.environment
        }
      );

      if (manualDiagnostic.data.success) {
        const result = manualDiagnostic.data.data;
        console.log('‚úÖ Diagn√≥stico manual executado:');
        console.log('   Status:', result.overall.status);
        console.log('   Taxa de Sucesso:', result.overall.successRate + '%');
        console.log('   Conectividade:', result.results.connectivity.success ? '‚úÖ' : '‚ùå');
        console.log('   Autentica√ß√£o:', result.results.authentication.success ? '‚úÖ' : '‚ùå');
        console.log('   Permiss√µes:', result.results.permissions.success ? '‚úÖ' : '‚ùå');
        console.log('   Saldos:', result.results.balance.success ? '‚úÖ' : '‚ùå');
        console.log('   Trading:', result.results.trading.success ? '‚úÖ' : '‚ùå');
        console.log('   Dados de Mercado:', result.results.marketData.success ? '‚úÖ' : '‚ùå');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Diagn√≥stico manual:', error.response?.data?.error || error.message);
    }

    // 6. Dashboard de monitoramento
    console.log('');
    console.log('6Ô∏è‚É£ Consultando dashboard de monitoramento...');
    try {
      const dashboardResponse = await axios.get(`${BASE_URL}/api/monitoring/dashboard`);
      
      if (dashboardResponse.data.success) {
        const summary = dashboardResponse.data.data.summary;
        console.log('‚úÖ Dashboard:');
        console.log(`   Usu√°rios Ativos: ${summary.activeUsers}`);
        console.log(`   Total de Verifica√ß√µes: ${summary.totalChecks}`);
        console.log(`   Taxa M√©dia de Sucesso: ${summary.avgSuccessRate?.toFixed(1)}%`);
        console.log(`   Contas Saud√°veis: ${summary.healthyAccounts}`);
        console.log(`   Contas com Problemas: ${summary.problematicAccounts}`);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Dashboard:', error.response?.data?.error || error.message);
    }

    // 7. Configura√ß√µes de monitoramento
    console.log('');
    console.log('7Ô∏è‚É£ Verificando configura√ß√µes de monitoramento...');
    try {
      const settingsResponse = await axios.get(`${BASE_URL}/api/users/${testApiKey.userId}/monitoring-settings`);
      
      if (settingsResponse.data.success) {
        const settings = settingsResponse.data.data;
        console.log('‚úÖ Configura√ß√µes:');
        console.log(`   Monitoramento Ativo: ${settings.monitoring_enabled ? 'Sim' : 'N√£o'}`);
        console.log(`   Intervalo de Verifica√ß√£o: ${settings.health_check_interval_minutes} min`);
        console.log(`   Alertas por Email: ${settings.email_alerts ? 'Ativo' : 'Inativo'}`);
        console.log(`   Limite de Taxa de Sucesso: ${settings.alert_threshold_success_rate}%`);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Configura√ß√µes:', error.response?.data?.error || error.message);
    }

    console.log('');
    console.log('üéâ DEMONSTRA√á√ÉO CONCLU√çDA!');
    console.log('=====================================');
    console.log('‚úÖ Sistema de monitoramento autom√°tico 100% integrado');
    console.log('üîî Diagn√≥sticos autom√°ticos funcionando para novas chaves');
    console.log('üìä Dashboard e APIs de monitoramento operacionais');
    console.log('‚öôÔ∏è Configura√ß√µes personaliz√°veis por usu√°rio');
    console.log('');
    console.log('üìã PR√ìXIMOS PASSOS:');
    console.log('1. Integre as rotas nos formul√°rios do frontend');
    console.log('2. Configure alertas por email/webhook');
    console.log('3. Monitore atrav√©s do dashboard em tempo real');
    console.log('4. Todas as novas chaves API ter√£o diagn√≥stico autom√°tico!');

  } catch (error) {
    console.error('‚ùå Erro na demonstra√ß√£o:', error.message);
    if (error.code === 'ECONNREFUSED') {
      console.log('üí° Certifique-se de que o app.js est√° rodando em http://localhost:3000');
    }
  }
}

if (require.main === module) {
  demonstrateIntegratedSystem();
}

module.exports = demonstrateIntegratedSystem;
