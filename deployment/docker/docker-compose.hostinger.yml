# ðŸ‡±ðŸ‡¹ COINBITCLUB ENTERPRISE - DOCKER COMPOSE HOSTINGER VPS
# ============================================================================
# Deploy otimizado para servidor Hostinger LituÃ¢nia
# VPS: 31.97.72.77 | Vilnius | 32GB RAM | 8 vCPU
# Data: 2025-09-03
# ============================================================================

version: '3.8'

services:
  # ============================================================================
  # NGINX LOAD BALANCER & SSL TERMINATION
  # ============================================================================
  nginx:
    image: nginx:alpine
    container_name: coinbitclub-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    networks:
      - coinbitclub-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # ============================================================================
  # COINBITCLUB ENTERPRISE APPLICATION
  # ============================================================================
  app:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: coinbitclub-app
    restart: unless-stopped
    environment:
      # Sistema
      - NODE_ENV=production
      - TZ=Europe/Vilnius
      - PORT=3000
      
      # Database
      - DATABASE_URL=postgresql://coinbitclub_user:${POSTGRES_PASSWORD}@postgres:5432/coinbitclub_enterprise
      - DB_POOL_MIN=10
      - DB_POOL_MAX=50
      
      # Redis
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      
      # JWT & Security
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      
      # APIs ProduÃ§Ã£o
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_SECRET_KEY=${BINANCE_SECRET_KEY}
      - BINANCE_TESTNET=false
      - BYBIT_API_KEY=${BYBIT_API_KEY}
      - BYBIT_SECRET_KEY=${BYBIT_SECRET_KEY}
      - BYBIT_TESTNET=false
      
      # Stripe
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      
      # OpenAI
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      
      # TradingView
      - TRADINGVIEW_WEBHOOK_SECRET=${TRADINGVIEW_WEBHOOK_SECRET}
      
      # NotificaÃ§Ãµes
      - SMTP_HOST=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      
      # Performance
      - NODE_OPTIONS=--max-old-space-size=4096
      - UV_THREADPOOL_SIZE=16
      
    volumes:
      - ./logs/app:/app/logs
      - ./backups:/app/backups
    networks:
      - coinbitclub-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/enterprise/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 6G
          cpus: '4'
        reservations:
          memory: 2G
          cpus: '2'

  # ============================================================================
  # POSTGRESQL DATABASE MASTER
  # ============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: coinbitclub-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=coinbitclub_enterprise
      - POSTGRES_USER=coinbitclub_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --encoding=UTF8 --locale=en_US.UTF8
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./config/postgres/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro
      - ./scripts/database/complete-database-schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./backups/postgres:/var/backups
    ports:
      - "5432:5432"
    networks:
      - coinbitclub-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U coinbitclub_user -d coinbitclub_enterprise"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4'
        reservations:
          memory: 4G
          cpus: '2'

  # ============================================================================
  # REDIS CACHE & SESSION STORE
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: coinbitclub-redis
    restart: unless-stopped
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - coinbitclub-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'
        reservations:
          memory: 1G
          cpus: '0.5'

  # ============================================================================
  # MONITORING - PROMETHEUS
  # ============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: coinbitclub-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - coinbitclub-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'
        reservations:
          memory: 1G
          cpus: '0.5'

  # ============================================================================
  # MONITORING - GRAFANA
  # ============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: coinbitclub-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    networks:
      - coinbitclub-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 512M
          cpus: '0.5'

  # ============================================================================
  # BACKUP SERVICE
  # ============================================================================
  backup:
    build:
      context: ./config/backup
      dockerfile: Dockerfile
    container_name: coinbitclub-backup
    restart: unless-stopped
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=coinbitclub_enterprise
      - POSTGRES_USER=coinbitclub_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - BACKUP_RETENTION_DAYS=30
      - S3_BUCKET=${AWS_S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=eu-north-1
    volumes:
      - ./backups:/backups
      - postgres_data:/var/lib/postgresql/data:ro
      - redis_data:/var/lib/redis/data:ro
    networks:
      - coinbitclub-network
    depends_on:
      - postgres
      - redis
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

# ============================================================================
# VOLUMES PERSISTENTES
# ============================================================================
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/coinbitclub/postgres
  
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/coinbitclub/redis
  
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/coinbitclub/prometheus
  
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/coinbitclub/grafana

# ============================================================================
# NETWORK CONFIGURATION
# ============================================================================
networks:
  coinbitclub-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
