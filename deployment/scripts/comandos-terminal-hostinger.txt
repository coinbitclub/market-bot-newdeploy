# COMANDOS PARA COPIAR E COLAR NO TERMINAL HOSTINGER
# ===================================================

# 🚀 MÉTODO 1: DEPLOY DIRETO DO GITHUB (RECOMENDADO)
# Este método puxa o código diretamente do repositório GitHub

# Comando único para deploy completo do GitHub:
curl -sSL https://raw.githubusercontent.com/coinbitclub/market-bot-newdeploy/main/deployment/scripts/deploy-github.sh | bash

# ===================================================
# 🔧 MÉTODO 2: PASSO A PASSO COM GITHUB
# ===================================================

# Instalar dependências
apt update && apt install -y git curl

# Instalar Docker
curl -sSL https://get.docker.com | sh && systemctl start docker

# Clonar repositório
cd /opt
git clone https://github.com/coinbitclub/market-bot-newdeploy.git coinbitclub-enterprise
cd coinbitclub-enterprise

# Executar deploy
chmod +x deployment/scripts/deploy-hostinger-docker.sh
./deployment/scripts/deploy-hostinger-docker.sh

# ===================================================
# �️ MÉTODO 3: DEPLOY SIMPLES SEM GITHUB (FALLBACK)
# ===================================================

# Instalar Docker apenas
curl -sSL https://get.docker.com | sh && systemctl start docker

# Criar diretório
mkdir -p /opt/coinbitclub && cd /opt/coinbitclub

# Deploy com um comando só
docker run -d -p 80:3000 --name coinbitclub --restart unless-stopped node:18-alpine sh -c '
npm init -y && 
npm install express cors helmet compression morgan && 
cat > server.js << "SERVEREOF"
const express = require("express");
const cors = require("cors");
const helmet = require("helmet");
const compression = require("compression");
const morgan = require("morgan");

const app = express();
const PORT = 3000;

app.use(helmet({ contentSecurityPolicy: false }));
app.use(compression());
app.use(cors());
app.use(morgan("combined"));
app.use(express.json({ limit: "10mb" }));

// Health check
app.get("/health", (req, res) => {
    res.json({ 
        status: "OK", 
        version: "6.0.0",
        timestamp: new Date().toISOString(),
        uptime: process.uptime()
    });
});

// Homepage com dashboard
app.get("/", (req, res) => {
    const html = `<!DOCTYPE html>
<html>
<head>
    <title>CoinBitClub Enterprise v6.0.0</title>
    <style>
        body { font-family: Arial; background: linear-gradient(135deg, #667eea, #764ba2); color: white; padding: 20px; }
        .container { max-width: 800px; margin: 0 auto; text-align: center; }
        .card { background: rgba(255,255,255,0.1); padding: 20px; margin: 20px 0; border-radius: 10px; }
        .endpoint { background: rgba(0,0,0,0.3); padding: 10px; border-radius: 5px; font-family: monospace; margin: 10px 0; }
        .status { padding: 10px 20px; background: #4CAF50; border-radius: 20px; }
    </style>
</head>
<body>
    <div class="container">
        <h1>🚀 CoinBitClub Enterprise v6.0.0</h1>
        <div class="status">🟢 ONLINE</div>
        
        <div class="card">
            <h3>📡 TradingView Webhook</h3>
            <div class="endpoint">http://31.97.72.77/api/enterprise/trading/webhooks/signal</div>
            <p>Use esta URL no TradingView para enviar sinais</p>
        </div>
        
        <div class="card">
            <h3>🔍 Endpoints Disponíveis</h3>
            <div class="endpoint">GET /health</div>
            <div class="endpoint">GET /api/enterprise/status</div>
            <div class="endpoint">POST /api/enterprise/trading/webhooks/signal</div>
        </div>
        
        <div class="card">
            <h3>📊 Sistema</h3>
            <p>Uptime: ${Math.floor(process.uptime())}s</p>
            <p>Versão: 6.0.0</p>
            <p>Status: Operacional</p>
        </div>
    </div>
</body>
</html>`;
    res.send(html);
});

// TradingView Webhook - ENDPOINT PRINCIPAL
app.post("/api/enterprise/trading/webhooks/signal", (req, res) => {
    console.log("📡 TradingView Signal:", JSON.stringify(req.body, null, 2));
    res.json({
        success: true,
        message: "Signal received successfully",
        timestamp: new Date().toISOString(),
        data: req.body
    });
});

// Status API
app.get("/api/enterprise/status", (req, res) => {
    res.json({
        service: "CoinBitClub Enterprise",
        version: "6.0.0",
        status: "operational",
        timestamp: new Date().toISOString(),
        uptime: process.uptime(),
        webhook_url: "http://31.97.72.77/api/enterprise/trading/webhooks/signal"
    });
});

app.listen(PORT, "0.0.0.0", () => {
    console.log("🚀 CoinBitClub Enterprise v6.0.0 running on port", PORT);
    console.log("📡 Webhook: http://31.97.72.77/api/enterprise/trading/webhooks/signal");
});
SERVEREOF
node server.js
'

# Verificar se está funcionando
sleep 10
curl http://localhost/health

echo "✅ Deploy concluído!"
echo "🌐 Aplicação: http://31.97.72.77"
echo "📡 Webhook: http://31.97.72.77/api/enterprise/trading/webhooks/signal"

# ===================================================
# 📊 COMANDOS DE GERENCIAMENTO:

# Para ver logs em tempo real:
docker logs -f coinbitclub

# Para parar a aplicação:
docker stop coinbitclub

# Para reiniciar:
docker restart coinbitclub

# Para remover completamente:
docker stop coinbitclub && docker rm coinbitclub

# Para atualizar com código novo do GitHub:
cd /opt/coinbitclub-enterprise && git pull && docker-compose restart

# ===================================================
# 🔗 URLS IMPORTANTES APÓS DEPLOY:

# 🌐 Aplicação: http://31.97.72.77
# 📡 TradingView Webhook: http://31.97.72.77/api/enterprise/trading/webhooks/signal
# 🔍 Health Check: http://31.97.72.77/health
# 📊 Status API: http://31.97.72.77/api/enterprise/status
