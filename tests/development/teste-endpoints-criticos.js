#!/usr/bin/env node
/**
 * üî• TESTE R√ÅPIDO DE ENDPOINTS CR√çTICOS
 * =====================================
 * 
 * Testa os endpoints mais importantes do sistema
 */

console.log('üî• TESTE R√ÅPIDO DE ENDPOINTS CR√çTICOS');
console.log('====================================');

const https = require('https');

class CriticalEndpointTester {
    constructor() {
        this.baseUrl = 'coinbitclub-market-bot-backend-production.up.railway.app';
        this.criticalEndpoints = [
            // B√°sicos e Sa√∫de
            { path: '/health', method: 'GET', priority: 'ALTA', description: 'Health check do sistema' },
            { path: '/', method: 'GET', priority: 'ALTA', description: 'P√°gina inicial' },
            { path: '/api/system/status', method: 'GET', priority: 'ALTA', description: 'Status do sistema' },
            { path: '/api/current-mode', method: 'GET', priority: 'ALTA', description: 'Modo atual (testnet/h√≠brido)' },
            
            // Webhooks (cr√≠ticos para trading)
            { path: '/webhook', method: 'GET', priority: 'ALTA', description: 'Info webhook (GET para teste)' },
            { path: '/api/webhooks/signal', method: 'GET', priority: 'ALTA', description: 'Webhook sinais (GET para teste)' },
            
            // Dashboard
            { path: '/dashboard', method: 'GET', priority: 'M√âDIA', description: 'Dashboard principal' },
            { path: '/api/dashboard/summary', method: 'GET', priority: 'M√âDIA', description: 'Resumo dashboard' },
            
            // Trading
            { path: '/api/trading/status', method: 'GET', priority: 'M√âDIA', description: 'Status trading' },
            { path: '/api/trade/status', method: 'GET', priority: 'M√âDIA', description: 'Status trades' },
            
            // Exchanges
            { path: '/api/exchanges/status', method: 'GET', priority: 'M√âDIA', description: 'Status exchanges' },
            { path: '/api/exchanges/health', method: 'GET', priority: 'M√âDIA', description: 'Sa√∫de exchanges' },
            
            // Valida√ß√£o
            { path: '/api/validation/status', method: 'GET', priority: 'M√âDIA', description: 'Status valida√ß√£o' },
            
            // Usu√°rios
            { path: '/api/users', method: 'GET', priority: 'BAIXA', description: 'Lista usu√°rios' },
            
            // Ativa√ß√£o (espec√≠fico do projeto)
            { path: '/ativar-chaves-reais', method: 'GET', priority: 'BAIXA', description: 'Ativar chaves reais' },
        ];
    }

    // Fazer requisi√ß√£o HTTP
    makeRequest(path, method = 'GET') {
        return new Promise((resolve) => {
            const options = {
                hostname: this.baseUrl,
                port: 443,
                path: path,
                method: method,
                timeout: 8000,
                headers: {
                    'User-Agent': 'CriticalTester/1.0',
                    'Accept': 'application/json, text/html, */*'
                }
            };

            const req = https.request(options, (res) => {
                let data = '';
                res.on('data', (chunk) => {
                    data += chunk;
                });
                res.on('end', () => {
                    resolve({
                        statusCode: res.statusCode,
                        data: data.substring(0, 200),
                        headers: res.headers,
                        contentType: res.headers['content-type'] || 'unknown',
                        size: data.length
                    });
                });
            });

            req.on('error', (err) => {
                resolve({
                    statusCode: 0,
                    error: err.message,
                    data: null
                });
            });

            req.on('timeout', () => {
                req.destroy();
                resolve({
                    statusCode: 0,
                    error: 'Timeout',
                    data: null
                });
            });

            req.end();
        });
    }

    // Testar endpoint cr√≠tico
    async testCriticalEndpoint(endpoint) {
        console.log(`\nüîç Testando: ${endpoint.method} ${endpoint.path}`);
        console.log(`   üìù ${endpoint.description}`);
        console.log(`   üéØ Prioridade: ${endpoint.priority}`);
        
        const startTime = Date.now();
        const result = await this.makeRequest(endpoint.path, endpoint.method);
        const duration = Date.now() - startTime;
        
        const success = result.statusCode >= 200 && result.statusCode < 500;
        const status = success ? '‚úÖ' : '‚ùå';
        
        console.log(`   ${status} Status: ${result.statusCode || 'ERROR'} | Tempo: ${duration}ms`);
        
        if (result.contentType) {
            console.log(`   üìÑ Tipo: ${result.contentType}`);
        }
        
        if (result.size) {
            console.log(`   üìä Tamanho: ${result.size} bytes`);
        }
        
        if (result.error) {
            console.log(`   üö´ Erro: ${result.error}`);
        } else if (result.data) {
            // Tentar detectar tipo de resposta
            let responseType = 'texto';
            if (result.data.includes('<!DOCTYPE') || result.data.includes('<html')) {
                responseType = 'HTML';
            } else if (result.data.includes('{') || result.data.includes('[')) {
                responseType = 'JSON';
            }
            console.log(`   üìã Resposta: ${responseType}`);
            
            // Preview da resposta
            const preview = result.data.replace(/\s+/g, ' ').substring(0, 80);
            console.log(`   üëÄ Preview: ${preview}...`);
        }
        
        return {
            ...endpoint,
            statusCode: result.statusCode,
            success: success,
            duration: duration,
            error: result.error,
            contentType: result.contentType,
            size: result.size,
            responseType: result.data ? (result.data.includes('{') ? 'JSON' : 'HTML') : 'NONE'
        };
    }

    // Testar todos os endpoints cr√≠ticos
    async testAllCritical() {
        console.log('\nüöÄ INICIANDO TESTES CR√çTICOS...');
        console.log('===============================');
        
        const results = [];
        const priorities = { 'ALTA': [], 'M√âDIA': [], 'BAIXA': [] };
        
        for (let i = 0; i < this.criticalEndpoints.length; i++) {
            const endpoint = this.criticalEndpoints[i];
            const result = await this.testCriticalEndpoint(endpoint);
            results.push(result);
            priorities[result.priority].push(result);
            
            // Delay entre requests
            await new Promise(resolve => setTimeout(resolve, 200));
        }
        
        return { results, priorities };
    }

    // Gerar relat√≥rio dos testes cr√≠ticos
    generateCriticalReport(testData) {
        console.log('\nüìä RELAT√ìRIO DE ENDPOINTS CR√çTICOS');
        console.log('==================================');
        
        const { results, priorities } = testData;
        
        let totalSuccess = 0;
        let totalError = 0;
        
        // Relat√≥rio por prioridade
        Object.keys(priorities).forEach(priority => {
            const endpoints = priorities[priority];
            if (endpoints.length === 0) return;
            
            const success = endpoints.filter(e => e.success).length;
            const error = endpoints.filter(e => !e.success).length;
            
            console.log(`\nüéØ PRIORIDADE ${priority}:`);
            console.log(`   üìä Total: ${endpoints.length} | ‚úÖ OK: ${success} | ‚ùå Erro: ${error}`);
            
            endpoints.forEach(endpoint => {
                const status = endpoint.success ? '‚úÖ' : '‚ùå';
                const statusCode = endpoint.statusCode || 'ERR';
                const duration = endpoint.duration || 0;
                console.log(`   ${status} ${endpoint.path.padEnd(30)} [${statusCode}] ${duration}ms`);
            });
            
            totalSuccess += success;
            totalError += error;
        });
        
        // Resumo geral
        const total = totalSuccess + totalError;
        const successRate = total > 0 ? Math.round(totalSuccess / total * 100) : 0;
        
        console.log('\nüéØ RESUMO CR√çTICO:');
        console.log('==================');
        console.log(`üìä Total testado: ${total}`);
        console.log(`‚úÖ Funcionando: ${totalSuccess} (${successRate}%)`);
        console.log(`‚ùå Com problema: ${totalError}`);
        
        // Status do sistema
        if (successRate >= 90) {
            console.log('\nüéâ SISTEMA CR√çTICO EM EXCELENTE ESTADO!');
        } else if (successRate >= 70) {
            console.log('\n‚úÖ SISTEMA CR√çTICO EM BOM ESTADO');
        } else if (successRate >= 50) {
            console.log('\n‚ö†Ô∏è SISTEMA CR√çTICO COM PROBLEMAS');
        } else {
            console.log('\nüö® SISTEMA CR√çTICO COM FALHAS GRAVES');
        }
        
        // Endpoints problem√°ticos
        const problematicos = results.filter(r => !r.success);
        if (problematicos.length > 0) {
            console.log('\nüö® ENDPOINTS PROBLEM√ÅTICOS:');
            problematicos.forEach(endpoint => {
                console.log(`‚ùå ${endpoint.path} - ${endpoint.error || 'Status ' + endpoint.statusCode}`);
            });
        }
        
        return {
            total,
            successful: totalSuccess,
            errors: totalError,
            successRate,
            problematicos
        };
    }

    // Executar teste cr√≠tico completo
    async runCriticalTest() {
        console.log('üî• INICIANDO TESTE CR√çTICO DE ENDPOINTS...');
        console.log('=========================================');
        console.log(`üåê URL Base: https://${this.baseUrl}`);
        
        const testData = await this.testAllCritical();
        const summary = this.generateCriticalReport(testData);
        
        console.log('\nüéØ TESTE CR√çTICO CONCLU√çDO!');
        console.log('===========================');
        
        return summary;
    }
}

// Executar teste cr√≠tico
if (require.main === module) {
    const tester = new CriticalEndpointTester();
    tester.runCriticalTest().then((summary) => {
        if (summary.successRate >= 70) {
            console.log('\nüéâ ENDPOINTS CR√çTICOS OK!');
            process.exit(0);
        } else {
            console.log('\n‚ö†Ô∏è PROBLEMAS NOS ENDPOINTS CR√çTICOS');
            process.exit(1);
        }
    }).catch(error => {
        console.error('‚ùå Erro no teste cr√≠tico:', error.message);
        process.exit(1);
    });
}

module.exports = CriticalEndpointTester;
