const { Pool } = require('pg');
const axios = require('axios');

// Configura√ß√£o do banco de dados
const pool = new Pool({
    connectionString: process.env.DATABASE_URL || 'process.env.DATABASE_URL',
    ssl: { rejectUnauthorized: false },
    connectionTimeoutMillis: 15000,
    idleTimeoutMillis: 30000
});

async function testePipelineCompleto() {
    console.log('\nüöÄ TESTE PIPELINE COMPLETO - TRADINGVIEW ‚Üí OPERA√á√ÉO FECHADA');
    console.log('============================================================');
    
    try {
        const client = await pool.connect();
        
        // 1. VERIFICAR VARI√ÅVEIS DE AMBIENTE DO RAILWAY
        console.log('\nüîë 1. VERIFICA√á√ÉO DAS CHAVES EXTERNAS (RAILWAY):');
        console.log('===============================================');
        
        const chaves = {
            'OPENAI_API_KEY"YOUR_OPENAI_API_KEY"TWILIO_ACCOUNT_SID': process.env.TWILIO_ACCOUNT_SID,
            'TWILIO_AUTH_TOKEN': process.env.TWILIO_AUTH_TOKEN,
            'BINANCE_API_KEY"YOUR_BINANCE_API_KEY"BINANCE_SECRET_KEY': process.env.BINANCE_SECRET_KEY,
            'BYBIT_API_KEYYOUR_API_KEY_HEREBYBIT_SECRET_KEY': process.env.BYBIT_SECRET_KEY,
            'STRIPE_SECRET_KEY': process.env.STRIPE_SECRET_KEY,
            'STRIPE_PUBLISHABLE_KEY': process.env.STRIPE_PUBLISHABLE_KEY,
            'DATABASE_URL"process.env.DATABASE_URL"...' + valor.substring(valor.length - 4) : 
                    valor.substring(0, 4) + '...';
                console.log(`   ‚úÖ ${nome}: ${mascarado} (${valor.length} chars)`);
            } else {
                console.log(`   ‚ùå ${nome}: N√ÉO CONFIGURADA`);
            }
        }
        
        // 2. TESTAR CONECTIVIDADE DAS APIS EXTERNAS
        console.log('\nüåê 2. TESTE DE CONECTIVIDADE DAS APIS:');
        console.log('====================================');
        
        // Teste OpenAI
        if (process.env.OPENAI_API_KEY) {
            try {
                const openaiTest = await axios.post('https://api.openai.com/v1/models', {}, {
                    headers: { 'Authorization': `Bearer ${process.env.OPENAI_API_KEY}` },
                    timeout: 5000
                });
                console.log('   ‚úÖ OpenAI: Conectado e ativo');
            } catch (error) {
                console.log(`   ‚ùå OpenAI: Erro - ${error.response?.status || error.message}`);
            }
        }
        
        // Teste Binance
        if (process.env.BINANCE_API_KEY) {
            try {
                const binanceTest = await axios.get('https://api.binance.com/api/v3/account', {
                    headers: { 'X-MBX-APIKEY': process.env.BINANCE_API_KEY },
                    timeout: 5000
                });
                console.log('   ‚úÖ Binance: API Key v√°lida e ativa');
            } catch (error) {
                if (error.response?.status === 401) {
                    console.log('   ‚ö†Ô∏è  Binance: API Key configurada mas requer assinatura para account info');
                } else {
                    console.log(`   ‚ùå Binance: Erro - ${error.response?.status || error.message}`);
                }
            }
        }
        
        // Teste ByBit
        if (process.env.BYBIT_API_KEY) {
            try {
                const bybitTest = await axios.get('https://api.bybit.com/v5/market/time', {
                    timeout: 5000
                });
                console.log('   ‚úÖ ByBit: API acess√≠vel (endpoint p√∫blico)');
            } catch (error) {
                console.log(`   ‚ùå ByBit: Erro - ${error.message}`);
            }
        }
        
        // 3. VERIFICAR RECEBIMENTO DE SINAIS DO TRADINGVIEW
        console.log('\nüì° 3. AN√ÅLISE DO RECEBIMENTO DE SINAIS:');
        console.log('=====================================');
        
        const sinaisRecentes = await client.query(`
            SELECT 
                id, symbol, action, price, created_at,
                raw_data->>'ticker' as ticker_original,
                raw_data->>'signal' as signal_original
            FROM signals 
            WHERE created_at >= NOW() - INTERVAL '24 hours'
            ORDER BY created_at DESC 
            LIMIT 5
        `);
        
        if (sinaisRecentes.rows.length === 0) {
            console.log('   ‚ùå PROBLEMA: Nenhum sinal recebido nas √∫ltimas 24h');
            console.log('   üîç Verificar: Webhook do TradingView configurado?');
            console.log('   üîç Verificar: Servidor Railway ativo?');
        } else {
            console.log(`   ‚úÖ ${sinaisRecentes.rows.length} sinais recebidos nas √∫ltimas 24h`);
            sinaisRecentes.rows.forEach((sinal, i) => {
                const status = sinal.symbol !== 'UNKNOWN' ? '‚úÖ' : '‚ùå';
                console.log(`   ${i+1}. ${status} ${sinal.symbol} | ${sinal.action} | ${sinal.created_at}`);
            });
        }
        
        // 4. VERIFICAR PROCESSAMENTO E GERA√á√ÉO DE EXECU√á√ïES
        console.log('\n‚öôÔ∏è 4. AN√ÅLISE DO PROCESSAMENTO DE SINAIS:');
        console.log('========================================');
        
        const execucoes = await client.query(`
            SELECT 
                e.id, e.user_id, e.symbol, e.side, e.status, e.created_at,
                s.symbol as signal_symbol
            FROM executions e
            LEFT JOIN signals s ON e.signal_id = s.id
            WHERE e.created_at >= NOW() - INTERVAL '24 hours'
            ORDER BY e.created_at DESC
            LIMIT 10
        `);
        
        if (execucoes.rows.length === 0) {
            console.log('   ‚ùå PROBLEMA: Nenhuma execu√ß√£o gerada nas √∫ltimas 24h');
            console.log('   üîç Verificar: Sistema de processamento ativo?');
            console.log('   üîç Verificar: Usu√°rios com auto-trading habilitado?');
        } else {
            console.log(`   ‚úÖ ${execucoes.rows.length} execu√ß√µes geradas nas √∫ltimas 24h`);
            execucoes.rows.forEach((exec, i) => {
                console.log(`   ${i+1}. User ${exec.user_id} | ${exec.symbol} | ${exec.side} | ${exec.status}`);
            });
        }
        
        // 5. VERIFICAR CONEX√ÉO COM EXCHANGES E ORDENS REAIS
        console.log('\nüí± 5. AN√ÅLISE DE ORDENS NAS EXCHANGES:');
        console.log('====================================');
        
        const ordensReais = await client.query(`
            SELECT 
                id, user_id, symbol, side, status, exchange, 
                order_id, created_at, updated_at
            FROM orders 
            WHERE created_at >= NOW() - INTERVAL '24 hours'
            ORDER BY created_at DESC
            LIMIT 10
        `);
        
        if (ordensReais.rows.length === 0) {
            console.log('   ‚ùå PROBLEMA: Nenhuma ordem enviada para exchanges nas √∫ltimas 24h');
            console.log('   üîç Verificar: Conex√£o com Binance/ByBit ativa?');
            console.log('   üîç Verificar: Usu√°rios com saldo dispon√≠vel?');
        } else {
            console.log(`   ‚úÖ ${ordensReais.rows.length} ordens enviadas nas √∫ltimas 24h`);
            ordensReais.rows.forEach((ordem, i) => {
                console.log(`   ${i+1}. ${ordem.exchange} | ${ordem.symbol} | ${ordem.side} | ${ordem.status}`);
            });
        }
        
        // 6. VERIFICAR FECHAMENTO DE OPERA√á√ïES
        console.log('\nüîÑ 6. AN√ÅLISE DE FECHAMENTO DE OPERA√á√ïES:');
        console.log('=======================================');
        
        const operacoesFechadas = await client.query(`
            SELECT 
                COUNT(*) as total_positions,
                COUNT(*) FILTER (WHERE status = 'open') as abertas,
                COUNT(*) FILTER (WHERE status = 'closed') as fechadas,
                COUNT(*) FILTER (WHERE status = 'cancelled') as canceladas
            FROM positions 
            WHERE created_at >= NOW() - INTERVAL '7 days'
        `);
        
        const stats = operacoesFechadas.rows[0];
        console.log(`   üìä Posi√ß√µes (√∫ltimos 7 dias):`);
        console.log(`      ‚Ä¢ Total: ${stats.total_positions}`);
        console.log(`      ‚Ä¢ Abertas: ${stats.abertas}`);
        console.log(`      ‚Ä¢ Fechadas: ${stats.fechadas}`);
        console.log(`      ‚Ä¢ Canceladas: ${stats.canceladas}`);
        
        if (parseInt(stats.fechadas) > 0) {
            console.log('   ‚úÖ Sistema est√° fechando opera√ß√µes automaticamente');
        } else if (parseInt(stats.abertas) > 0) {
            console.log('   ‚ö†Ô∏è  Opera√ß√µes abertas mas nenhuma fechada ainda');
        } else {
            console.log('   ‚ùå Nenhuma opera√ß√£o processada');
        }
        
        // 7. VERIFICAR NOTIFICA√á√ïES E ALERTAS
        console.log('\nüì± 7. TESTE DO SISTEMA DE NOTIFICA√á√ïES:');
        console.log('======================================');
        
        if (process.env.TWILIO_ACCOUNT_SID && process.env.TWILIO_AUTH_TOKEN) {
            try {
                const twilioTest = await axios.get(
                    `https://api.twilio.com/2010-04-01/Accounts/${process.env.TWILIO_ACCOUNT_SID}.json`,
                    {
                        auth: {
                            username: process.env.TWILIO_ACCOUNT_SID,
                            password: process.env.TWILIO_AUTH_TOKEN
                        },
                        timeout: 5000
                    }
                );
                console.log('   ‚úÖ Twilio: Conectado e configurado');
            } catch (error) {
                console.log(`   ‚ùå Twilio: Erro - ${error.response?.status || error.message}`);
            }
        } else {
            console.log('   ‚ö†Ô∏è  Twilio: Chaves n√£o configuradas');
        }
        
        // 8. VERIFICAR USU√ÅRIOS ATIVOS E CONFIGURA√á√ïES
        console.log('\nüë• 8. AN√ÅLISE DE USU√ÅRIOS ATIVOS:');
        console.log('================================');
        
        const usuariosAtivos = await client.query(`
            SELECT 
                COUNT(*) as total_users,
                COUNT(*) FILTER (WHERE auto_trading = true) as auto_trading_enabled,
                COUNT(*) FILTER (WHERE balance > 0) as with_balance
            FROM users 
            WHERE status = 'active'
        `);
        
        const userStats = usuariosAtivos.rows[0];
        console.log(`   üë§ Usu√°rios ativos: ${userStats.total_users}`);
        console.log(`   ü§ñ Auto-trading habilitado: ${userStats.auto_trading_enabled}`);
        console.log(`   üí∞ Com saldo: ${userStats.with_balance}`);
        
        // 9. DIAGN√ìSTICO FINAL E GARGALOS
        console.log('\nüéØ 9. DIAGN√ìSTICO FINAL:');
        console.log('=======================');
        
        let problemas = [];
        let sucessos = [];
        
        // Verificar chaves cr√≠ticas
        const chavesCriticas = ['OPENAI_API_KEYYOUR_API_KEY_HEREBINANCE_API_KEYYOUR_API_KEY_HEREBYBIT_API_KEYYOUR_API_KEY_HERE‚úÖ Todas as chaves cr√≠ticas configuradas');
        } else {
            problemas.push(`‚ùå Chaves faltando: ${chavesCriticas.filter(c => !process.env[c]).join(', ')}`);
        }
        
        // Verificar pipeline
        if (sinaisRecentes.rows.length > 0) {
            sucessos.push('‚úÖ Recebendo sinais do TradingView');
        } else {
            problemas.push('‚ùå N√£o est√° recebendo sinais do TradingView');
        }
        
        if (execucoes.rows.length > 0) {
            sucessos.push('‚úÖ Gerando execu√ß√µes a partir dos sinais');
        } else {
            problemas.push('‚ùå N√£o est√° gerando execu√ß√µes');
        }
        
        if (ordensReais.rows.length > 0) {
            sucessos.push('‚úÖ Enviando ordens para exchanges');
        } else {
            problemas.push('‚ùå N√£o est√° enviando ordens para exchanges');
        }
        
        // Mostrar resultados
        console.log('\nüéâ SUCESSOS:');
        sucessos.forEach(sucesso => console.log(`   ${sucesso}`));
        
        if (problemas.length > 0) {
            console.log('\n‚ö†Ô∏è  PROBLEMAS ENCONTRADOS:');
            problemas.forEach(problema => console.log(`   ${problema}`));
        }
        
        // 10. PR√ìXIMOS PASSOS
        console.log('\nüìã 10. PR√ìXIMOS PASSOS RECOMENDADOS:');
        console.log('===================================');
        
        if (problemas.length === 0) {
            console.log('   üéâ SISTEMA FUNCIONANDO PERFEITAMENTE!');
            console.log('   ‚úÖ Pipeline completo operacional');
            console.log('   üîÑ Continuar monitoramento regular');
        } else {
            console.log('   üîß A√á√ïES NECESS√ÅRIAS:');
            if (sinaisRecentes.rows.length === 0) {
                console.log('   1. Verificar webhook TradingView');
                console.log('   2. Confirmar se servidor Railway est√° online');
            }
            if (execucoes.rows.length === 0) {
                console.log('   3. Ativar sistema de processamento de sinais');
                console.log('   4. Verificar usu√°rios com auto-trading habilitado');
            }
            if (ordensReais.rows.length === 0) {
                console.log('   5. Testar conex√£o com exchanges');
                console.log('   6. Verificar saldos dos usu√°rios');
            }
        }
        
        client.release();
        
    } catch (error) {
        console.error('‚ùå Erro no teste:', error.message);
    } finally {
        await pool.end();
    }
}

// Executar teste completo
testePipelineCompleto();
