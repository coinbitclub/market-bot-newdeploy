#!/usr/bin/env node

/**
 * üîß CORRE√á√ïES URGENTES - ATIVAR TRADING REAL
 * ===========================================
 * Corrigindo problemas identificados na an√°lise
 */

const fs = require('fs');

console.log(`
üîß ===================================================
   CORRE√á√ïES URGENTES PARA ATIVAR TRADING REAL
   Baseado na an√°lise de problemas identificados
===================================================
`);

class TradingRealFixer {
    async fixAll() {
        console.log('üöÄ Iniciando corre√ß√µes...\n');
        
        await this.fixEnvironmentVariables();
        await this.fixSignalProcessor();
        await this.createActivationScript();
        await this.generateInstructions();
        
        console.log('‚úÖ Todas as corre√ß√µes aplicadas!\n');
    }

    async fixEnvironmentVariables() {
        console.log('1Ô∏è‚É£ CORRIGINDO VARI√ÅVEIS DE AMBIENTE...');
        console.log('‚îÄ'.repeat(50));
        
        // Ler .env atual
        let envContent = '';
        if (fs.existsSync('.env')) {
            envContent = fs.readFileSync('.env', 'utf8');
        }
        
        // Adicionar/corrigir vari√°veis cr√≠ticas
        const criticalVars = {
            'ENABLE_REAL_TRADING': 'true',
            'NODE_ENV': 'production',
            'POSITION_SAFETY_ENABLED': 'true',
            'MANDATORY_STOP_LOSS': 'true',
            'MANDATORY_TAKE_PROFIT': 'true',
            'MAX_LEVERAGE': '10',
            'DEFAULT_LEVERAGE': '5'
        };
        
        let newEnvContent = envContent;
        
        Object.entries(criticalVars).forEach(([key, value]) => {
            const regex = new RegExp(`^${key}=.*$`, 'm');
            if (regex.test(newEnvContent)) {
                // Atualizar vari√°vel existente
                newEnvContent = newEnvContent.replace(regex, `${key}=${value}`);
                console.log(`  ‚úÖ Atualizado: ${key}=${value}`);
            } else {
                // Adicionar nova vari√°vel
                newEnvContent += `\n# TRADING REAL ATIVADO\n${key}=${value}\n`;
                console.log(`  ‚ûï Adicionado: ${key}=${value}`);
            }
        });
        
        // Salvar .env atualizado
        fs.writeFileSync('.env', newEnvContent);
        console.log('  üìù Arquivo .env atualizado com trading real ativado\n');
    }

    async fixSignalProcessor() {
        console.log('2Ô∏è‚É£ CORRIGINDO SIGNAL PROCESSOR...');
        console.log('‚îÄ'.repeat(50));
        
        try {
            // Ler app.js
            let appContent = fs.readFileSync('./app.js', 'utf8');
            
            // Verificar qual processor est√° sendo usado
            if (appContent.includes('const MultiUserSignalProcessor = require')) {
                console.log('  üîÑ Trocando MultiUserSignalProcessor por EnhancedSignalProcessorWithExecution...');
                
                // Substituir import
                appContent = appContent.replace(
                    /const MultiUserSignalProcessor = require\('\.\/multi-user-signal-processor\.js'\);/g,
                    "const EnhancedSignalProcessorWithExecution = require('./enhanced-signal-processor-with-execution.js');"
                );
                
                // Substituir instancia√ß√£o
                appContent = appContent.replace(
                    /this\.signalProcessor = new MultiUserSignalProcessor\(\);/g,
                    'this.signalProcessor = new EnhancedSignalProcessorWithExecution();'
                );
                
                // Adicionar coment√°rio explicativo
                const comment = `
        // üî• TRADING REAL ATIVADO - Usando EnhancedSignalProcessorWithExecution
        // Este processor executa opera√ß√µes REAIS quando ENABLE_REAL_TRADING=true`;
        
                appContent = appContent.replace(
                    'this.signalProcessor = new EnhancedSignalProcessorWithExecution();',
                    comment + '\n        this.signalProcessor = new EnhancedSignalProcessorWithExecution();'
                );
                
                // Salvar app.js corrigido
                fs.writeFileSync('./app.js', appContent);
                console.log('  ‚úÖ app.js atualizado para usar EnhancedSignalProcessorWithExecution');
                
            } else if (appContent.includes('process.env.API_KEY_HERE')) {
                console.log('  ‚úÖ app.js j√° est√° usando EnhancedSignalProcessorWithExecution');
            } else {
                console.log('  ‚ö†Ô∏è  Signal processor n√£o identificado no app.js');
            }
            
        } catch (error) {
            console.log(`  ‚ùå Erro ao corrigir app.js: ${error.message}`);
        }
        
        console.log('');
    }

    async createActivationScript() {
        console.log('3Ô∏è‚É£ CRIANDO SCRIPT DE ATIVA√á√ÉO...');
        console.log('‚îÄ'.repeat(50));
        
        const activationScript = `#!/usr/bin/env node

/**
 * üöÄ ATIVA√á√ÉO TRADING REAL - EXECU√á√ÉO IMEDIATA
 * ============================================
 * Script para ativar opera√ß√µes reais imediatamente
 */

const { Pool } = require('pg');
const EnhancedSignalProcessorWithExecution = require('./enhanced-signal-processor-with-execution.js');

console.log(\`
üöÄ ===================================================
   COINBITCLUB - ATIVANDO TRADING REAL
   Execu√ß√£o de opera√ß√µes reais ativada
===================================================
\`);

class TradingRealActivator {
    constructor() {
        this.pool = new Pool({
            connectionString: process.env.DATABASE_URL || 'process.env.DATABASE_URL',
            ssl: { rejectUnauthorized: false }
        });
        
        this.signalProcessor = new EnhancedSignalProcessorWithExecution();
    }

    async activate() {
        console.log('üîß Verificando configura√ß√µes...');
        
        // 1. Verificar vari√°vel cr√≠tica
        const tradingEnabled = process.env.ENABLE_REAL_TRADING === 'true';
        console.log(\`  ENABLE_REAL_TRADING: \${tradingEnabled ? '‚úÖ TRUE' : '‚ùå FALSE'}\`);
        
        if (!tradingEnabled) {
            console.log('‚ùå ENABLE_REAL_TRADING deve ser "true" para ativar trading real');
            console.log('üîß Configure no Railway: ENABLE_REAL_TRADING=true');
            return;
        }
        
        // 2. Verificar tabelas necess√°rias
        await this.setupTables();
        
        // 3. Testar signal processor
        await this.testSignalProcessor();
        
        // 4. Verificar chaves API dos usu√°rios
        await this.verifyUserAPIKeys();
        
        console.log(\`
üéâ ===================================================
   TRADING REAL ATIVADO E FUNCIONANDO!
===================================================

‚úÖ Sistema configurado para execu√ß√£o real
‚úÖ Signal processor operacional
‚úÖ Chaves API verificadas
‚úÖ Pronto para receber sinais do TradingView

üåê Webhook URL: https://coinbitclub-market-bot-production.up.railway.app/webhook
üìä Status: OPERACIONAL PARA TRADING REAL

üöÄ Pr√≥ximos sinais do TradingView ser√£o executados nas exchanges!
\`);
    }

    async setupTables() {
        console.log('üóÑÔ∏è  Configurando tabelas do banco...');
        
        try {
            await this.signalProcessor.createSignalsTable();
            console.log('  ‚úÖ Tabelas de sinais e execu√ß√µes configuradas');
        } catch (error) {
            console.log(\`  ‚ö†Ô∏è  Erro ao configurar tabelas: \${error.message}\`);
        }
    }

    async testSignalProcessor() {
        console.log('üß™ Testando signal processor...');
        
        try {
            // Teste com sinal simulado
            const testSignal = {
                symbol: 'BTCUSDT',
                action: 'BUY',
                price: 45000,
                leverage: 5,
                quantity: 0.001,
                timestamp: new Date().toISOString(),
                source: 'TEST'
            };
            
            console.log('  üîÑ Processando sinal de teste...');
            const result = await this.signalProcessor.processSignal(testSignal);
            
            console.log(\`  ‚úÖ Signal processor funcionando: \${result.status}\`);
            
        } catch (error) {
            console.log(\`  ‚ùå Erro no signal processor: \${error.message}\`);
        }
    }

    async verifyUserAPIKeys() {
        console.log('üîë Verificando chaves API dos usu√°rios...');
        
        try {
            const keys = await this.pool.query(\`
                SELECT COUNT(*) as total,
                       COUNT(CASE WHEN is_active = true THEN 1 END) as active
                FROM user_api_keys 
                WHERE api_key IS NOT NULL
            \`);
            
            const stats = keys.rows[0];
            console.log(\`  üìä Total: \${stats.total}, Ativas: \${stats.active}\`);
            
            if (stats.active > 0) {
                console.log('  ‚úÖ Chaves API ativas encontradas');
            } else {
                console.log('  ‚ö†Ô∏è  Nenhuma chave API ativa - opera√ß√µes limitadas');
            }
            
        } catch (error) {
            console.log(\`  ‚ö†Ô∏è  Erro ao verificar chaves: \${error.message}\`);
        }
    }
}

// Executar ativa√ß√£o
if (require.main === module) {
    const activator = new TradingRealActivator();
    activator.activate().catch(console.error);
}

module.exports = TradingRealActivator;
`;
        
        fs.writeFileSync('./ativar-trading-real.js', activationScript);
        console.log('  ‚úÖ Script de ativa√ß√£o criado: ativar-trading-real.js\n');
    }

    async generateInstructions() {
        console.log('4Ô∏è‚É£ GERANDO INSTRU√á√ïES FINAIS...');
        console.log('‚îÄ'.repeat(50));
        
        const instructions = `# üöÄ INSTRU√á√ïES PARA ATIVAR TRADING REAL

## ‚úÖ **CORRE√á√ïES APLICADAS:**

### 1. **Vari√°veis de Ambiente Corrigidas:**
- ‚úÖ ENABLE_REAL_TRADING=true
- ‚úÖ NODE_ENV=production
- ‚úÖ POSITION_SAFETY_ENABLED=true
- ‚úÖ MANDATORY_STOP_LOSS=true
- ‚úÖ MANDATORY_TAKE_PROFIT=true

### 2. **Signal Processor Atualizado:**
- ‚úÖ Trocado para EnhancedSignalProcessorWithExecution
- ‚úÖ Capacidade de execu√ß√£o real ativada
- ‚úÖ Coment√°rios explicativos adicionados

### 3. **Script de Ativa√ß√£o Criado:**
- ‚úÖ ativar-trading-real.js
- ‚úÖ Testes automatizados
- ‚úÖ Verifica√ß√µes de sistema

## üîß **PR√ìXIMOS PASSOS OBRIGAT√ìRIOS:**

### 1. **Railway Dashboard:**
\`\`\`
1. Acessar: https://railway.app/dashboard
2. Selecionar projeto: coinbitclub-market-bot
3. Ir em "Variables"
4. Adicionar: ENABLE_REAL_TRADING=true
5. Clicar "Deploy"
\`\`\`

### 2. **Verificar Chaves API dos Usu√°rios:**
\`\`\`sql
-- Verificar chaves ativas
SELECT user_id, exchange, is_active 
FROM user_api_keys 
WHERE api_key IS NOT NULL;

-- Ativar chaves se necess√°rio
UPDATE user_api_keys 
SET is_active = true 
WHERE api_key IS NOT NULL;
\`\`\`

### 3. **Executar Ativa√ß√£o:**
\`\`\`bash
node ativar-trading-real.js
\`\`\`

### 4. **Testar Sistema:**
\`\`\`bash
# Verificar status
node monitor-chaves-api.js

# Testar webhook
curl -X POST https://coinbitclub-market-bot-production.up.railway.app/webhook \\
  -H "Content-Type: application/json" \\
  -d '{"symbol":"BTCUSDT","action":"BUY","price":45000}'
\`\`\`

## üéØ **RESULTADO ESPERADO:**

Ap√≥s aplicar essas corre√ß√µes:
- ‚úÖ Sistema processar√° sinais do TradingView
- ‚úÖ Executar√° opera√ß√µes REAIS nas exchanges
- ‚úÖ Registrar√° execu√ß√µes no banco de dados
- ‚úÖ Aplicar√° position safety e stop loss

## ‚ö†Ô∏è  **IMPORTANTE:**

1. **Trading Real:** Sistema executar√° opera√ß√µes com dinheiro real
2. **Testnet:** Comece com TESTNET para validar
3. **Monitoramento:** Acompanhe execu√ß√µes em tempo real
4. **Backup:** Mantenha backup das configura√ß√µes

## üìä **URLs IMPORTANTES:**

- **Webhook:** https://coinbitclub-market-bot-production.up.railway.app/webhook
- **Status:** https://coinbitclub-market-bot-production.up.railway.app/status
- **Dashboard:** https://coinbitclub-market-bot-production.up.railway.app/dashboard

üöÄ **SISTEMA PRONTO PARA TRADING REAL!**
`;
        
        fs.writeFileSync('./INSTRUCOES-TRADING-REAL.md', instructions);
        console.log('  ‚úÖ Instru√ß√µes salvas em: INSTRUCOES-TRADING-REAL.md\n');
    }
}

// Executar corre√ß√µes
async function runFixes() {
    try {
        const fixer = new TradingRealFixer();
        await fixer.fixAll();
        
        console.log(`
üéâ ===================================================
   CORRE√á√ïES CONCLU√çDAS COM SUCESSO!
===================================================

üìã O QUE FOI CORRIGIDO:
‚úÖ ENABLE_REAL_TRADING=true ativado no .env
‚úÖ Signal processor trocado para execu√ß√£o real
‚úÖ Script de ativa√ß√£o criado
‚úÖ Instru√ß√µes detalhadas geradas

üöÄ PR√ìXIMOS PASSOS:
1. Configure ENABLE_REAL_TRADING=true no Railway
2. Execute: node ativar-trading-real.js
3. Teste com sinais do TradingView
4. Monitore execu√ß√µes reais

‚ö†Ô∏è  ATEN√á√ÉO: Sistema agora executar√° opera√ß√µes REAIS!
`);
        
    } catch (error) {
        console.error('‚ùå Erro nas corre√ß√µes:', error.message);
    }
}

runFixes();
