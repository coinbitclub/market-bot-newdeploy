/**
 * üß™ ENTERPRISE SYSTEM TESTER - VALIDA√á√ÉO COMPLETA
 * =================================================
 * 
 * Suite de testes integrados para CoinBitClub Enterprise v6.0.0
 * Valida todos os componentes ap√≥s Fases 1 e 2
 * 
 * @author CoinBitClub Enterprise Team
 * @version 6.0.0 Testing Suite
 */

const axios = require('axios');
const fs = require('fs');
const path = require('path');

class EnterpriseSystemTester {
    constructor() {
        this.baseURL = process.env.TEST_BASE_URL || 'http://localhost:3333';
        this.results = {
            totalTests: 0,
            passedTests: 0,
            failedTests: 0,
            startTime: Date.now(),
            tests: []
        };
        
        console.log('üß™ Enterprise System Tester iniciado');
        console.log(`üéØ Target URL: ${this.baseURL}`);
    }

    /**
     * üîç TESTE 1: Componentes Core
     */
    async testCoreComponents() {
        console.log('\nüîç TESTE 1: VALIDA√á√ÉO DE COMPONENTES CORE');
        console.log('=========================================');
        
        const testResults = [];

        // Test 1.1: Sistema principal
        try {
            console.log('1.1 Testando sistema principal...');
            const response = await axios.get(`${this.baseURL}/`, { timeout: 10000 });
            
            if (response.status === 200 && response.data.system) {
                testResults.push({ test: 'Sistema Principal', status: 'PASS', details: response.data });
                console.log('  ‚úÖ Sistema principal respondendo');
            } else {
                throw new Error('Sistema principal n√£o respondeu adequadamente');
            }
        } catch (error) {
            testResults.push({ test: 'Sistema Principal', status: 'FAIL', error: error.message });
            console.log('  ‚ùå Sistema principal falhou:', error.message);
        }

        // Test 1.2: Health check
        try {
            console.log('1.2 Testando health check...');
            const response = await axios.get(`${this.baseURL}/health`, { timeout: 5000 });
            
            if (response.status === 200) {
                testResults.push({ test: 'Health Check', status: 'PASS', details: response.data });
                console.log('  ‚úÖ Health check OK');
            } else {
                throw new Error('Health check retornou status n√£o-200');
            }
        } catch (error) {
            testResults.push({ test: 'Health Check', status: 'FAIL', error: error.message });
            console.log('  ‚ùå Health check falhou:', error.message);
        }

        // Test 1.3: Enterprise API status
        try {
            console.log('1.3 Testando Enterprise API...');
            const response = await axios.get(`${this.baseURL}/api/enterprise/status`, { timeout: 5000 });
            
            if (response.status === 200) {
                testResults.push({ test: 'Enterprise API', status: 'PASS', details: response.data });
                console.log('  ‚úÖ Enterprise API respondendo');
            } else {
                throw new Error('Enterprise API n√£o dispon√≠vel');
            }
        } catch (error) {
            testResults.push({ test: 'Enterprise API', status: 'FAIL', error: error.message });
            console.log('  ‚ùå Enterprise API falhou:', error.message);
        }

        // Test 1.4: Database connection
        try {
            console.log('1.4 Testando conex√£o database...');
            const response = await axios.get(`${this.baseURL}/api/enterprise/database/stats`, { timeout: 5000 });
            
            if (response.status === 200 && response.data.master) {
                testResults.push({ test: 'Database Connection', status: 'PASS', details: response.data });
                console.log('  ‚úÖ Database conectado');
            } else {
                throw new Error('Database n√£o conectado');
            }
        } catch (error) {
            testResults.push({ test: 'Database Connection', status: 'FAIL', error: error.message });
            console.log('  ‚ùå Database falhou:', error.message);
        }

        // Test 1.5: Cache Redis
        try {
            console.log('1.5 Testando Cache Redis...');
            const response = await axios.get(`${this.baseURL}/api/enterprise/cache/stats`, { timeout: 5000 });
            
            if (response.status === 200) {
                testResults.push({ test: 'Cache Redis', status: 'PASS', details: response.data });
                console.log('  ‚úÖ Cache Redis funcionando');
            } else {
                throw new Error('Cache Redis n√£o dispon√≠vel');
            }
        } catch (error) {
            testResults.push({ test: 'Cache Redis', status: 'FAIL', error: error.message });
            console.log('  ‚ùå Cache Redis falhou:', error.message);
        }

        return this.processTestResults('TESTE 1: Componentes Core', testResults);
    }

    /**
     * üîê TESTE 2: Sistema de Autentica√ß√£o 2FA
     */
    async testAuthentication2FA() {
        console.log('\nüîê TESTE 2: SISTEMA DE AUTENTICA√á√ÉO 2FA');
        console.log('=======================================');
        
        const testResults = [];

        // Test 2.1: Setup 2FA endpoint
        try {
            console.log('2.1 Testando endpoint de setup 2FA...');
            const response = await axios.post(`${this.baseURL}/api/enterprise/auth/2fa/setup`, {
                userId: 'test_user'
            }, { timeout: 5000 });
            
            if (response.status === 200 && response.data.qrCode) {
                testResults.push({ test: '2FA Setup', status: 'PASS', details: 'QR Code gerado' });
                console.log('  ‚úÖ 2FA Setup funcionando');
            } else {
                throw new Error('2FA Setup n√£o retornou QR code');
            }
        } catch (error) {
            testResults.push({ test: '2FA Setup', status: 'FAIL', error: error.message });
            console.log('  ‚ùå 2FA Setup falhou:', error.message);
        }

        // Test 2.2: Backup codes generation
        try {
            console.log('2.2 Testando gera√ß√£o de backup codes...');
            const response = await axios.post(`${this.baseURL}/api/enterprise/auth/2fa/backup-codes`, {
                userId: 'test_user'
            }, { timeout: 5000 });
            
            if (response.status === 200 && response.data.backupCodes) {
                testResults.push({ test: 'Backup Codes', status: 'PASS', details: `${response.data.backupCodes.length} c√≥digos gerados` });
                console.log('  ‚úÖ Backup codes gerados');
            } else {
                throw new Error('Backup codes n√£o gerados');
            }
        } catch (error) {
            testResults.push({ test: 'Backup Codes', status: 'FAIL', error: error.message });
            console.log('  ‚ùå Backup codes falharam:', error.message);
        }

        // Test 2.3: SMS code (simula√ß√£o)
        try {
            console.log('2.3 Testando SMS code (simula√ß√£o)...');
            const response = await axios.post(`${this.baseURL}/api/enterprise/auth/2fa/sms`, {
                phoneNumber: '+5511999999999'
            }, { timeout: 5000 });
            
            if (response.status === 200) {
                testResults.push({ test: 'SMS Code', status: 'PASS', details: 'SMS simulado enviado' });
                console.log('  ‚úÖ SMS code funcionando');
            } else {
                throw new Error('SMS code falhou');
            }
        } catch (error) {
            testResults.push({ test: 'SMS Code', status: 'FAIL', error: error.message });
            console.log('  ‚ùå SMS code falhou:', error.message);
        }

        return this.processTestResults('TESTE 2: Autentica√ß√£o 2FA', testResults);
    }

    /**
     * üí∞ TESTE 3: Sistema Financeiro
     */
    async testFinancialSystem() {
        console.log('\nüí∞ TESTE 3: SISTEMA FINANCEIRO E CONVERS√ïES');
        console.log('===========================================');
        
        const testResults = [];

        // Test 3.1: Convers√£o USD/BRL
        try {
            console.log('3.1 Testando convers√£o USD para BRL...');
            const response = await axios.get(`${this.baseURL}/api/enterprise/financial/usd-to-brl/100`, { timeout: 5000 });
            
            if (response.status === 200 && response.data.converted_amount) {
                testResults.push({ test: 'Convers√£o USD/BRL', status: 'PASS', details: response.data });
                console.log(`  ‚úÖ Convers√£o: $100 = R$ ${response.data.converted_amount}`);
            } else {
                throw new Error('Convers√£o USD/BRL falhou');
            }
        } catch (error) {
            testResults.push({ test: 'Convers√£o USD/BRL', status: 'FAIL', error: error.message });
            console.log('  ‚ùå Convers√£o falhou:', error.message);
        }

        // Test 3.2: Sistema de cr√©ditos administrativos
        try {
            console.log('3.2 Testando sistema de cr√©ditos administrativos...');
            
            // Importar e testar sistema de cr√©ditos
            const { SistemaCreditosAdministrativos } = require('../scripts/system/sistema-creditos-administrativos-correto');
            const sistemaCreditos = new SistemaCreditosAdministrativos();
            
            // Criar tabelas se necess√°rio
            await sistemaCreditos.criarTabelaCupons();
            
            // Gerar cupom de teste
            const cupom = await sistemaCreditos.gerarCupomAdministrativo(1, 'BASIC', 'Cupom de teste');
            
            if (cupom && cupom.coupon_code) {
                testResults.push({ test: 'Cr√©ditos Administrativos', status: 'PASS', details: `Cupom gerado: ${cupom.coupon_code}` });
                console.log(`  ‚úÖ Cupom gerado: ${cupom.coupon_code}`);
            } else {
                throw new Error('Falha na gera√ß√£o de cupom');
            }
        } catch (error) {
            testResults.push({ test: 'Cr√©ditos Administrativos', status: 'FAIL', error: error.message });
            console.log('  ‚ùå Cr√©ditos administrativos falharam:', error.message);
        }

        // Test 3.3: Tipos de cr√©dito dispon√≠veis
        try {
            console.log('3.3 Testando tipos de cr√©dito...');
            const response = await axios.get(`${this.baseURL}/api/admin/credit-types`, { timeout: 5000 });
            
            if (response.status === 200 && response.data.credit_types) {
                testResults.push({ test: 'Tipos de Cr√©dito', status: 'PASS', details: `${response.data.credit_types.length} tipos dispon√≠veis` });
                console.log(`  ‚úÖ ${response.data.credit_types.length} tipos de cr√©dito dispon√≠veis`);
            } else {
                throw new Error('Tipos de cr√©dito n√£o dispon√≠veis');
            }
        } catch (error) {
            testResults.push({ test: 'Tipos de Cr√©dito', status: 'FAIL', error: error.message });
            console.log('  ‚ùå Tipos de cr√©dito falharam:', error.message);
        }

        return this.processTestResults('TESTE 3: Sistema Financeiro', testResults);
    }

    /**
     * üìä TESTE 4: Trading System
     */
    async testTradingSystem() {
        console.log('\nüìä TESTE 4: TRADING SYSTEM COM VALIDA√á√ïES');
        console.log('=========================================');
        
        const testResults = [];

        // Test 4.1: Trading status
        try {
            console.log('4.1 Testando status do trading...');
            const response = await axios.get(`${this.baseURL}/api/enterprise/trading/status`, { timeout: 5000 });
            
            if (response.status === 200) {
                testResults.push({ test: 'Trading Status', status: 'PASS', details: response.data });
                console.log('  ‚úÖ Trading system online');
            } else {
                throw new Error('Trading system n√£o dispon√≠vel');
            }
        } catch (error) {
            testResults.push({ test: 'Trading Status', status: 'FAIL', error: error.message });
            console.log('  ‚ùå Trading status falhou:', error.message);
        }

        // Test 4.2: Valida√ß√£o de cooldown
        try {
            console.log('4.2 Testando valida√ß√£o de cooldown...');
            const response = await axios.post(`${this.baseURL}/api/enterprise/trading/validate-cooldown`, {
                userId: 'test_user',
                symbol: 'BTCUSDT'
            }, { timeout: 5000 });
            
            if (response.status === 200) {
                testResults.push({ test: 'Cooldown Validation', status: 'PASS', details: response.data });
                console.log('  ‚úÖ Valida√ß√£o de cooldown funcionando');
            } else {
                throw new Error('Valida√ß√£o de cooldown falhou');
            }
        } catch (error) {
            testResults.push({ test: 'Cooldown Validation', status: 'FAIL', error: error.message });
            console.log('  ‚ùå Cooldown validation falhou:', error.message);
        }

        // Test 4.3: Valida√ß√£o de posi√ß√µes m√°ximas
        try {
            console.log('4.3 Testando valida√ß√£o de posi√ß√µes m√°ximas...');
            const response = await axios.post(`${this.baseURL}/api/enterprise/trading/validate-positions`, {
                userId: 'test_user'
            }, { timeout: 5000 });
            
            if (response.status === 200) {
                testResults.push({ test: 'Max Positions Validation', status: 'PASS', details: response.data });
                console.log('  ‚úÖ Valida√ß√£o de posi√ß√µes funcionando');
            } else {
                throw new Error('Valida√ß√£o de posi√ß√µes falhou');
            }
        } catch (error) {
            testResults.push({ test: 'Max Positions Validation', status: 'FAIL', error: error.message });
            console.log('  ‚ùå Positions validation falhou:', error.message);
        }

        return this.processTestResults('TESTE 4: Trading System', testResults);
    }

    /**
     * ü§ñ TESTE 5: OpenAI Rate Limiting
     */
    async testOpenAIRateLimiting() {
        console.log('\nü§ñ TESTE 5: RATE LIMITING OPENAI E FALLBACK');
        console.log('==========================================');
        
        const testResults = [];

        // Test 5.1: Rate limiter stats
        try {
            console.log('5.1 Testando stats do rate limiter...');
            const response = await axios.get(`${this.baseURL}/api/enterprise/ai/rate-limiter/stats`, { timeout: 5000 });
            
            if (response.status === 200) {
                testResults.push({ test: 'Rate Limiter Stats', status: 'PASS', details: response.data });
                console.log('  ‚úÖ Rate limiter funcionando');
            } else {
                throw new Error('Rate limiter n√£o dispon√≠vel');
            }
        } catch (error) {
            testResults.push({ test: 'Rate Limiter Stats', status: 'FAIL', error: error.message });
            console.log('  ‚ùå Rate limiter falhou:', error.message);
        }

        // Test 5.2: Fallback system
        try {
            console.log('5.2 Testando sistema de fallback...');
            const response = await axios.post(`${this.baseURL}/api/enterprise/ai/analyze`, {
                prompt: 'Test analysis for BTCUSDT',
                forceFailure: true // For√ßa o fallback
            }, { timeout: 10000 });
            
            if (response.status === 200 && response.data.fallback_mode) {
                testResults.push({ test: 'Fallback System', status: 'PASS', details: 'Fallback ativado corretamente' });
                console.log('  ‚úÖ Sistema de fallback funcionando');
            } else {
                throw new Error('Sistema de fallback n√£o ativou');
            }
        } catch (error) {
            testResults.push({ test: 'Fallback System', status: 'FAIL', error: error.message });
            console.log('  ‚ùå Fallback system falhou:', error.message);
        }

        return this.processTestResults('TESTE 5: OpenAI Rate Limiting', testResults);
    }

    /**
     * üìä TESTE 6: Monitoramento e M√©tricas
     */
    async testMonitoringMetrics() {
        console.log('\nüìä TESTE 6: MONITORAMENTO E M√âTRICAS');
        console.log('===================================');
        
        const testResults = [];

        // Test 6.1: M√©tricas Prometheus
        try {
            console.log('6.1 Testando m√©tricas Prometheus...');
            const response = await axios.get(`${this.baseURL}/metrics`, { timeout: 5000 });
            
            if (response.status === 200 && response.data.includes('coinbitclub_')) {
                testResults.push({ test: 'Prometheus Metrics', status: 'PASS', details: 'M√©tricas dispon√≠veis' });
                console.log('  ‚úÖ M√©tricas Prometheus funcionando');
            } else {
                throw new Error('M√©tricas Prometheus n√£o dispon√≠veis');
            }
        } catch (error) {
            testResults.push({ test: 'Prometheus Metrics', status: 'FAIL', error: error.message });
            console.log('  ‚ùå Prometheus metrics falhou:', error.message);
        }

        // Test 6.2: Logs estruturados
        try {
            console.log('6.2 Testando logs estruturados...');
            const response = await axios.get(`${this.baseURL}/api/enterprise/logs/stats`, { timeout: 5000 });
            
            if (response.status === 200) {
                testResults.push({ test: 'Structured Logs', status: 'PASS', details: response.data });
                console.log('  ‚úÖ Logs estruturados funcionando');
            } else {
                throw new Error('Logs estruturados n√£o dispon√≠veis');
            }
        } catch (error) {
            testResults.push({ test: 'Structured Logs', status: 'FAIL', error: error.message });
            console.log('  ‚ùå Structured logs falhou:', error.message);
        }

        return this.processTestResults('TESTE 6: Monitoramento e M√©tricas', testResults);
    }

    /**
     * üìä Processar resultados dos testes
     */
    processTestResults(testName, testResults) {
        const passed = testResults.filter(t => t.status === 'PASS').length;
        const failed = testResults.filter(t => t.status === 'FAIL').length;
        const total = testResults.length;
        
        this.results.totalTests += total;
        this.results.passedTests += passed;
        this.results.failedTests += failed;
        
        const testResult = {
            name: testName,
            total,
            passed,
            failed,
            successRate: total > 0 ? ((passed / total) * 100).toFixed(2) + '%' : '0%',
            details: testResults
        };
        
        this.results.tests.push(testResult);
        
        console.log(`\nüìä Resultado: ${passed}/${total} testes passaram (${testResult.successRate})`);
        
        return testResult;
    }

    /**
     * üöÄ Executar todos os testes
     */
    async runAllTests() {
        console.log('üöÄ INICIANDO SUITE COMPLETA DE TESTES');
        console.log('====================================');
        
        try {
            // Executar testes sequencialmente
            await this.testCoreComponents();
            await this.testAuthentication2FA();
            await this.testFinancialSystem();
            await this.testTradingSystem();
            await this.testOpenAIRateLimiting();
            await this.testMonitoringMetrics();
            
            // Gerar relat√≥rio final
            this.generateFinalReport();
            
        } catch (error) {
            console.error('‚ùå Erro durante execu√ß√£o dos testes:', error);
        }
    }

    /**
     * üìã Gerar relat√≥rio final
     */
    generateFinalReport() {
        const duration = Date.now() - this.results.startTime;
        const successRate = this.results.totalTests > 0 
            ? ((this.results.passedTests / this.results.totalTests) * 100).toFixed(2) + '%'
            : '0%';

        console.log('\nüéØ RELAT√ìRIO FINAL DOS TESTES');
        console.log('============================');
        console.log(`‚è±Ô∏è Dura√ß√£o: ${Math.round(duration / 1000)}s`);
        console.log(`üìä Total de testes: ${this.results.totalTests}`);
        console.log(`‚úÖ Testes passaram: ${this.results.passedTests}`);
        console.log(`‚ùå Testes falharam: ${this.results.failedTests}`);
        console.log(`üéØ Taxa de sucesso: ${successRate}`);
        
        console.log('\nüìã Resumo por categoria:');
        this.results.tests.forEach(test => {
            const status = test.failed === 0 ? '‚úÖ' : '‚ùå';
            console.log(`  ${status} ${test.name}: ${test.successRate}`);
        });

        if (this.results.failedTests === 0) {
            console.log('\nüéâ TODOS OS TESTES PASSARAM!');
            console.log('‚úÖ Sistema pronto para produ√ß√£o');
        } else {
            console.log('\n‚ö†Ô∏è ALGUNS TESTES FALHARAM');
            console.log('üîç Revisar falhas antes do deploy');
        }

        // Salvar relat√≥rio em arquivo
        const reportPath = path.join(process.cwd(), 'test-results.json');
        fs.writeFileSync(reportPath, JSON.stringify(this.results, null, 2));
        console.log(`üìÅ Relat√≥rio salvo em: ${reportPath}`);
    }
}

module.exports = EnterpriseSystemTester;

// üöÄ Executar testes se chamado diretamente
if (require.main === module) {
    const tester = new EnterpriseSystemTester();
    tester.runAllTests().catch(error => {
        console.error('‚ùå Erro na execu√ß√£o dos testes:', error);
        process.exit(1);
    });
}
