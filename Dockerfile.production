# üá±üáπ DOCKERFILE OTIMIZADO PARA PRODU√á√ÉO HOSTINGER
# ============================================================================
# Multi-stage build para otimizar tamanho e performance
# Target: VPS Litu√¢nia 32GB RAM / 8 vCPU
# ============================================================================

# Stage 1: Build Dependencies
FROM node:18-alpine AS dependencies
WORKDIR /app

# Instalar depend√™ncias de sistema necess√°rias
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    curl \
    libc6-compat \
    && rm -rf /var/cache/apk/*

# Copiar package files
COPY package*.json ./

# Instalar depend√™ncias com cache otimizado
RUN npm ci --only=production \
    && npm cache clean --force \
    && rm -rf /tmp/*

# Stage 2: Application Build
FROM node:18-alpine AS builder
WORKDIR /app

# Copiar depend√™ncias da etapa anterior
COPY --from=dependencies /app/node_modules ./node_modules
COPY . .

# Remover arquivos desnecess√°rios para produ√ß√£o
RUN rm -rf \
    tests/ \
    docs/ \
    *.md \
    .git/ \
    .github/ \
    tools/development/ \
    legacy/old-versions/ \
    && find . -name "*.test.js" -delete \
    && find . -name "*.spec.js" -delete

# Stage 3: Production Runtime
FROM node:18-alpine AS production

# Metadados da imagem
LABEL maintainer="CoinBitClub Team <admin@coinbitclub.com>"
LABEL version="6.0.0"
LABEL description="CoinBitClub Enterprise Trading Platform"
LABEL environment="production"
LABEL vps="hostinger-lithuania"

# Vari√°veis de ambiente otimizadas
ENV NODE_ENV=production
ENV TZ=Europe/Vilnius
ENV PORT=3000
ENV NODE_OPTIONS="--max-old-space-size=4096 --enable-source-maps"
ENV UV_THREADPOOL_SIZE=16

# Instalar apenas depend√™ncias runtime essenciais
RUN apk add --no-cache \
    curl \
    ca-certificates \
    tzdata \
    dumb-init \
    && update-ca-certificates \
    && rm -rf /var/cache/apk/*

# Criar usu√°rio n√£o-root para seguran√ßa
RUN addgroup -g 1001 -S nodejs \
    && adduser -S nodejs -u 1001

# Criar diret√≥rios necess√°rios
RUN mkdir -p /app/logs /app/backups /app/temp \
    && chown -R nodejs:nodejs /app

WORKDIR /app

# Copiar aplica√ß√£o constru√≠da
COPY --from=builder --chown=nodejs:nodejs /app .

# Criar script de inicializa√ß√£o
RUN echo '#!/bin/sh' > /app/start.sh \
    && echo 'echo "üöÄ Iniciando CoinBitClub Enterprise v6.0.0"' >> /app/start.sh \
    && echo 'echo "üìç Servidor: Hostinger Litu√¢nia"' >> /app/start.sh \
    && echo 'echo "üïí Timezone: $TZ"' >> /app/start.sh \
    && echo 'echo "üíæ Mem√≥ria dispon√≠vel: $(free -h | awk "NR==2{print \$7}")"' >> /app/start.sh \
    && echo 'echo "‚ö° Iniciando aplica√ß√£o na porta $PORT..."' >> /app/start.sh \
    && echo 'exec node enterprise-orchestrator.js' >> /app/start.sh \
    && chmod +x /app/start.sh \
    && chown nodejs:nodejs /app/start.sh

# Mudar para usu√°rio n√£o-root
USER nodejs

# Configurar health check otimizado
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:$PORT/api/enterprise/status || exit 1

# Expor porta da aplica√ß√£o
EXPOSE 3000

# Ponto de entrada com dumb-init para tratamento de sinais
ENTRYPOINT ["dumb-init", "--"]

# Comando de inicializa√ß√£o
CMD ["/app/start.sh"]
