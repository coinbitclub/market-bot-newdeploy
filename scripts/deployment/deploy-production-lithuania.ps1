# CoinBitClub Enterprise - Deploy Production Lithuania (Windows PowerShell)
# Script de deploy para VPS Lithuania

param(
    [Parameter(Mandatory=$false)]
    [string]$VpsHost = "31.97.72.77",
    
    [Parameter(Mandatory=$false)]
    [string]$VpsUser = "coinbitclub",
    
    [Parameter(Mandatory=$false)]
    [string]$SshKey = "",
    
    [Parameter(Mandatory=$false)]
    [switch]$LocalDeploy = $false,
    
    [Parameter(Mandatory=$false)]
    [switch]$SkipBackup = $false
)

Write-Host "=====================================" -ForegroundColor Cyan
Write-Host "CoinBitClub Enterprise - Deploy" -ForegroundColor Cyan
Write-Host "Lithuania VPS: $VpsHost" -ForegroundColor Cyan
Write-Host "=====================================" -ForegroundColor Cyan

# Fun√ß√£o para verificar status
function Test-ServiceHealth {
    param([string]$Url)
    try {
        $response = Invoke-WebRequest -Uri $Url -TimeoutSec 10 -UseBasicParsing
        return $response.StatusCode -eq 200
    }
    catch {
        return $false
    }
}

if ($LocalDeploy) {
    Write-Host "üè† Deploy local (Windows)..." -ForegroundColor Yellow
    
    # Verificar se Docker est√° rodando
    try {
        docker info | Out-Null
        Write-Host "‚úÖ Docker est√° rodando" -ForegroundColor Green
    }
    catch {
        Write-Host "‚ùå Docker n√£o est√° rodando. Iniciando..." -ForegroundColor Red
        Start-Service docker
        Start-Sleep 5
    }
    
    # Build da imagem
    Write-Host "üî® Construindo imagem Docker..." -ForegroundColor Yellow
    docker build -t coinbitclub/trading-enterprise:latest .
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Build conclu√≠do" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Erro no build" -ForegroundColor Red
        exit 1
    }
    
    # Deploy local
    Write-Host "üöÄ Iniciando stack local..." -ForegroundColor Yellow
    docker-compose -f docker-compose.production.yml up -d
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Stack iniciado localmente" -ForegroundColor Green
        
        # Aguardar servi√ßos
        Write-Host "‚è≥ Aguardando servi√ßos..." -ForegroundColor Yellow
        Start-Sleep 15
        
        # Verificar sa√∫de
        if (Test-ServiceHealth "http://localhost/health") {
            Write-Host "‚úÖ Sistema saud√°vel!" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è Sistema pode estar iniciando..." -ForegroundColor Yellow
        }
        
        Write-Host "`nüìä Acesso local:" -ForegroundColor Cyan
        Write-Host "- App: http://localhost" -ForegroundColor White
        Write-Host "- Grafana: http://localhost:3001" -ForegroundColor White
        Write-Host "- Prometheus: http://localhost:9090" -ForegroundColor White
    } else {
        Write-Host "‚ùå Erro no deploy local" -ForegroundColor Red
        exit 1
    }
    
    return
}

# Deploy remoto no VPS Lithuania
Write-Host "üåç Preparando deploy remoto..." -ForegroundColor Yellow

# Verificar arquivos necess√°rios
$requiredFiles = @(
    "docker-compose.production.yml",
    "Dockerfile",
    "package.json"
)

foreach ($file in $requiredFiles) {
    if (!(Test-Path $file)) {
        Write-Host "‚ùå Arquivo necess√°rio n√£o encontrado: $file" -ForegroundColor Red
        exit 1
    }
}

Write-Host "‚úÖ Arquivos verificados" -ForegroundColor Green

# Criar backup se necess√°rio
if (!$SkipBackup) {
    Write-Host "üíæ Criando backup..." -ForegroundColor Yellow
    $backupName = "backup-$(Get-Date -Format 'yyyyMMdd-HHmmss')"
    Compress-Archive -Path "*.js", "*.json", "*.yml", "src", "config" -DestinationPath "backups\$backupName.zip" -Force
    Write-Host "‚úÖ Backup criado: backups\$backupName.zip" -ForegroundColor Green
}

# Script de deploy remoto
$deployScript = @"
#!/bin/bash
echo "üöÄ Iniciando deploy CoinBitClub Enterprise..."

cd /opt/coinbitclub/app

# Backup anterior
if [ -d "current" ]; then
    echo "üíæ Criando backup da vers√£o atual..."
    mv current backup-$(date +%Y%m%d-%H%M%S) 2>/dev/null || true
fi

# Criar diret√≥rio atual
mkdir -p current
cd current

# Parar servi√ßos existentes
echo "‚èπÔ∏è Parando servi√ßos existentes..."
docker-compose -f docker-compose.production.yml down 2>/dev/null || true

# Aguardar parada completa
sleep 5

# Build da nova imagem
echo "üî® Construindo nova imagem..."
docker build -t coinbitclub/trading-enterprise:latest .

if [ $? -eq 0 ]; then
    echo "‚úÖ Build conclu√≠do"
else
    echo "‚ùå Erro no build"
    exit 1
fi

# Iniciar nova stack
echo "üöÄ Iniciando nova stack..."
docker-compose -f docker-compose.production.yml up -d

if [ $? -eq 0 ]; then
    echo "‚úÖ Stack iniciado"
else
    echo "‚ùå Erro ao iniciar stack"
    exit 1
fi

# Aguardar inicializa√ß√£o
echo "‚è≥ Aguardando inicializa√ß√£o dos servi√ßos..."
sleep 30

# Verificar sa√∫de dos servi√ßos
echo "üîç Verificando sa√∫de dos servi√ßos..."

# Verificar aplica√ß√£o principal
if curl -f http://localhost/health >/dev/null 2>&1; then
    echo "‚úÖ Aplica√ß√£o principal: OK"
else
    echo "‚ö†Ô∏è Aplica√ß√£o principal: Verificando..."
fi

# Verificar load balancer
if curl -f http://localhost >/dev/null 2>&1; then
    echo "‚úÖ Load Balancer: OK"
else
    echo "‚ö†Ô∏è Load Balancer: Verificando..."
fi

# Verificar Prometheus
if curl -f http://localhost:9090/-/healthy >/dev/null 2>&1; then
    echo "‚úÖ Prometheus: OK"
else
    echo "‚ö†Ô∏è Prometheus: Verificando..."
fi

# Verificar Grafana
if curl -f http://localhost:3001/api/health >/dev/null 2>&1; then
    echo "‚úÖ Grafana: OK"
else
    echo "‚ö†Ô∏è Grafana: Verificando..."
fi

# Status dos containers
echo "üìä Status dos containers:"
docker-compose -f docker-compose.production.yml ps

echo "üéâ Deploy conclu√≠do!"
echo "üìä Sistema dispon√≠vel em:"
echo "- App: http://31.97.72.77"
echo "- Grafana: http://31.97.72.77:3001"
echo "- Prometheus: http://31.97.72.77:9090"
"@

# Salvar script tempor√°rio
$tempScript = Join-Path $env:TEMP "deploy-remote.sh"
$deployScript | Out-File -FilePath $tempScript -Encoding UTF8

# Criar arquivo de transfer√™ncia
$transferDir = Join-Path $env:TEMP "coinbitclub-deploy"
if (Test-Path $transferDir) {
    Remove-Item $transferDir -Recurse -Force
}
New-Item -ItemType Directory -Path $transferDir -Force

# Copiar arquivos necess√°rios
Copy-Item "docker-compose.production.yml" "$transferDir\"
Copy-Item "Dockerfile" "$transferDir\"
Copy-Item "package.json" "$transferDir\"
Copy-Item "src" "$transferDir\" -Recurse -ErrorAction SilentlyContinue
Copy-Item "config" "$transferDir\" -Recurse -ErrorAction SilentlyContinue
Copy-Item "*.js" "$transferDir\" -ErrorAction SilentlyContinue

Write-Host "üì¶ Arquivos preparados para transfer" -ForegroundColor Green

# Construir comando SSH
$sshCommand = "ssh"
$scpCommand = "scp -r"
if ($SshKey) {
    $sshCommand += " -i `"$SshKey`""
    $scpCommand += " -i `"$SshKey`""
}

Write-Host "üöÄ Executando deploy remoto..." -ForegroundColor Yellow

try {
    # Transferir arquivos
    Write-Host "üì§ Transferindo arquivos..." -ForegroundColor Yellow
    if ($SshKey) {
        scp -r -i "$SshKey" "$transferDir\*" "$VpsUser@${VpsHost}:/opt/coinbitclub/app/current/"
        scp -i "$SshKey" "$tempScript" "$VpsUser@${VpsHost}:/tmp/deploy.sh"
    } else {
        scp -r "$transferDir\*" "$VpsUser@${VpsHost}:/opt/coinbitclub/app/current/"
        scp "$tempScript" "$VpsUser@${VpsHost}:/tmp/deploy.sh"
    }
    
    Write-Host "‚úÖ Arquivos transferidos" -ForegroundColor Green
    
    # Executar deploy
    Write-Host "üéØ Executando deploy..." -ForegroundColor Yellow
    if ($SshKey) {
        ssh -i "$SshKey" "$VpsUser@$VpsHost" "chmod +x /tmp/deploy.sh && /tmp/deploy.sh"
    } else {
        ssh "$VpsUser@$VpsHost" "chmod +x /tmp/deploy.sh && /tmp/deploy.sh"
    }
    
    Write-Host "‚úÖ Deploy conclu√≠do com sucesso!" -ForegroundColor Green
    
    # Verificar sa√∫de remota
    Write-Host "üîç Verificando sistema remoto..." -ForegroundColor Yellow
    Start-Sleep 10
    
    if (Test-ServiceHealth "http://$VpsHost/health") {
        Write-Host "‚úÖ Sistema remoto saud√°vel!" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è Sistema pode estar inicializando..." -ForegroundColor Yellow
    }
    
    Write-Host "`nüìä Acesso remoto:" -ForegroundColor Cyan
    Write-Host "- App: http://$VpsHost" -ForegroundColor White
    Write-Host "- Grafana: http://$VpsHost:3001" -ForegroundColor White
    Write-Host "- Prometheus: http://$VpsHost:9090" -ForegroundColor White
    
}
catch {
    Write-Host "‚ùå Erro durante deploy: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "üí° Verifique se:" -ForegroundColor Yellow
    Write-Host "   - O VPS est√° acess√≠vel: $VpsHost" -ForegroundColor Yellow
    Write-Host "   - As credenciais SSH est√£o corretas" -ForegroundColor Yellow
    Write-Host "   - O setup do VPS foi executado" -ForegroundColor Yellow
}
finally {
    # Limpar arquivos tempor√°rios
    if (Test-Path $tempScript) {
        Remove-Item $tempScript -Force
    }
    if (Test-Path $transferDir) {
        Remove-Item $transferDir -Recurse -Force
    }
}

Write-Host "`nüéâ Deploy finalizado!" -ForegroundColor Cyan
Write-Host "Para monitorar: npm run logs:view" -ForegroundColor White
