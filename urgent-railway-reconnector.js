/**
 * üö® RECONEX√ÉO URGENTE - IP FIXO RAILWAY
 * =====================================
 * 
 * Sistema para reconectar exchanges ap√≥s implementa√ß√£o de IP fixo
 * IP Fixo Railway: 131.0.31.147
 * Regi√£o: EU (coinbitclub-bot.eu.ngrok.io)
 * 
 * Data: 11/08/2025
 * Status: OPERA√á√ÉO REAL
 */

console.log('üö® RECONEX√ÉO URGENTE - IP FIXO RAILWAY');
console.log('=====================================');

const { Pool } = require('pg');
const axios = require('axios');
const crypto = require('crypto');

class UrgentReconnector {
    constructor() {
        this.pool = new Pool({
            connectionString: process.env.DATABASE_URL || 'postgresql://postgres:ELjbkkgUASRCtdTAXVFgIssOXiLsRCPq@trolley.proxy.rlwy.net:44790/railway',
            ssl: { rejectUnauthorized: false }
        });

        // üîí CONFIGURA√á√ÉO IP FIXO RAILWAY
        this.networkConfig = {
            fixed_ip: '131.0.31.147',
            ngrok_enabled: true,
            ngrok_region: 'EU',
            ngrok_subdomain: 'coinbitclub-bot',
            ngrok_url: 'https://coinbitclub-bot.eu.ngrok.io',
            railway_deployed: true
        };

        // üéØ EXCHANGES CONFIGURADAS
        this.exchanges = {
            bybit: {
                testnet: 'https://api-testnet.bybit.com',
                mainnet: 'https://api.bybit.com',
                enabled: true
            },
            binance: {
                testnet: 'https://testnet.binance.vision',
                mainnet: 'https://api.binance.com',
                enabled: false // Bloqueado no Brasil
            }
        };

        console.log('üîí IP Fixo Railway:', this.networkConfig.fixed_ip);
        console.log('üåê Ngrok URL:', this.networkConfig.ngrok_url);
        console.log('‚úÖ Reconector Urgente inicializado');
    }

    /**
     * üöÄ EXECUTAR RECONEX√ÉO COMPLETA
     */
    async executeUrgentReconnection() {
        console.log('\nüöÄ EXECUTANDO RECONEX√ÉO URGENTE...');
        console.log('==================================');

        const reconnection = {
            timestamp: new Date().toISOString(),
            ip_config: this.networkConfig,
            steps_completed: [],
            users_reconnected: 0,
            exchanges_tested: 0,
            successful_connections: 0,
            failed_connections: 0,
            success: false
        };

        try {
            // PASSO 1: Verificar conectividade com IP fixo
            console.log('\nüì° PASSO 1: Verificando conectividade com IP fixo...');
            const connectivityCheck = await this.verifyFixedIPConnectivity();
            reconnection.steps_completed.push('connectivity_check');

            if (!connectivityCheck.success) {
                console.log('üö® CR√çTICO: IP fixo n√£o est√° acess√≠vel');
                return reconnection;
            }

            // PASSO 2: Buscar usu√°rios com chaves bloqueadas
            console.log('\nüîë PASSO 2: Identificando chaves bloqueadas...');
            const blockedUsers = await this.findBlockedUsers();
            reconnection.steps_completed.push('blocked_users_identification');

            console.log(`üìä Encontrados ${blockedUsers.length} usu√°rios com problemas`);

            // PASSO 3: Testar reconex√£o por usu√°rio
            console.log('\nüîÑ PASSO 3: Testando reconex√£o por usu√°rio...');
            for (const user of blockedUsers) {
                const userReconnection = await this.reconnectUser(user);
                
                if (userReconnection.success) {
                    reconnection.users_reconnected++;
                    reconnection.successful_connections += userReconnection.successful_keys;
                    console.log(`  ‚úÖ ${user.username}: RECONECTADO`);
                } else {
                    reconnection.failed_connections += userReconnection.failed_keys;
                    console.log(`  ‚ùå ${user.username}: FALHA`);
                }

                reconnection.exchanges_tested += userReconnection.total_keys;
            }
            reconnection.steps_completed.push('user_reconnection');

            // PASSO 4: Ativar sistema real
            console.log('\n‚ö° PASSO 4: Ativando sistema para opera√ß√£o real...');
            const activation = await this.activateRealTrading();
            reconnection.steps_completed.push('real_trading_activation');
            reconnection.success = activation.success;

            // RESUMO FINAL
            console.log('\nüìä RESUMO DA RECONEX√ÉO:');
            console.log('========================');
            console.log(`üîí IP Fixo: ${this.networkConfig.fixed_ip}`);
            console.log(`üë• Usu√°rios reconectados: ${reconnection.users_reconnected}`);
            console.log(`‚úÖ Conex√µes bem-sucedidas: ${reconnection.successful_connections}`);
            console.log(`‚ùå Conex√µes falharam: ${reconnection.failed_connections}`);
            console.log(`üöÄ Sistema operacional: ${reconnection.success ? 'SIM' : 'N√ÉO'}`);

            if (reconnection.success) {
                console.log('\nüü¢ RECONEX√ÉO URGENTE CONCLU√çDA COM SUCESSO!');
                console.log('===========================================');
                console.log('üöÄ Sistema pronto para trading real');
                console.log('üì° Testnet e Mainnet operacionais');
                console.log('üîó Acesse: https://coinbitclub-bot.eu.ngrok.io');
            } else {
                console.log('\nüî¥ RECONEX√ÉO PARCIAL - VERIFICAR LOGS');
                await this.generateManualInstructions(reconnection);
            }

            return reconnection;

        } catch (error) {
            console.error('\n‚ùå ERRO CR√çTICO NA RECONEX√ÉO:', error);
            reconnection.error = error.message;
            return reconnection;
        }
    }

    /**
     * üì° VERIFICAR CONECTIVIDADE DO IP FIXO
     */
    async verifyFixedIPConnectivity() {
        console.log('  üì° Testando conectividade do IP fixo...');

        try {
            // Testar IP p√∫blico atual
            const ipResponse = await axios.get('https://api.ipify.org?format=json', { timeout: 5000 });
            const currentIP = ipResponse.data.ip;
            
            console.log(`  üåê IP atual detectado: ${currentIP}`);
            console.log(`  üîí IP fixo configurado: ${this.networkConfig.fixed_ip}`);

            // Testar Ngrok (se dispon√≠vel)
            let ngrokStatus = 'unknown';
            try {
                const ngrokResponse = await axios.get('http://127.0.0.1:4040/api/tunnels', { timeout: 3000 });
                if (ngrokResponse.data.tunnels && ngrokResponse.data.tunnels.length > 0) {
                    ngrokStatus = 'active';
                    console.log(`  üöá Ngrok ativo: ${ngrokResponse.data.tunnels[0].public_url}`);
                }
            } catch (ngrokError) {
                ngrokStatus = 'not_available';
                console.log('  ‚ö†Ô∏è Ngrok n√£o dispon√≠vel localmente (normal no Railway)');
            }

            // Testar conectividade b√°sica com exchanges
            const exchangeTests = await this.testBasicExchangeConnectivity();
            
            return {
                success: exchangeTests.accessible_exchanges > 0,
                current_ip: currentIP,
                fixed_ip: this.networkConfig.fixed_ip,
                ngrok_status: ngrokStatus,
                exchange_accessibility: exchangeTests
            };

        } catch (error) {
            console.error('  ‚ùå Erro ao verificar conectividade:', error.message);
            return { success: false, error: error.message };
        }
    }

    /**
     * üîó TESTAR CONECTIVIDADE B√ÅSICA COM EXCHANGES
     */
    async testBasicExchangeConnectivity() {
        const results = {
            tests_performed: 0,
            accessible_exchanges: 0,
            blocked_exchanges: 0,
            details: {}
        };

        const testEndpoints = [
            { name: 'bybit_testnet', url: this.exchanges.bybit.testnet + '/v5/market/time' },
            { name: 'bybit_mainnet', url: this.exchanges.bybit.mainnet + '/v5/market/time' }
        ];

        for (const endpoint of testEndpoints) {
            results.tests_performed++;
            console.log(`    üîÑ Testando ${endpoint.name}...`);

            try {
                const response = await axios.get(endpoint.url, {
                    timeout: 10000,
                    headers: { 'User-Agent': 'CoinbitClub-Railway-Reconnector/1.0' }
                });

                results.details[endpoint.name] = {
                    status: 'accessible',
                    response_time: response.headers['x-response-time'] || 'unknown'
                };

                console.log(`      ‚úÖ Acess√≠vel`);
                results.accessible_exchanges++;

            } catch (error) {
                results.details[endpoint.name] = {
                    status: 'blocked',
                    error: error.response?.status || error.code
                };

                console.log(`      ‚ùå Bloqueado - ${error.response?.status || error.code}`);
                results.blocked_exchanges++;
            }

            await new Promise(resolve => setTimeout(resolve, 500));
        }

        return results;
    }

    /**
     * üîç ENCONTRAR USU√ÅRIOS COM CHAVES BLOQUEADAS
     */
    async findBlockedUsers() {
        console.log('  üîç Buscando usu√°rios com problemas de conex√£o...');

        try {
            const query = `
                SELECT 
                    u.id,
                    u.username,
                    u.email,
                    COUNT(uak.id) as total_keys,
                    COUNT(CASE WHEN uak.validation_status IN ('FAILED', 'BLOCKED') THEN 1 END) as blocked_keys
                FROM users u
                JOIN user_api_keys uak ON u.id = uak.user_id
                WHERE u.is_active = true
                AND uak.is_active = true
                AND uak.api_key IS NOT NULL
                GROUP BY u.id, u.username, u.email
                HAVING COUNT(CASE WHEN uak.validation_status IN ('FAILED', 'BLOCKED') THEN 1 END) > 0
                ORDER BY blocked_keys DESC
            `;

            const result = await this.pool.query(query);
            console.log(`  üìä Encontrados ${result.rows.length} usu√°rios com chaves bloqueadas`);

            return result.rows;

        } catch (error) {
            console.error('  ‚ùå Erro ao buscar usu√°rios bloqueados:', error.message);
            return [];
        }
    }

    /**
     * üîÑ RECONECTAR USU√ÅRIO ESPEC√çFICO
     */
    async reconnectUser(user) {
        console.log(`    üîÑ Reconectando ${user.username}...`);

        const reconnectionResult = {
            user_id: user.id,
            username: user.username,
            total_keys: 0,
            successful_keys: 0,
            failed_keys: 0,
            success: false,
            details: []
        };

        try {
            // Buscar chaves do usu√°rio
            const keysQuery = `
                SELECT exchange, environment, api_key, secret_key
                FROM user_api_keys
                WHERE user_id = $1 AND is_active = true
                AND api_key IS NOT NULL AND secret_key IS NOT NULL
            `;

            const keysResult = await this.pool.query(keysQuery, [user.id]);
            const userKeys = keysResult.rows;
            reconnectionResult.total_keys = userKeys.length;

            for (const keyData of userKeys) {
                const keyTest = await this.testUserKey(user.id, keyData);
                
                if (keyTest.success) {
                    reconnectionResult.successful_keys++;
                    console.log(`      ‚úÖ ${keyData.exchange} ${keyData.environment}: CONECTADO`);
                } else {
                    reconnectionResult.failed_keys++;
                    console.log(`      ‚ùå ${keyData.exchange} ${keyData.environment}: ${keyTest.error}`);
                }

                reconnectionResult.details.push(keyTest);
                await new Promise(resolve => setTimeout(resolve, 1000));
            }

            reconnectionResult.success = reconnectionResult.successful_keys > 0;
            return reconnectionResult;

        } catch (error) {
            console.error(`    ‚ùå Erro ao reconectar ${user.username}:`, error.message);
            reconnectionResult.error = error.message;
            return reconnectionResult;
        }
    }

    /**
     * üß™ TESTAR CHAVE ESPEC√çFICA DO USU√ÅRIO
     */
    async testUserKey(userId, keyData) {
        try {
            if (keyData.exchange === 'bybit') {
                const result = await this.testBybitKey(keyData);
                await this.updateKeyStatus(userId, keyData.exchange, keyData.environment, 
                    result.success ? 'CONNECTED' : 'FAILED', result.error);
                return result;
            }
            
            return { success: false, error: 'Exchange n√£o suportada' };

        } catch (error) {
            return { success: false, error: error.message };
        }
    }

    /**
     * üü£ TESTAR CHAVE BYBIT
     */
    async testBybitKey(keyData) {
        try {
            const timestamp = Date.now().toString();
            const recvWindow = '5000';
            const baseURL = this.exchanges.bybit[keyData.environment];
            
            const queryString = `accountType=UNIFIED&apiKey=${keyData.api_key}`;
            const signPayload = timestamp + keyData.api_key + recvWindow + queryString;
            const signature = crypto.createHmac('sha256', keyData.secret_key).update(signPayload).digest('hex');
            
            const headers = {
                'X-BAPI-API-KEY': keyData.api_key,
                'X-BAPI-SIGN': signature,
                'X-BAPI-SIGN-TYPE': '2',
                'X-BAPI-TIMESTAMP': timestamp,
                'X-BAPI-RECV-WINDOW': recvWindow,
                'Content-Type': 'application/json',
                'User-Agent': 'CoinbitClub-Railway-Reconnector/1.0'
            };
            
            const response = await axios.get(`${baseURL}/v5/account/wallet-balance?${queryString}`, {
                headers,
                timeout: 15000
            });

            if (response.data.retCode === 0) {
                return { success: true, balance_checked: true };
            } else {
                return { success: false, error: response.data.retMsg || 'Erro desconhecido' };
            }

        } catch (error) {
            const errorMsg = error.response?.data?.retMsg || error.message;
            return { success: false, error: errorMsg };
        }
    }

    /**
     * üíæ ATUALIZAR STATUS DA CHAVE
     */
    async updateKeyStatus(userId, exchange, environment, status, errorMessage) {
        try {
            await this.pool.query(`
                UPDATE user_api_keys 
                SET 
                    validation_status = $1,
                    validation_error = $2,
                    last_validated_at = NOW()
                WHERE user_id = $3 AND exchange = $4 AND environment = $5
            `, [status, errorMessage, userId, exchange, environment]);
        } catch (error) {
            console.error('‚ùå Erro ao atualizar status:', error.message);
        }
    }

    /**
     * ‚ö° ATIVAR TRADING REAL
     */
    async activateRealTrading() {
        console.log('  ‚ö° Ativando sistema para trading real...');

        try {
            // Verificar quantos usu√°rios t√™m conex√µes ativas
            const activeUsersQuery = `
                SELECT COUNT(DISTINCT user_id) as active_users
                FROM user_api_keys 
                WHERE validation_status = 'CONNECTED'
                AND is_active = true
            `;

            const result = await this.pool.query(activeUsersQuery);
            const activeUsers = parseInt(result.rows[0].active_users) || 0;

            console.log(`  üìä Usu√°rios com conex√µes ativas: ${activeUsers}`);

            if (activeUsers > 0) {
                // Atualizar configura√ß√£o do sistema
                await this.pool.query(`
                    INSERT INTO system_config (key, value, updated_at)
                    VALUES ('REAL_TRADING_ENABLED', 'true', NOW())
                    ON CONFLICT (key) 
                    DO UPDATE SET value = 'true', updated_at = NOW()
                `);

                console.log('  ‚úÖ Trading real ativado no sistema');
                return { success: true, active_users: activeUsers };
            } else {
                console.log('  ‚ö†Ô∏è Nenhum usu√°rio com conex√µes ativas');
                return { success: false, active_users: 0 };
            }

        } catch (error) {
            console.error('  ‚ùå Erro ao ativar trading real:', error.message);
            return { success: false, error: error.message };
        }
    }

    /**
     * üìã GERAR INSTRU√á√ïES MANUAIS
     */
    async generateManualInstructions(reconnection) {
        const instructions = {
            title: 'üìã INSTRU√á√ïES PARA CORRE√á√ÉO MANUAL',
            ip_fixo: this.networkConfig.fixed_ip,
            ngrok_url: this.networkConfig.ngrok_url,
            steps: [
                'Verificar whitelist de IP nas exchanges:',
                '1. Bybit: Settings ‚Üí API Management ‚Üí Edit ‚Üí IP Restriction',
                `   Adicionar IP: ${this.networkConfig.fixed_ip}`,
                '2. Aguardar 5-10 minutos para propaga√ß√£o',
                '3. Testar novamente as conex√µes'
            ],
            support: 'suporte@coinbitclub.com'
        };

        console.log('\nüìã INSTRU√á√ïES MANUAIS:');
        console.log(JSON.stringify(instructions, null, 2));
        return instructions;
    }
}

module.exports = UrgentReconnector;

// Se executado diretamente
if (require.main === module) {
    console.log('üö® EXECUTANDO RECONEX√ÉO URGENTE...');
    const reconnector = new UrgentReconnector();
    
    reconnector.executeUrgentReconnection()
        .then(results => {
            console.log('\nüìã RECONEX√ÉO FINALIZADA');
            console.log('======================');
            process.exit(results.success ? 0 : 1);
        })
        .catch(error => {
            console.error('\n‚ùå FALHA CR√çTICA:', error);
            process.exit(1);
        });
}
