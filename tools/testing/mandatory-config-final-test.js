/**
 * üîç TESTE FINAL - VERIFICA√á√ÉO DE CONFIGURA√á√ïES OBRIGAT√ìRIAS
 * =========================================================
 * 
 * Verifica se o sistema est√° aplicando CORRETAMENTE as configura√ß√µes
 * obrigat√≥rias da especifica√ß√£o t√©cnica
 */

const path = require('path');

class MandatoryConfigurationTester {
    constructor() {
        this.testResults = {
            passed: 0,
            failed: 0,
            total: 0,
            details: []
        };
    }

    /**
     * üéØ EXECUTAR TODOS OS TESTES DE CONFIGURA√á√ÉO OBRIGAT√ìRIA
     */
    async runAllTests() {
        console.log('üîç TESTANDO APLICA√á√ÉO DE CONFIGURA√á√ïES OBRIGAT√ìRIAS...\n');

        try {
            // 1. Testar Universal Config Enforcer
            await this.testUniversalConfigEnforcer();
            
            // 2. Testar aplica√ß√£o de defaults obrigat√≥rios
            await this.testMandatoryDefaults();
            
            // 3. Testar valida√ß√£o de limites obrigat√≥rios
            await this.testMandatoryLimits();
            
            // 4. Testar enforcement de SL/TP obrigat√≥rios
            await this.testMandatoryStopLossTakeProfit();
            
            // 5. Testar cooldown e posi√ß√µes m√°ximas
            await this.testPositionLimits();
            
            // 6. Testar que an√°lise de risco n√£o bloqueia opera√ß√µes
            await this.testRiskAnalysisInformative();
            
            // Relat√≥rio final
            this.generateFinalReport();
            
        } catch (error) {
            console.error('‚ùå Erro durante testes:', error.message);
        }
    }

    /**
     * üõ†Ô∏è TESTE 1: UNIVERSAL CONFIG ENFORCER
     */
    async testUniversalConfigEnforcer() {
        console.log('üîß TESTE 1: Universal Config Enforcer');
        
        try {
            const UniversalConfigEnforcer = require('../../src/utils/universal-config-enforcer.js');
            const enforcer = new UniversalConfigEnforcer();
            
            // Testar aplica√ß√£o de defaults
            const userConfig = {}; // Usu√°rio sem configura√ß√µes
            const enforced = enforcer.enforceSpecificationDefaults(userConfig);
            
            this.assert(enforced.leverage === 5, 'Default leverage deve ser 5x');
            this.assert(enforced.stopLoss === 10, 'Default SL deve ser 10% (2x5)');
            this.assert(enforced.takeProfit === 15, 'Default TP deve ser 15% (3x5)');
            this.assert(enforced.positionSizePercent === 30, 'Default position size deve ser 30%');
            this.assert(enforced.maxPositions === 2, 'M√°ximo 2 posi√ß√µes deve ser for√ßado');
            this.assert(enforced.cooldownMinutes === 120, 'Cooldown 120min deve ser for√ßado');
            this.assert(enforced.mandatoryStopLoss === true, 'SL obrigat√≥rio deve ser true');
            this.assert(enforced.mandatoryTakeProfit === true, 'TP obrigat√≥rio deve ser true');
            
            console.log('   ‚úÖ Universal Config Enforcer funcionando corretamente');
            
        } catch (error) {
            this.fail('Universal Config Enforcer n√£o funciona: ' + error.message);
        }
    }

    /**
     * üéØ TESTE 2: DEFAULTS OBRIGAT√ìRIOS
     */
    async testMandatoryDefaults() {
        console.log('üéØ TESTE 2: Defaults Obrigat√≥rios da Especifica√ß√£o');
        
        try {
            const UniversalConfigEnforcer = require('../../src/utils/universal-config-enforcer.js');
            const enforcer = new UniversalConfigEnforcer();
            
            // Testar com configura√ß√µes parciais do usu√°rio
            const partialConfig = { leverage: 8 };
            const enforced = enforcer.enforceSpecificationDefaults(partialConfig);
            
            this.assert(enforced.leverage === 8, 'Leverage do usu√°rio deve ser respeitado se v√°lido');
            this.assert(enforced.stopLoss === 16, 'SL deve ser calculado: 8x2 = 16%');
            this.assert(enforced.takeProfit === 24, 'TP deve ser calculado: 8x3 = 24%');
            
            // Testar limita√ß√£o autom√°tica
            const excessiveConfig = { leverage: 15, positionSizePercent: 70 };
            const limited = enforcer.enforceSpecificationDefaults(excessiveConfig);
            
            this.assert(limited.leverage === 10, 'Leverage deve ser limitado ao m√°ximo (10x)');
            this.assert(limited.positionSizePercent === 50, 'Position size deve ser limitado (50%)');
            
            console.log('   ‚úÖ Defaults obrigat√≥rios aplicados corretamente');
            
        } catch (error) {
            this.fail('Defaults obrigat√≥rios falharam: ' + error.message);
        }
    }

    /**
     * üö´ TESTE 3: LIMITES OBRIGAT√ìRIOS
     */
    async testMandatoryLimits() {
        console.log('üö´ TESTE 3: Limites Obrigat√≥rios');
        
        try {
            const UniversalConfigEnforcer = require('../../src/utils/universal-config-enforcer.js');
            const enforcer = new UniversalConfigEnforcer();
            
            // Testar opera√ß√£o que excede limites
            const excessiveOperation = {
                leverage: 20,
                positionSizePercent: 80,
                stopLoss: 0,
                takeProfit: 0
            };
            
            const validation = enforcer.validateAgainstSpecification(excessiveOperation);
            
            this.assert(!validation.isValid, 'Opera√ß√£o excessiva deve ser rejeitada');
            this.assert(validation.errors.length > 0, 'Deve conter erros de valida√ß√£o');
            this.assert(validation.enforcedConfig.leverage <= 10, 'Config for√ßada deve respeitar limites');
            
            console.log('   ‚úÖ Limites obrigat√≥rios sendo enfor√ßados');
            
        } catch (error) {
            this.fail('Limites obrigat√≥rios falharam: ' + error.message);
        }
    }

    /**
     * üõ°Ô∏è TESTE 4: SL/TP OBRIGAT√ìRIOS
     */
    async testMandatoryStopLossTakeProfit() {
        console.log('üõ°Ô∏è TESTE 4: Stop Loss e Take Profit Obrigat√≥rios');
        
        try {
            const UniversalConfigEnforcer = require('../../src/utils/universal-config-enforcer.js');
            const enforcer = new UniversalConfigEnforcer();
            
            // Testar opera√ß√£o sem SL/TP
            const operationWithoutStopLoss = {
                leverage: 5,
                positionSizePercent: 30,
                stopLoss: 0,
                takeProfit: 15
            };
            
            const validation1 = enforcer.validateAgainstSpecification(operationWithoutStopLoss);
            this.assert(!validation1.isValid, 'Opera√ß√£o sem SL deve ser rejeitada');
            this.assert(validation1.errors.some(e => e.includes('Stop Loss')), 'Erro deve mencionar Stop Loss');
            
            // Testar opera√ß√£o sem TP
            const operationWithoutTakeProfit = {
                leverage: 5,
                positionSizePercent: 30,
                stopLoss: 10,
                takeProfit: 0
            };
            
            const validation2 = enforcer.validateAgainstSpecification(operationWithoutTakeProfit);
            this.assert(!validation2.isValid, 'Opera√ß√£o sem TP deve ser rejeitada');
            this.assert(validation2.errors.some(e => e.includes('Take Profit')), 'Erro deve mencionar Take Profit');
            
            console.log('   ‚úÖ SL/TP obrigat√≥rios sendo enfor√ßados');
            
        } catch (error) {
            this.fail('SL/TP obrigat√≥rios falharam: ' + error.message);
        }
    }

    /**
     * üìä TESTE 5: LIMITES DE POSI√á√ïES
     */
    async testPositionLimits() {
        console.log('üìä TESTE 5: Limites de Posi√ß√µes e Cooldown');
        
        try {
            const UniversalConfigEnforcer = require('../../src/utils/universal-config-enforcer.js');
            const enforcer = new UniversalConfigEnforcer();
            
            const config = enforcer.SPEC_CONFIG;
            
            this.assert(config.MAX_POSITIONS_PER_USER === 2, 'M√°ximo 2 posi√ß√µes por usu√°rio');
            this.assert(config.COOLDOWN_MINUTES_PER_SYMBOL === 120, 'Cooldown de 120 minutos');
            this.assert(config.MAX_RISK_PER_TRADE === 0.02, 'M√°ximo 2% risco por trade');
            
            console.log('   ‚úÖ Limites de posi√ß√µes configurados corretamente');
            
        } catch (error) {
            this.fail('Limites de posi√ß√µes falharam: ' + error.message);
        }
    }

    /**
     * üìà TESTE 6: AN√ÅLISE DE RISCO INFORMATIVA
     */
    async testRiskAnalysisInformative() {
        console.log('üìà TESTE 6: An√°lise de Risco Como Informativa');
        
        try {
            const UniversalConfigEnforcer = require('../../src/utils/universal-config-enforcer.js');
            const enforcer = new UniversalConfigEnforcer();
            
            // Opera√ß√£o com configura√ß√µes v√°lidas da especifica√ß√£o
            const validOperation = {
                leverage: 5,
                stopLoss: 10,
                takeProfit: 15,
                positionSizePercent: 30
            };
            
            const validation = enforcer.validateAgainstSpecification(validOperation);
            
            this.assert(validation.isValid, 'Opera√ß√£o conforme especifica√ß√£o deve ser aprovada');
            this.assert(validation.errors.length === 0, 'N√£o deve haver erros para opera√ß√£o v√°lida');
            
            // Verificar que an√°lise de risco n√£o bloqueia
            const enforcedConfig = validation.enforcedConfig;
            this.assert(enforcedConfig.maxRiskPerTrade === 0.02, 'Risco deve ser informativo (0.02)');
            
            console.log('   ‚úÖ An√°lise de risco √© informativa, n√£o restritiva');
            
        } catch (error) {
            this.fail('Teste de risco informativo falhou: ' + error.message);
        }
    }

    /**
     * ‚úÖ ASSERT HELPER
     */
    assert(condition, message) {
        this.testResults.total++;
        
        if (condition) {
            this.testResults.passed++;
            this.testResults.details.push({ status: '‚úÖ', message });
        } else {
            this.testResults.failed++;
            this.testResults.details.push({ status: '‚ùå', message });
            throw new Error(message);
        }
    }

    /**
     * ‚ùå FAIL HELPER
     */
    fail(message) {
        this.testResults.total++;
        this.testResults.failed++;
        this.testResults.details.push({ status: '‚ùå', message });
        console.log(`   ‚ùå ${message}`);
    }

    /**
     * üìä RELAT√ìRIO FINAL
     */
    generateFinalReport() {
        console.log('\n' + '='.repeat(70));
        console.log('üìã RELAT√ìRIO FINAL - CONFIGURA√á√ïES OBRIGAT√ìRIAS');
        console.log('='.repeat(70));
        
        const successRate = (this.testResults.passed / this.testResults.total * 100).toFixed(1);
        
        console.log(`üìä Taxa de Sucesso: ${successRate}%`);
        console.log(`‚úÖ Testes Aprovados: ${this.testResults.passed}/${this.testResults.total}`);
        console.log(`‚ùå Testes Falharam: ${this.testResults.failed}/${this.testResults.total}`);
        
        console.log('\nüìã DETALHES DOS TESTES:');
        this.testResults.details.forEach(detail => {
            console.log(`   ${detail.status} ${detail.message}`);
        });
        
        if (this.testResults.failed === 0) {
            console.log('\nüéâ TODAS AS CONFIGURA√á√ïES OBRIGAT√ìRIAS APLICADAS CORRETAMENTE!');
            console.log('‚úÖ Sistema est√° conforme especifica√ß√£o t√©cnica');
            console.log('‚úÖ Trading configurations s√£o OBRIGAT√ìRIAS, n√£o opcionais');
            console.log('‚úÖ An√°lise de risco √© INFORMATIVA apenas');
            console.log('‚úÖ Par√¢metros padr√£o s√£o aplicados automaticamente');
            console.log('‚úÖ Limites m√°ximos s√£o enfor√ßados');
        } else {
            console.log('\n‚ö†Ô∏è ALGUMAS CONFIGURA√á√ïES PRECISAM DE AJUSTES');
        }
        
        console.log('\nüöÄ SISTEMA MARKETBOT ENTERPRISE OPERACIONAL 24/7');
        console.log('\nüí° RESUMO T√âCNICO:');
        console.log('   ‚Ä¢ Max 2 posi√ß√µes simult√¢neas por usu√°rio (FOR√áADO)');
        console.log('   ‚Ä¢ Cooldown 120min por moeda/usu√°rio (FOR√áADO)');
        console.log('   ‚Ä¢ Stop Loss OBRIGAT√ìRIO em toda opera√ß√£o');
        console.log('   ‚Ä¢ Take Profit OBRIGAT√ìRIO em toda opera√ß√£o');
        console.log('   ‚Ä¢ Leverage padr√£o 5x (m√°x 10x) conforme especifica√ß√£o');
        console.log('   ‚Ä¢ SL: 2x alavancagem | TP: 3x alavancagem (defaults)');
        console.log('   ‚Ä¢ Tamanho posi√ß√£o: 30% saldo (10-50% personaliz√°vel)');
        console.log('   ‚Ä¢ An√°lise de risco: INFORMATIVA, n√£o bloqueia trades');
    }
}

// Executar testes se chamado diretamente
if (require.main === module) {
    const tester = new MandatoryConfigurationTester();
    tester.runAllTests()
        .then(() => {
            console.log('\nüéØ TESTES FINALIZADOS!');
            process.exit(tester.testResults.failed === 0 ? 0 : 1);
        })
        .catch(error => {
            console.error('\nüí• ERRO NOS TESTES:', error.message);
            process.exit(1);
        });
}

module.exports = MandatoryConfigurationTester;
